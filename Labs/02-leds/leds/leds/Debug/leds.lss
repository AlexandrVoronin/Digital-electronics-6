
leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000776  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a7  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000316  00000000  00000000  00000fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  000016d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
}

int main(void)
{
    /* RED LEDs */
    DDRC = DDRC | (1<<LED_RED0) | (1<<LED_RED1) | (1<<LED_RED2) | (1<<LED_RED3) | (1<<LED_RED4);
  80:	87 b1       	in	r24, 0x07	; 7
  82:	8f 61       	ori	r24, 0x1F	; 31
  84:	87 b9       	out	0x07, r24	; 7
    PORTC = PORTC & ~(1<<LED_RED0) & ~(1<<LED_RED1) & ~(1<<LED_RED2) & ~(1<<LED_RED3) & ~(1<<LED_RED4);				
  86:	88 b1       	in	r24, 0x08	; 8
  88:	80 7e       	andi	r24, 0xE0	; 224
  8a:	88 b9       	out	0x08, r24	; 8
	
	/* BUTTON */
	DDRD = DDRD & ~(1<<BTN);								// & ~(1 ...vstup
  8c:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN);	
  8e:	58 9a       	sbi	0x0b, 0	; 11
	
					
    // Infinite loop
    while (1)
    {
		if(bit_is_clear(PIND, BTN))								// je tlacitko v 1? -> clear... aktivni nula
  90:	48 99       	sbic	0x09, 0	; 9
  92:	20 c0       	rjmp	.+64     	; 0xd4 <main+0x54>
		{		
			PORTC = PORTC | (1<<LED_RED0);
  94:	40 9a       	sbi	0x08, 0	; 8
  96:	94 e0       	ldi	r25, 0x04	; 4
			for(i = 0; i < 4; i++)
			{
				PORTC = PORTC<<1;
  98:	88 b1       	in	r24, 0x08	; 8
  9a:	88 0f       	add	r24, r24
  9c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	34 e3       	ldi	r19, 0x34	; 52
  a2:	8c e0       	ldi	r24, 0x0C	; 12
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
  b0:	91 50       	subi	r25, 0x01	; 1
    while (1)
    {
		if(bit_is_clear(PIND, BTN))								// je tlacitko v 1? -> clear... aktivni nula
		{		
			PORTC = PORTC | (1<<LED_RED0);
			for(i = 0; i < 4; i++)
  b2:	91 f7       	brne	.-28     	; 0x98 <main+0x18>
  b4:	94 e0       	ldi	r25, 0x04	; 4
				_delay_ms(BLINK_DELAY);
				//knightRider(i);
			}
			for(i = 4; i > 0; i--)
			{
				PORTC = PORTC>>1;
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	86 95       	lsr	r24
  ba:	88 b9       	out	0x08, r24	; 8
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	34 e3       	ldi	r19, 0x34	; 52
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4c>
  cc:	00 00       	nop
  ce:	91 50       	subi	r25, 0x01	; 1
			{
				PORTC = PORTC<<1;
				_delay_ms(BLINK_DELAY);
				//knightRider(i);
			}
			for(i = 4; i > 0; i--)
  d0:	91 f7       	brne	.-28     	; 0xb6 <main+0x36>
  d2:	de cf       	rjmp	.-68     	; 0x90 <main+0x10>
				_delay_ms(BLINK_DELAY);
				//knightRider(i);
			}
		}
		else
			PORTC = PORTC & ~(1<<LED_RED0);
  d4:	40 98       	cbi	0x08, 0	; 8
  d6:	dc cf       	rjmp	.-72     	; 0x90 <main+0x10>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
