
leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cc  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c9  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  000010e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000164  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <fce>:
 * Main function where the program execution begins. Toggle two LEDs 
 * when a push button is pressed.
 */
void fce (int i)
{
	switch(i)
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	91 05       	cpc	r25, r1
  84:	d1 f0       	breq	.+52     	; 0xba <fce+0x3a>
  86:	2c f4       	brge	.+10     	; 0x92 <fce+0x12>
  88:	00 97       	sbiw	r24, 0x00	; 0
  8a:	49 f0       	breq	.+18     	; 0x9e <fce+0x1e>
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	61 f0       	breq	.+24     	; 0xa8 <fce+0x28>
  90:	2f c0       	rjmp	.+94     	; 0xf0 <fce+0x70>
  92:	83 30       	cpi	r24, 0x03	; 3
  94:	91 05       	cpc	r25, r1
  96:	d1 f0       	breq	.+52     	; 0xcc <fce+0x4c>
  98:	04 97       	sbiw	r24, 0x04	; 4
  9a:	09 f1       	breq	.+66     	; 0xde <fce+0x5e>
  9c:	29 c0       	rjmp	.+82     	; 0xf0 <fce+0x70>
	{
		case 0:
			PORTC = PORTC ^ (1<<LED_RED0);
  9e:	98 b1       	in	r25, 0x08	; 8
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	88 b9       	out	0x08, r24	; 8
			break;
  a6:	08 95       	ret
		case 1:
			PORTC = PORTC ^ (1<<LED_RED0);
  a8:	98 b1       	in	r25, 0x08	; 8
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	89 27       	eor	r24, r25
  ae:	88 b9       	out	0x08, r24	; 8
			PORTC = PORTC ^ (1<<LED_RED1);
  b0:	98 b1       	in	r25, 0x08	; 8
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	89 27       	eor	r24, r25
  b6:	88 b9       	out	0x08, r24	; 8
			break;
  b8:	08 95       	ret
		case 2:
			PORTC = PORTC ^ (1<<LED_RED1);
  ba:	98 b1       	in	r25, 0x08	; 8
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	89 27       	eor	r24, r25
  c0:	88 b9       	out	0x08, r24	; 8
			PORTC = PORTC ^ (1<<LED_RED2);
  c2:	98 b1       	in	r25, 0x08	; 8
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	89 27       	eor	r24, r25
  c8:	88 b9       	out	0x08, r24	; 8
			break;
  ca:	08 95       	ret
		case 3:
			PORTC = PORTC ^ (1<<LED_RED2);
  cc:	98 b1       	in	r25, 0x08	; 8
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	89 27       	eor	r24, r25
  d2:	88 b9       	out	0x08, r24	; 8
			PORTC = PORTC ^ (1<<LED_RED3);
  d4:	98 b1       	in	r25, 0x08	; 8
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	89 27       	eor	r24, r25
  da:	88 b9       	out	0x08, r24	; 8
			break;
  dc:	08 95       	ret
		case 4:
			PORTC = PORTC ^ (1<<LED_RED3);
  de:	98 b1       	in	r25, 0x08	; 8
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	89 27       	eor	r24, r25
  e4:	88 b9       	out	0x08, r24	; 8
			PORTC = PORTC ^ (1<<LED_RED4);
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	89 27       	eor	r24, r25
  ec:	88 b9       	out	0x08, r24	; 8
			break;
  ee:	08 95       	ret
		default:
			PORTC = PORTC ^ (1<<LED_RED0);
  f0:	98 b1       	in	r25, 0x08	; 8
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	89 27       	eor	r24, r25
  f6:	88 b9       	out	0x08, r24	; 8
  f8:	08 95       	ret

000000fa <main>:
   // DDRB = DDRB | (1<<LED_GREEN);							// | (1 ...vystup
    // ...and turn LED off in Data Register
   // PORTB = PORTB & ~(1<<LED_GREEN);

    /* RED LEDs */
    DDRC = DDRC | (1<<LED_RED0);
  fa:	38 9a       	sbi	0x07, 0	; 7
    PORTC = PORTC & ~(1<<LED_RED0);
  fc:	40 98       	cbi	0x08, 0	; 8
	
	DDRC = DDRC | (1<<LED_RED1);
  fe:	39 9a       	sbi	0x07, 1	; 7
	PORTC = PORTC & ~(1<<LED_RED1);
 100:	41 98       	cbi	0x08, 1	; 8
	
	DDRC = DDRC | (1<<LED_RED2);
 102:	3a 9a       	sbi	0x07, 2	; 7
	PORTC = PORTC & ~(1<<LED_RED2);
 104:	42 98       	cbi	0x08, 2	; 8
	
	DDRC = DDRC | (1<<LED_RED3);
 106:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & ~(1<<LED_RED3);
 108:	43 98       	cbi	0x08, 3	; 8
	
	DDRC = DDRC | (1<<LED_RED4);
 10a:	3c 9a       	sbi	0x07, 4	; 7
	PORTC = PORTC & ~(1<<LED_RED4);						
 10c:	44 98       	cbi	0x08, 4	; 8
	
	/* BUTTON */
	DDRD = DDRD & ~(1<<BTN);								// & ~(1 ...vstup
 10e:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN);					
 110:	58 9a       	sbi	0x0b, 0	; 11
    while (1)
    {
        // Pause several milliseconds
        //_delay_ms(BLINK_DELAY);
		
		if(bit_is_clear(PIND, BTN))								// je tlacitko v 1? -> clear... aktivni nula
 112:	48 99       	sbic	0x09, 0	; 9
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x18>
 116:	c0 e0       	ldi	r28, 0x00	; 0
 118:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	84 e3       	ldi	r24, 0x34	; 52
 11e:	9c e0       	ldi	r25, 0x0C	; 12
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x26>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x30>
 12a:	00 00       	nop
		{		
			for(int i = 0; i <= 4; i++)
			{
				_delay_ms(BLINK_DELAY);
				fce(i);
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 40 00 	call	0x80	; 0x80 <fce>
        // Pause several milliseconds
        //_delay_ms(BLINK_DELAY);
		
		if(bit_is_clear(PIND, BTN))								// je tlacitko v 1? -> clear... aktivni nula
		{		
			for(int i = 0; i <= 4; i++)
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	c5 30       	cpi	r28, 0x05	; 5
 136:	d1 05       	cpc	r29, r1
 138:	81 f7       	brne	.-32     	; 0x11a <main+0x20>
 13a:	c4 e0       	ldi	r28, 0x04	; 4
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	84 e3       	ldi	r24, 0x34	; 52
 142:	9c e0       	ldi	r25, 0x0C	; 12
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x4a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x54>
 14e:	00 00       	nop
				fce(i);
			}
			for(int i = 4; i >= 0; i--)
			{
				_delay_ms(BLINK_DELAY);
				fce(i);
 150:	ce 01       	movw	r24, r28
 152:	0e 94 40 00 	call	0x80	; 0x80 <fce>
			for(int i = 0; i <= 4; i++)
			{
				_delay_ms(BLINK_DELAY);
				fce(i);
			}
			for(int i = 4; i >= 0; i--)
 156:	21 97       	sbiw	r28, 0x01	; 1
 158:	90 f7       	brcc	.-28     	; 0x13e <main+0x44>
 15a:	db cf       	rjmp	.-74     	; 0x112 <main+0x18>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
