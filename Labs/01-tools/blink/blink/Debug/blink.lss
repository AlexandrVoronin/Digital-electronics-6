
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000017a  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000877  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ea  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  00001219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021e  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001afd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  8e:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <morse>:
/**
 * Toggle one LED and use the function from the delay library.
 */

void morse(char code[LEN])
{
  96:	fc 01       	movw	r30, r24
  98:	9c 01       	movw	r18, r24
  9a:	2d 5c       	subi	r18, 0xCD	; 205
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
			PORTB = PORTB ^ (1<<LED_GREEN);
			_delay_ms(DOT_DELAY);
		}
		else if(code[i]=='.')
		{
			PORTB = PORTB ^ (1<<LED_GREEN);
  9e:	90 e2       	ldi	r25, 0x20	; 32

void morse(char code[LEN])
{
	for(int i = 0; i<=LEN; i++)
	{
		if(code[i]=='-')
  a0:	81 91       	ld	r24, Z+
  a2:	8d 32       	cpi	r24, 0x2D	; 45
  a4:	c9 f4       	brne	.+50     	; 0xd8 <morse+0x42>
		{
			PORTB = PORTB ^ (1<<LED_GREEN);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	89 27       	eor	r24, r25
  aa:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	4f ef       	ldi	r20, 0xFF	; 255
  ae:	57 e8       	ldi	r21, 0x87	; 135
  b0:	83 e1       	ldi	r24, 0x13	; 19
  b2:	41 50       	subi	r20, 0x01	; 1
  b4:	50 40       	sbci	r21, 0x00	; 0
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <morse+0x1c>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <morse+0x26>
  bc:	00 00       	nop
			_delay_ms(DASH_DELAY);
			PORTB = PORTB ^ (1<<LED_GREEN);
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	89 27       	eor	r24, r25
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	53 ec       	ldi	r21, 0xC3	; 195
  c8:	89 e0       	ldi	r24, 0x09	; 9
  ca:	41 50       	subi	r20, 0x01	; 1
  cc:	50 40       	sbci	r21, 0x00	; 0
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <morse+0x34>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <morse+0x3e>
  d4:	00 00       	nop
  d6:	24 c0       	rjmp	.+72     	; 0x120 <morse+0x8a>
			_delay_ms(DOT_DELAY);
		}
		else if(code[i]=='.')
  d8:	8e 32       	cpi	r24, 0x2E	; 46
  da:	c9 f4       	brne	.+50     	; 0x10e <morse+0x78>
		{
			PORTB = PORTB ^ (1<<LED_GREEN);
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	89 27       	eor	r24, r25
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	4f ef       	ldi	r20, 0xFF	; 255
  e4:	53 ec       	ldi	r21, 0xC3	; 195
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	41 50       	subi	r20, 0x01	; 1
  ea:	50 40       	sbci	r21, 0x00	; 0
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <morse+0x52>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <morse+0x5c>
  f2:	00 00       	nop
			_delay_ms(DOT_DELAY);
			PORTB = PORTB ^ (1<<LED_GREEN);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	89 27       	eor	r24, r25
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	4f ef       	ldi	r20, 0xFF	; 255
  fc:	53 ec       	ldi	r21, 0xC3	; 195
  fe:	89 e0       	ldi	r24, 0x09	; 9
 100:	41 50       	subi	r20, 0x01	; 1
 102:	50 40       	sbci	r21, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <morse+0x6a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <morse+0x74>
 10a:	00 00       	nop
 10c:	09 c0       	rjmp	.+18     	; 0x120 <morse+0x8a>
 10e:	4f ef       	ldi	r20, 0xFF	; 255
 110:	51 ee       	ldi	r21, 0xE1	; 225
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	41 50       	subi	r20, 0x01	; 1
 116:	50 40       	sbci	r21, 0x00	; 0
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <morse+0x7e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <morse+0x88>
 11e:	00 00       	nop
 * Toggle one LED and use the function from the delay library.
 */

void morse(char code[LEN])
{
	for(int i = 0; i<=LEN; i++)
 120:	e2 17       	cp	r30, r18
 122:	f3 07       	cpc	r31, r19
 124:	09 f0       	breq	.+2      	; 0x128 <morse+0x92>
 126:	bc cf       	rjmp	.-136    	; 0xa0 <morse+0xa>
		else
		{
			_delay_ms(SHORT_DELAY);
		}
	}
}
 128:	08 95       	ret

0000012a <main>:

int main(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	e2 97       	sbiw	r28, 0x32	; 50
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);												// data direction register B, jestli je vstupni nebo vyst. (...nahrajeme 1) port
 13e:	25 9a       	sbi	0x04, 5	; 4
																				//OR - nastaveni na 1... ( aby se nam neprepsaly pripadne 1 ktere tam uz jsou)
    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);											//<< binary shift, posune se o PB5 - 5 pozic (PB5 je na 5. pinu)
 140:	2d 98       	cbi	0x05, 5	; 5
	
	//morse code: D-E-2 (- . .; .; . . - - -)
	
	while (1)
	{
		char code[LEN] = "-..,.,..---";
 142:	0f 2e       	mov	r0, r31
 144:	f6 e2       	ldi	r31, 0x26	; 38
 146:	ff 2e       	mov	r15, r31
 148:	f0 2d       	mov	r31, r0
 14a:	8e 01       	movw	r16, r28
 14c:	03 5f       	subi	r16, 0xF3	; 243
 14e:	1f 4f       	sbci	r17, 0xFF	; 255
 150:	8c e0       	ldi	r24, 0x0C	; 12
 152:	e0 e0       	ldi	r30, 0x00	; 0
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	de 01       	movw	r26, r28
 158:	11 96       	adiw	r26, 0x01	; 1
 15a:	01 90       	ld	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	8a 95       	dec	r24
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x30>
 162:	f8 01       	movw	r30, r16
 164:	8f 2d       	mov	r24, r15
 166:	11 92       	st	Z+, r1
 168:	8a 95       	dec	r24
 16a:	e9 f7       	brne	.-6      	; 0x166 <main+0x3c>
		morse(code);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 4b 00 	call	0x96	; 0x96 <morse>
 174:	ed cf       	rjmp	.-38     	; 0x150 <main+0x26>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
