
hc-sr04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000a9a  00000b2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  0080013a  0080013a  00000b68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ae4  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba4  00000000  00000000  0000281c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d18  00000000  00000000  000033c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  000040d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000703  00000000  00000000  00004484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cdb  00000000  00000000  00004b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005862  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_13>
  38:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_18>
  4c:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 38 01 	call	0x270	; 0x270 <main>
  9e:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/* GPIO_config_input_pullup */
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register
	*reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 23       	and	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
/* GPIO_write_low */
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  e0:	fc 01       	movw	r30, r24
	*reg_name = *reg_name & ~(1<<pin_num);
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
/*--------------------------------------------------------------------*/
/* GPIO_write_high */

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_toggle>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */				// toggle choosen bit

void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
 112:	fc 01       	movw	r30, r24
 114:	40 81       	ld	r20, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_toggle+0xe>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_toggle+0xa>
 124:	24 27       	eor	r18, r20
 126:	20 83       	st	Z, r18
 128:	08 95       	ret

0000012a <toggle_e>:
 12a:	29 9a       	sbi	0x05, 1	; 5
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <toggle_e+0x4>
 132:	00 00       	nop
 134:	29 98       	cbi	0x05, 1	; 5
 136:	08 95       	ret

00000138 <lcd_write>:
 138:	cf 93       	push	r28
 13a:	c8 2f       	mov	r28, r24
 13c:	66 23       	and	r22, r22
 13e:	11 f0       	breq	.+4      	; 0x144 <lcd_write+0xc>
 140:	28 9a       	sbi	0x05, 0	; 5
 142:	01 c0       	rjmp	.+2      	; 0x146 <lcd_write+0xe>
 144:	28 98       	cbi	0x05, 0	; 5
 146:	54 9a       	sbi	0x0a, 4	; 10
 148:	55 9a       	sbi	0x0a, 5	; 10
 14a:	56 9a       	sbi	0x0a, 6	; 10
 14c:	57 9a       	sbi	0x0a, 7	; 10
 14e:	5f 98       	cbi	0x0b, 7	; 11
 150:	5e 98       	cbi	0x0b, 6	; 11
 152:	5d 98       	cbi	0x0b, 5	; 11
 154:	5c 98       	cbi	0x0b, 4	; 11
 156:	cc 23       	and	r28, r28
 158:	0c f4       	brge	.+2      	; 0x15c <lcd_write+0x24>
 15a:	5f 9a       	sbi	0x0b, 7	; 11
 15c:	c6 fd       	sbrc	r28, 6
 15e:	5e 9a       	sbi	0x0b, 6	; 11
 160:	c5 fd       	sbrc	r28, 5
 162:	5d 9a       	sbi	0x0b, 5	; 11
 164:	c4 fd       	sbrc	r28, 4
 166:	5c 9a       	sbi	0x0b, 4	; 11
 168:	0e 94 95 00 	call	0x12a	; 0x12a <toggle_e>
 16c:	5f 98       	cbi	0x0b, 7	; 11
 16e:	5e 98       	cbi	0x0b, 6	; 11
 170:	5d 98       	cbi	0x0b, 5	; 11
 172:	5c 98       	cbi	0x0b, 4	; 11
 174:	c3 fd       	sbrc	r28, 3
 176:	5f 9a       	sbi	0x0b, 7	; 11
 178:	c2 fd       	sbrc	r28, 2
 17a:	5e 9a       	sbi	0x0b, 6	; 11
 17c:	c1 fd       	sbrc	r28, 1
 17e:	5d 9a       	sbi	0x0b, 5	; 11
 180:	c0 fd       	sbrc	r28, 0
 182:	5c 9a       	sbi	0x0b, 4	; 11
 184:	0e 94 95 00 	call	0x12a	; 0x12a <toggle_e>
 188:	5c 9a       	sbi	0x0b, 4	; 11
 18a:	5d 9a       	sbi	0x0b, 5	; 11
 18c:	5e 9a       	sbi	0x0b, 6	; 11
 18e:	5f 9a       	sbi	0x0b, 7	; 11
 190:	87 eb       	ldi	r24, 0xB7	; 183
 192:	9b e0       	ldi	r25, 0x0B	; 11
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_write+0x5c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_write+0x62>
 19a:	00 00       	nop
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <lcd_command>:
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_write>
 1a6:	08 95       	ret

000001a8 <lcd_gotoxy>:
 1a8:	61 11       	cpse	r22, r1
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <lcd_gotoxy+0xc>
 1ac:	80 58       	subi	r24, 0x80	; 128
 1ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_command>
 1b2:	08 95       	ret
 1b4:	80 54       	subi	r24, 0x40	; 64
 1b6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_command>
 1ba:	08 95       	ret

000001bc <lcd_clrscr>:
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_command>
 1c2:	08 95       	ret

000001c4 <lcd_putc>:
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_write>
 1ca:	08 95       	ret

000001cc <lcd_puts>:
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
 1d2:	21 96       	adiw	r28, 0x01	; 1
 1d4:	fc 01       	movw	r30, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	88 23       	and	r24, r24
 1da:	29 f0       	breq	.+10     	; 0x1e6 <lcd_puts+0x1a>
 1dc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_putc>
 1e0:	89 91       	ld	r24, Y+
 1e2:	81 11       	cpse	r24, r1
 1e4:	fb cf       	rjmp	.-10     	; 0x1dc <lcd_puts+0x10>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <lcd_init>:
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
 1f0:	20 9a       	sbi	0x04, 0	; 4
 1f2:	55 9a       	sbi	0x0a, 5	; 10
 1f4:	21 9a       	sbi	0x04, 1	; 4
 1f6:	54 9a       	sbi	0x0a, 4	; 10
 1f8:	55 9a       	sbi	0x0a, 5	; 10
 1fa:	56 9a       	sbi	0x0a, 6	; 10
 1fc:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	99 ef       	ldi	r25, 0xF9	; 249
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x16>
 206:	00 c0       	rjmp	.+0      	; 0x208 <lcd_init+0x1c>
 208:	00 00       	nop
 20a:	5d 9a       	sbi	0x0b, 5	; 11
 20c:	5c 9a       	sbi	0x0b, 4	; 11
 20e:	0e 94 95 00 	call	0x12a	; 0x12a <toggle_e>
 212:	8f e1       	ldi	r24, 0x1F	; 31
 214:	9e e4       	ldi	r25, 0x4E	; 78
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x2a>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x30>
 21c:	00 00       	nop
 21e:	0e 94 95 00 	call	0x12a	; 0x12a <toggle_e>
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd_init+0x3a>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_init+0x40>
 22c:	00 00       	nop
 22e:	0e 94 95 00 	call	0x12a	; 0x12a <toggle_e>
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_init+0x4a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_init+0x50>
 23c:	00 00       	nop
 23e:	5c 98       	cbi	0x0b, 4	; 11
 240:	0e 94 95 00 	call	0x12a	; 0x12a <toggle_e>
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_init+0x5c>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_init+0x62>
 24e:	00 00       	nop
 250:	88 e2       	ldi	r24, 0x28	; 40
 252:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_command>
 256:	88 e0       	ldi	r24, 0x08	; 8
 258:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_command>
 25c:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_clrscr>
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_command>
 266:	8c 2f       	mov	r24, r28
 268:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_command>
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <main>:
char lcd_string[4]="    ";  

int main(void)
{	         
	//  Initialize LCD display
	lcd_init(LCD_DISP_ON);
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>
    
    //   Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 276:	87 e6       	ldi	r24, 0x67	; 103
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <uart_init>
	
    //   Set trigger pin to output, write low
	GPIO_config_output(&DDRB,TRIGGER);
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	84 e2       	ldi	r24, 0x24	; 36
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB,TRIGGER);
 288:	62 e0       	ldi	r22, 0x02	; 2
 28a:	85 e2       	ldi	r24, 0x25	; 37
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	
    //  Set echo pin to input, add pullup resistor
	GPIO_config_input_nopull(&DDRB,ECHO);
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	84 e2       	ldi	r24, 0x24	; 36
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
    
    //  Initialize LEDS
    GPIO_config_output(&DDRC,LED1);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	87 e2       	ldi	r24, 0x27	; 39
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTC,LED1);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	88 e2       	ldi	r24, 0x28	; 40
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_config_output(&DDRC,LED2);
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	87 e2       	ldi	r24, 0x27	; 39
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTC,LED2);
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	88 e2       	ldi	r24, 0x28	; 40
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_config_output(&DDRC,LED3);
 2c4:	63 e0       	ldi	r22, 0x03	; 3
 2c6:	87 e2       	ldi	r24, 0x27	; 39
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTC,LED3);
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	88 e2       	ldi	r24, 0x28	; 40
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_config_output(&DDRC,LED4);
 2d8:	64 e0       	ldi	r22, 0x04	; 4
 2da:	87 e2       	ldi	r24, 0x27	; 39
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTC,LED4);
 2e2:	64 e0       	ldi	r22, 0x04	; 4
 2e4:	88 e2       	ldi	r24, 0x28	; 40
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    
    // Initialize Speaker
    // TO DO
	
    //  timer/counter0 compare mode for measuring signals
	TIM0_overflow_16u();    // No prescaler
 2ec:	85 b5       	in	r24, 0x25	; 37
 2ee:	89 7f       	andi	r24, 0xF9	; 249
 2f0:	85 bd       	out	0x25, r24	; 37
 2f2:	85 b5       	in	r24, 0x25	; 37
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	85 bd       	out	0x25, r24	; 37
    TCCR0A |= (1<<WGM01);   // CTC mode
 2f8:	84 b5       	in	r24, 0x24	; 36
 2fa:	82 60       	ori	r24, 0x02	; 2
 2fc:	84 bd       	out	0x24, r24	; 36
    TIMSK0 |= (1<<OCIE0A);  // Output Compare Match A Interrupt Enable
 2fe:	ee e6       	ldi	r30, 0x6E	; 110
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	82 60       	ori	r24, 0x02	; 2
 306:	80 83       	st	Z, r24
    //  OCR0A = F_CPU/freq*2*N -1
    OCR0A = 79;
 308:	8f e4       	ldi	r24, 0x4F	; 79
 30a:	87 bd       	out	0x27, r24	; 39
    
    //  timer/counter1 overflow for LEDS, LCD
    TIM1_overflow_4ms();    
 30c:	e1 e8       	ldi	r30, 0x81	; 129
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	89 7f       	andi	r24, 0xF9	; 249
 314:	80 83       	st	Z, r24
 316:	80 81       	ld	r24, Z
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 31c:	ef e6       	ldi	r30, 0x6F	; 111
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	81 60       	ori	r24, 0x01	; 1
 324:	80 83       	st	Z, r24
    
    //  timer/counter2 for PWM controlled speaker
    // TO DO
    
	// Enables interrupts by setting the global interrupt mask
	sei();
 326:	78 94       	sei
 328:	ff cf       	rjmp	.-2      	; 0x328 <main+0xb8>

0000032a <lcd_clear>:
}

// Clear LCD display
void lcd_clear()
{
    lcd_gotoxy(0, 0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy>
    lcd_puts("                ");
 332:	84 e0       	ldi	r24, 0x04	; 4
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_puts>
 33a:	08 95       	ret

0000033c <__vector_14>:
/* Interrupt service routines ----------------------------------------*/
/**
 * ISR starts when ... Update Finite State Machine and ...
 * 
 */
ISR(TIMER0_COMPA_vect){	
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	2f 93       	push	r18
 348:	3f 93       	push	r19
 34a:	4f 93       	push	r20
 34c:	5f 93       	push	r21
 34e:	6f 93       	push	r22
 350:	7f 93       	push	r23
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	af 93       	push	r26
 358:	bf 93       	push	r27
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
	static uint16_t echo_dur = 0;   //  duration of ECHO    	

	static state_t state= STATE_PULSE;  // Current state of the FSM
       
	//  FSM
	switch(state)
 35e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <state.1999>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	f1 f0       	breq	.+60     	; 0x3a2 <__vector_14+0x66>
 366:	18 f0       	brcs	.+6      	; 0x36e <__vector_14+0x32>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	f1 f1       	breq	.+124    	; 0x3e8 <__vector_14+0xac>
 36c:	65 c0       	rjmp	.+202    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
	    //  Send pulse of length 10 us to TRIGGER pin
	    case STATE_PULSE:
            counter++;
 36e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <counter.1997>
 372:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <counter.1997+0x1>
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <counter.1997+0x1>
 37c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <counter.1997>
            		
			if(counter < 1)
 380:	89 2b       	or	r24, r25
 382:	31 f4       	brne	.+12     	; 0x390 <__vector_14+0x54>
			{
				GPIO_write_high(&PORTB,TRIGGER);				
 384:	62 e0       	ldi	r22, 0x02	; 2
 386:	85 e2       	ldi	r24, 0x25	; 37
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 38e:	56 c0       	rjmp	.+172    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			}
			else
			{
				GPIO_write_low(&PORTB,TRIGGER);
 390:	62 e0       	ldi	r22, 0x02	; 2
 392:	85 e2       	ldi	r24, 0x25	; 37
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
                state = STATE_ECHO_DETECT;                
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state.1999>
 3a0:	4d c0       	rjmp	.+154    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
            		
			break;
			
		//  Detect echo High value, if not detected for 65 ms -> send pulse
		case STATE_ECHO_DETECT:
            counter++;
 3a2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <counter.1997>
 3a6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <counter.1997+0x1>
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <counter.1997+0x1>
 3b0:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <counter.1997>
            
			if (counter<6500)
 3b4:	84 36       	cpi	r24, 0x64	; 100
 3b6:	99 41       	sbci	r25, 0x19	; 25
 3b8:	78 f4       	brcc	.+30     	; 0x3d8 <__vector_14+0x9c>
			{
				if(bit_is_set(PINB,ECHO))
 3ba:	1b 9b       	sbis	0x03, 3	; 3
 3bc:	3f c0       	rjmp	.+126    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				{
					echo_dur++;
 3be:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 3c2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 3cc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
					state = STATE_ECHO_DETECT;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state.1999>
 3d6:	32 c0       	rjmp	.+100    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				}	
			}
            else
            {
                counter = 0;
 3d8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <counter.1997+0x1>
 3dc:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <counter.1997>
                state = STATE_ECHO_MEAS;
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state.1999>
 3e6:	2a c0       	rjmp	.+84     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>

		//  Measure echo High length
		case STATE_ECHO_MEAS:


        distance = ((float)echo_dur*10)*0.17; // distance in mm
 3e8:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <__data_end>
 3ec:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <__data_end+0x1>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 1b 04 	call	0x836	; 0x836 <__floatunsisf>
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	40 e2       	ldi	r20, 0x20	; 32
 3fe:	51 e4       	ldi	r21, 0x41	; 65
 400:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 404:	2b e7       	ldi	r18, 0x7B	; 123
 406:	34 e1       	ldi	r19, 0x14	; 20
 408:	4e e2       	ldi	r20, 0x2E	; 46
 40a:	5e e3       	ldi	r21, 0x3E	; 62
 40c:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 410:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__fixunssfsi>
 414:	dc 01       	movw	r26, r24
 416:	cb 01       	movw	r24, r22
 418:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <distance+0x1>
 41c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <distance>
        echo_dur = 0;
 420:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <__data_end+0x1>
 424:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 428:	4a e0       	ldi	r20, 0x0A	; 10
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	71 e0       	ldi	r23, 0x01	; 1
 42e:	0e 94 16 05 	call	0xa2c	; 0xa2c <__itoa_ncheck>
                
        itoa(distance, lcd_string, 10);
        
        state=STATE_PULSE;
 432:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state.1999>
            
            
		break;
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>

		//  If something unexpected happens then move to PULSE
		default:
			state = STATE_PULSE;
 438:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state.1999>
		break;
	}
}
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_9>:
/**
 * ISR starts when timer/counter1 overflows.
 * Writes distance on LCD, uart and turns on LEDS.
 */
ISR(TIMER2_OVF_vect)
{          
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
    if(dif_distance != distance)    // if next meas. distance is different
 480:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <distance>
 484:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <distance+0x1>
 488:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <dif_distance>
 48c:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <dif_distance+0x1>
 490:	28 17       	cp	r18, r24
 492:	39 07       	cpc	r19, r25
 494:	09 f4       	brne	.+2      	; 0x498 <__vector_9+0x3a>
 496:	a2 c0       	rjmp	.+324    	; 0x5dc <__vector_9+0x17e>
    {                    
        // Write result on LCD screen
        if(distance < 2)  // distance smaller than minimum possible                    
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	91 05       	cpc	r25, r1
 49c:	58 f4       	brcc	.+22     	; 0x4b4 <__vector_9+0x56>
        {
            lcd_clear();
 49e:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_clear>
            lcd_gotoxy(0, 0);
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy>
            lcd_puts("Too small");
 4aa:	85 e1       	ldi	r24, 0x15	; 21
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_puts>
 4b2:	1c c0       	rjmp	.+56     	; 0x4ec <__vector_9+0x8e>
                        
            /*uart_puts("Distance too small.");
            uart_puts("\n");    // \n ... newline*/
        }
        else if(distance <= 400)
 4b4:	81 39       	cpi	r24, 0x91	; 145
 4b6:	91 40       	sbci	r25, 0x01	; 1
 4b8:	78 f4       	brcc	.+30     	; 0x4d8 <__vector_9+0x7a>
        {
            lcd_clear();
 4ba:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_clear>
            lcd_gotoxy(0, 0);
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy>
            lcd_puts("Dist: ");
 4c6:	8f e1       	ldi	r24, 0x1F	; 31
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_puts>
			
            lcd_puts(lcd_string);                       
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_puts>
 4d6:	0a c0       	rjmp	.+20     	; 0x4ec <__vector_9+0x8e>
            uart_puts(lcd_string);
            uart_puts("\n");    // \n ... newline*/
        }
        else if(distance > 400)   // distance greater than maximum possible
        {
            lcd_clear();
 4d8:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_clear>
            lcd_gotoxy(0, 0);
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy>
            lcd_puts("No object or > 400");
 4e4:	86 e2       	ldi	r24, 0x26	; 38
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_puts>
            /* uart_puts("Somethings wrong");
            uart_puts("\n");    // \n ... newline*/
        }
        
        //  Turn on LEDS
        if(distance <= 10)
 4ec:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <distance>
 4f0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <distance+0x1>
 4f4:	8b 30       	cpi	r24, 0x0B	; 11
 4f6:	91 05       	cpc	r25, r1
 4f8:	a8 f4       	brcc	.+42     	; 0x524 <__vector_9+0xc6>
        {
            GPIO_write_high(&PORTC, LED1);
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	88 e2       	ldi	r24, 0x28	; 40
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTC, LED2);
 504:	62 e0       	ldi	r22, 0x02	; 2
 506:	88 e2       	ldi	r24, 0x28	; 40
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTC, LED3);
 50e:	63 e0       	ldi	r22, 0x03	; 3
 510:	88 e2       	ldi	r24, 0x28	; 40
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTC, LED4);
 518:	64 e0       	ldi	r22, 0x04	; 4
 51a:	88 e2       	ldi	r24, 0x28	; 40
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 522:	5c c0       	rjmp	.+184    	; 0x5dc <__vector_9+0x17e>
        }
        else if(distance <= 50)
 524:	83 33       	cpi	r24, 0x33	; 51
 526:	91 05       	cpc	r25, r1
 528:	a8 f4       	brcc	.+42     	; 0x554 <__vector_9+0xf6>
        {
            GPIO_write_high(&PORTC, LED1);
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	88 e2       	ldi	r24, 0x28	; 40
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTC, LED2);
 534:	62 e0       	ldi	r22, 0x02	; 2
 536:	88 e2       	ldi	r24, 0x28	; 40
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTC, LED3);
 53e:	63 e0       	ldi	r22, 0x03	; 3
 540:	88 e2       	ldi	r24, 0x28	; 40
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_low(&PORTC, LED4);
 548:	64 e0       	ldi	r22, 0x04	; 4
 54a:	88 e2       	ldi	r24, 0x28	; 40
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 552:	44 c0       	rjmp	.+136    	; 0x5dc <__vector_9+0x17e>
        }
        else if(distance <= 100)
 554:	85 36       	cpi	r24, 0x65	; 101
 556:	91 05       	cpc	r25, r1
 558:	a8 f4       	brcc	.+42     	; 0x584 <__vector_9+0x126>
        {
            GPIO_write_high(&PORTC, LED1);
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	88 e2       	ldi	r24, 0x28	; 40
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTC, LED2);
 564:	62 e0       	ldi	r22, 0x02	; 2
 566:	88 e2       	ldi	r24, 0x28	; 40
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_low(&PORTC, LED3);
 56e:	63 e0       	ldi	r22, 0x03	; 3
 570:	88 e2       	ldi	r24, 0x28	; 40
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTC, LED4);
 578:	64 e0       	ldi	r22, 0x04	; 4
 57a:	88 e2       	ldi	r24, 0x28	; 40
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 582:	2c c0       	rjmp	.+88     	; 0x5dc <__vector_9+0x17e>
        }
        else if(distance <= 200)
 584:	89 3c       	cpi	r24, 0xC9	; 201
 586:	91 05       	cpc	r25, r1
 588:	a8 f4       	brcc	.+42     	; 0x5b4 <__vector_9+0x156>
        {
            GPIO_write_high(&PORTC, LED1);
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	88 e2       	ldi	r24, 0x28	; 40
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_low(&PORTC, LED2);
 594:	62 e0       	ldi	r22, 0x02	; 2
 596:	88 e2       	ldi	r24, 0x28	; 40
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTC, LED3);
 59e:	63 e0       	ldi	r22, 0x03	; 3
 5a0:	88 e2       	ldi	r24, 0x28	; 40
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTC, LED4);
 5a8:	64 e0       	ldi	r22, 0x04	; 4
 5aa:	88 e2       	ldi	r24, 0x28	; 40
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 5b2:	14 c0       	rjmp	.+40     	; 0x5dc <__vector_9+0x17e>
        }
        else
        {
            GPIO_write_low(&PORTC, LED1);
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	88 e2       	ldi	r24, 0x28	; 40
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTC, LED2);
 5be:	62 e0       	ldi	r22, 0x02	; 2
 5c0:	88 e2       	ldi	r24, 0x28	; 40
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTC, LED3);
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	88 e2       	ldi	r24, 0x28	; 40
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTC, LED4);
 5d2:	64 e0       	ldi	r22, 0x04	; 4
 5d4:	88 e2       	ldi	r24, 0x28	; 40
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        }
    }                 
    dif_distance = distance;
 5dc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <distance>
 5e0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <distance+0x1>
 5e4:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <dif_distance+0x1>
 5e8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dif_distance>
}
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <__vector_13>:
/**	TIMER for sound signalization
 *
 */
ISR(TIMER1_OVF_vect)
{
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	2f 93       	push	r18
 61a:	3f 93       	push	r19
 61c:	4f 93       	push	r20
 61e:	5f 93       	push	r21
 620:	6f 93       	push	r22
 622:	7f 93       	push	r23
 624:	8f 93       	push	r24
 626:	9f 93       	push	r25
 628:	af 93       	push	r26
 62a:	bf 93       	push	r27
 62c:	ef 93       	push	r30
 62e:	ff 93       	push	r31
	//  Turn on LEDS
	if(distance <= 10)
 630:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <distance>
 634:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <distance+0x1>
 638:	8b 30       	cpi	r24, 0x0B	; 11
 63a:	91 05       	cpc	r25, r1
 63c:	70 f4       	brcc	.+28     	; 0x65a <__vector_13+0x4c>
	{
		GPIO_toggle(&PORTD,SPEAKER);
 63e:	63 e0       	ldi	r22, 0x03	; 3
 640:	8b e2       	ldi	r24, 0x2B	; 43
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
		TIM1_overflow_4ms();
 648:	e1 e8       	ldi	r30, 0x81	; 129
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	89 7f       	andi	r24, 0xF9	; 249
 650:	80 83       	st	Z, r24
 652:	80 81       	ld	r24, Z
 654:	81 60       	ori	r24, 0x01	; 1
 656:	80 83       	st	Z, r24
 658:	3d c0       	rjmp	.+122    	; 0x6d4 <__vector_13+0xc6>
	}
	else if(distance <= 50)
 65a:	83 33       	cpi	r24, 0x33	; 51
 65c:	91 05       	cpc	r25, r1
 65e:	70 f4       	brcc	.+28     	; 0x67c <__vector_13+0x6e>
	{
		TIM1_overflow_33ms();
 660:	e1 e8       	ldi	r30, 0x81	; 129
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	8a 7f       	andi	r24, 0xFA	; 250
 668:	80 83       	st	Z, r24
 66a:	80 81       	ld	r24, Z
 66c:	82 60       	ori	r24, 0x02	; 2
 66e:	80 83       	st	Z, r24
		GPIO_toggle(&PORTD,SPEAKER);
 670:	63 e0       	ldi	r22, 0x03	; 3
 672:	8b e2       	ldi	r24, 0x2B	; 43
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
 67a:	2c c0       	rjmp	.+88     	; 0x6d4 <__vector_13+0xc6>
	}
	else if(distance <= 100)
 67c:	85 36       	cpi	r24, 0x65	; 101
 67e:	91 05       	cpc	r25, r1
 680:	70 f4       	brcc	.+28     	; 0x69e <__vector_13+0x90>
	{
		GPIO_toggle(&PORTD,SPEAKER);
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	8b e2       	ldi	r24, 0x2B	; 43
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
		TIM1_overflow_1s();
 68c:	e1 e8       	ldi	r30, 0x81	; 129
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	8c 7f       	andi	r24, 0xFC	; 252
 694:	80 83       	st	Z, r24
 696:	80 81       	ld	r24, Z
 698:	84 60       	ori	r24, 0x04	; 4
 69a:	80 83       	st	Z, r24
 69c:	1b c0       	rjmp	.+54     	; 0x6d4 <__vector_13+0xc6>
	}
	else if(distance <= 200)
 69e:	89 3c       	cpi	r24, 0xC9	; 201
 6a0:	91 05       	cpc	r25, r1
 6a2:	70 f4       	brcc	.+28     	; 0x6c0 <__vector_13+0xb2>
	{
		GPIO_toggle(&PORTD,SPEAKER);
 6a4:	63 e0       	ldi	r22, 0x03	; 3
 6a6:	8b e2       	ldi	r24, 0x2B	; 43
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
		TIM1_overflow_1s()
 6ae:	e1 e8       	ldi	r30, 0x81	; 129
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	8c 7f       	andi	r24, 0xFC	; 252
 6b6:	80 83       	st	Z, r24
 6b8:	80 81       	ld	r24, Z
 6ba:	84 60       	ori	r24, 0x04	; 4
 6bc:	80 83       	st	Z, r24
 6be:	0a c0       	rjmp	.+20     	; 0x6d4 <__vector_13+0xc6>
	}
	else
	{
		GPIO_toggle(&PORTD,SPEAKER);
 6c0:	63 e0       	ldi	r22, 0x03	; 3
 6c2:	8b e2       	ldi	r24, 0x2B	; 43
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
		TIM2_stop();	
 6ca:	e1 eb       	ldi	r30, 0xB1	; 177
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	88 7f       	andi	r24, 0xF8	; 248
 6d2:	80 83       	st	Z, r24
	}
 6d4:	ff 91       	pop	r31
 6d6:	ef 91       	pop	r30
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <__vector_18>:
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	2f 93       	push	r18
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	ef 93       	push	r30
 708:	ff 93       	push	r31
 70a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 70e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 712:	8c 71       	andi	r24, 0x1C	; 28
 714:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_RxHead>
 718:	ef 5f       	subi	r30, 0xFF	; 255
 71a:	ef 71       	andi	r30, 0x1F	; 31
 71c:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <UART_RxTail>
 720:	e9 17       	cp	r30, r25
 722:	39 f0       	breq	.+14     	; 0x732 <__vector_18+0x3c>
 724:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_RxHead>
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	e8 5b       	subi	r30, 0xB8	; 184
 72c:	fe 4f       	sbci	r31, 0xFE	; 254
 72e:	20 83       	st	Z, r18
 730:	01 c0       	rjmp	.+2      	; 0x734 <__vector_18+0x3e>
 732:	82 e0       	ldi	r24, 0x02	; 2
 734:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_LastRxError>
 738:	89 2b       	or	r24, r25
 73a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <UART_LastRxError>
 73e:	ff 91       	pop	r31
 740:	ef 91       	pop	r30
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	2f 91       	pop	r18
 748:	0f 90       	pop	r0
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <__vector_19>:
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	11 24       	eor	r1, r1
 75c:	8f 93       	push	r24
 75e:	9f 93       	push	r25
 760:	ef 93       	push	r30
 762:	ff 93       	push	r31
 764:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <UART_TxHead>
 768:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <UART_TxTail>
 76c:	98 17       	cp	r25, r24
 76e:	69 f0       	breq	.+26     	; 0x78a <__vector_19+0x38>
 770:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <UART_TxTail>
 774:	ef 5f       	subi	r30, 0xFF	; 255
 776:	ef 71       	andi	r30, 0x1F	; 31
 778:	e0 93 46 01 	sts	0x0146, r30	; 0x800146 <UART_TxTail>
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	e8 59       	subi	r30, 0x98	; 152
 780:	fe 4f       	sbci	r31, 0xFE	; 254
 782:	80 81       	ld	r24, Z
 784:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 788:	05 c0       	rjmp	.+10     	; 0x794 <__vector_19+0x42>
 78a:	e1 ec       	ldi	r30, 0xC1	; 193
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	8f 7d       	andi	r24, 0xDF	; 223
 792:	80 83       	st	Z, r24
 794:	ff 91       	pop	r31
 796:	ef 91       	pop	r30
 798:	9f 91       	pop	r25
 79a:	8f 91       	pop	r24
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	0f 90       	pop	r0
 7a2:	1f 90       	pop	r1
 7a4:	18 95       	reti

000007a6 <uart_init>:
 7a6:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <UART_TxHead>
 7aa:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxTail>
 7ae:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_RxHead>
 7b2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxTail>
 7b6:	99 23       	and	r25, r25
 7b8:	1c f4       	brge	.+6      	; 0x7c0 <uart_init+0x1a>
 7ba:	22 e0       	ldi	r18, 0x02	; 2
 7bc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 7c0:	90 78       	andi	r25, 0x80	; 128
 7c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 7c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 7ca:	88 e9       	ldi	r24, 0x98	; 152
 7cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 7d0:	86 e0       	ldi	r24, 0x06	; 6
 7d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 7d6:	08 95       	ret

000007d8 <__fixunssfsi>:
 7d8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_splitA>
 7dc:	88 f0       	brcs	.+34     	; 0x800 <__fixunssfsi+0x28>
 7de:	9f 57       	subi	r25, 0x7F	; 127
 7e0:	98 f0       	brcs	.+38     	; 0x808 <__fixunssfsi+0x30>
 7e2:	b9 2f       	mov	r27, r25
 7e4:	99 27       	eor	r25, r25
 7e6:	b7 51       	subi	r27, 0x17	; 23
 7e8:	b0 f0       	brcs	.+44     	; 0x816 <__fixunssfsi+0x3e>
 7ea:	e1 f0       	breq	.+56     	; 0x824 <__fixunssfsi+0x4c>
 7ec:	66 0f       	add	r22, r22
 7ee:	77 1f       	adc	r23, r23
 7f0:	88 1f       	adc	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	1a f0       	brmi	.+6      	; 0x7fc <__fixunssfsi+0x24>
 7f6:	ba 95       	dec	r27
 7f8:	c9 f7       	brne	.-14     	; 0x7ec <__fixunssfsi+0x14>
 7fa:	14 c0       	rjmp	.+40     	; 0x824 <__fixunssfsi+0x4c>
 7fc:	b1 30       	cpi	r27, 0x01	; 1
 7fe:	91 f0       	breq	.+36     	; 0x824 <__fixunssfsi+0x4c>
 800:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__fp_zero>
 804:	b1 e0       	ldi	r27, 0x01	; 1
 806:	08 95       	ret
 808:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_zero>
 80c:	67 2f       	mov	r22, r23
 80e:	78 2f       	mov	r23, r24
 810:	88 27       	eor	r24, r24
 812:	b8 5f       	subi	r27, 0xF8	; 248
 814:	39 f0       	breq	.+14     	; 0x824 <__fixunssfsi+0x4c>
 816:	b9 3f       	cpi	r27, 0xF9	; 249
 818:	cc f3       	brlt	.-14     	; 0x80c <__fixunssfsi+0x34>
 81a:	86 95       	lsr	r24
 81c:	77 95       	ror	r23
 81e:	67 95       	ror	r22
 820:	b3 95       	inc	r27
 822:	d9 f7       	brne	.-10     	; 0x81a <__fixunssfsi+0x42>
 824:	3e f4       	brtc	.+14     	; 0x834 <__fixunssfsi+0x5c>
 826:	90 95       	com	r25
 828:	80 95       	com	r24
 82a:	70 95       	com	r23
 82c:	61 95       	neg	r22
 82e:	7f 4f       	sbci	r23, 0xFF	; 255
 830:	8f 4f       	sbci	r24, 0xFF	; 255
 832:	9f 4f       	sbci	r25, 0xFF	; 255
 834:	08 95       	ret

00000836 <__floatunsisf>:
 836:	e8 94       	clt
 838:	09 c0       	rjmp	.+18     	; 0x84c <__floatsisf+0x12>

0000083a <__floatsisf>:
 83a:	97 fb       	bst	r25, 7
 83c:	3e f4       	brtc	.+14     	; 0x84c <__floatsisf+0x12>
 83e:	90 95       	com	r25
 840:	80 95       	com	r24
 842:	70 95       	com	r23
 844:	61 95       	neg	r22
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	8f 4f       	sbci	r24, 0xFF	; 255
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	99 23       	and	r25, r25
 84e:	a9 f0       	breq	.+42     	; 0x87a <__floatsisf+0x40>
 850:	f9 2f       	mov	r31, r25
 852:	96 e9       	ldi	r25, 0x96	; 150
 854:	bb 27       	eor	r27, r27
 856:	93 95       	inc	r25
 858:	f6 95       	lsr	r31
 85a:	87 95       	ror	r24
 85c:	77 95       	ror	r23
 85e:	67 95       	ror	r22
 860:	b7 95       	ror	r27
 862:	f1 11       	cpse	r31, r1
 864:	f8 cf       	rjmp	.-16     	; 0x856 <__floatsisf+0x1c>
 866:	fa f4       	brpl	.+62     	; 0x8a6 <__floatsisf+0x6c>
 868:	bb 0f       	add	r27, r27
 86a:	11 f4       	brne	.+4      	; 0x870 <__floatsisf+0x36>
 86c:	60 ff       	sbrs	r22, 0
 86e:	1b c0       	rjmp	.+54     	; 0x8a6 <__floatsisf+0x6c>
 870:	6f 5f       	subi	r22, 0xFF	; 255
 872:	7f 4f       	sbci	r23, 0xFF	; 255
 874:	8f 4f       	sbci	r24, 0xFF	; 255
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	16 c0       	rjmp	.+44     	; 0x8a6 <__floatsisf+0x6c>
 87a:	88 23       	and	r24, r24
 87c:	11 f0       	breq	.+4      	; 0x882 <__floatsisf+0x48>
 87e:	96 e9       	ldi	r25, 0x96	; 150
 880:	11 c0       	rjmp	.+34     	; 0x8a4 <__floatsisf+0x6a>
 882:	77 23       	and	r23, r23
 884:	21 f0       	breq	.+8      	; 0x88e <__floatsisf+0x54>
 886:	9e e8       	ldi	r25, 0x8E	; 142
 888:	87 2f       	mov	r24, r23
 88a:	76 2f       	mov	r23, r22
 88c:	05 c0       	rjmp	.+10     	; 0x898 <__floatsisf+0x5e>
 88e:	66 23       	and	r22, r22
 890:	71 f0       	breq	.+28     	; 0x8ae <__floatsisf+0x74>
 892:	96 e8       	ldi	r25, 0x86	; 134
 894:	86 2f       	mov	r24, r22
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	2a f0       	brmi	.+10     	; 0x8a6 <__floatsisf+0x6c>
 89c:	9a 95       	dec	r25
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	da f7       	brpl	.-10     	; 0x89c <__floatsisf+0x62>
 8a6:	88 0f       	add	r24, r24
 8a8:	96 95       	lsr	r25
 8aa:	87 95       	ror	r24
 8ac:	97 f9       	bld	r25, 7
 8ae:	08 95       	ret

000008b0 <__fp_split3>:
 8b0:	57 fd       	sbrc	r21, 7
 8b2:	90 58       	subi	r25, 0x80	; 128
 8b4:	44 0f       	add	r20, r20
 8b6:	55 1f       	adc	r21, r21
 8b8:	59 f0       	breq	.+22     	; 0x8d0 <__fp_splitA+0x10>
 8ba:	5f 3f       	cpi	r21, 0xFF	; 255
 8bc:	71 f0       	breq	.+28     	; 0x8da <__fp_splitA+0x1a>
 8be:	47 95       	ror	r20

000008c0 <__fp_splitA>:
 8c0:	88 0f       	add	r24, r24
 8c2:	97 fb       	bst	r25, 7
 8c4:	99 1f       	adc	r25, r25
 8c6:	61 f0       	breq	.+24     	; 0x8e0 <__fp_splitA+0x20>
 8c8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ca:	79 f0       	breq	.+30     	; 0x8ea <__fp_splitA+0x2a>
 8cc:	87 95       	ror	r24
 8ce:	08 95       	ret
 8d0:	12 16       	cp	r1, r18
 8d2:	13 06       	cpc	r1, r19
 8d4:	14 06       	cpc	r1, r20
 8d6:	55 1f       	adc	r21, r21
 8d8:	f2 cf       	rjmp	.-28     	; 0x8be <__fp_split3+0xe>
 8da:	46 95       	lsr	r20
 8dc:	f1 df       	rcall	.-30     	; 0x8c0 <__fp_splitA>
 8de:	08 c0       	rjmp	.+16     	; 0x8f0 <__fp_splitA+0x30>
 8e0:	16 16       	cp	r1, r22
 8e2:	17 06       	cpc	r1, r23
 8e4:	18 06       	cpc	r1, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	f1 cf       	rjmp	.-30     	; 0x8cc <__fp_splitA+0xc>
 8ea:	86 95       	lsr	r24
 8ec:	71 05       	cpc	r23, r1
 8ee:	61 05       	cpc	r22, r1
 8f0:	08 94       	sec
 8f2:	08 95       	ret

000008f4 <__fp_zero>:
 8f4:	e8 94       	clt

000008f6 <__fp_szero>:
 8f6:	bb 27       	eor	r27, r27
 8f8:	66 27       	eor	r22, r22
 8fa:	77 27       	eor	r23, r23
 8fc:	cb 01       	movw	r24, r22
 8fe:	97 f9       	bld	r25, 7
 900:	08 95       	ret

00000902 <__mulsf3>:
 902:	0e 94 94 04 	call	0x928	; 0x928 <__mulsf3x>
 906:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_round>
 90a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_pscA>
 90e:	38 f0       	brcs	.+14     	; 0x91e <__mulsf3+0x1c>
 910:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_pscB>
 914:	20 f0       	brcs	.+8      	; 0x91e <__mulsf3+0x1c>
 916:	95 23       	and	r25, r21
 918:	11 f0       	breq	.+4      	; 0x91e <__mulsf3+0x1c>
 91a:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_inf>
 91e:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_nan>
 922:	11 24       	eor	r1, r1
 924:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_szero>

00000928 <__mulsf3x>:
 928:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_split3>
 92c:	70 f3       	brcs	.-36     	; 0x90a <__mulsf3+0x8>

0000092e <__mulsf3_pse>:
 92e:	95 9f       	mul	r25, r21
 930:	c1 f3       	breq	.-16     	; 0x922 <__mulsf3+0x20>
 932:	95 0f       	add	r25, r21
 934:	50 e0       	ldi	r21, 0x00	; 0
 936:	55 1f       	adc	r21, r21
 938:	62 9f       	mul	r22, r18
 93a:	f0 01       	movw	r30, r0
 93c:	72 9f       	mul	r23, r18
 93e:	bb 27       	eor	r27, r27
 940:	f0 0d       	add	r31, r0
 942:	b1 1d       	adc	r27, r1
 944:	63 9f       	mul	r22, r19
 946:	aa 27       	eor	r26, r26
 948:	f0 0d       	add	r31, r0
 94a:	b1 1d       	adc	r27, r1
 94c:	aa 1f       	adc	r26, r26
 94e:	64 9f       	mul	r22, r20
 950:	66 27       	eor	r22, r22
 952:	b0 0d       	add	r27, r0
 954:	a1 1d       	adc	r26, r1
 956:	66 1f       	adc	r22, r22
 958:	82 9f       	mul	r24, r18
 95a:	22 27       	eor	r18, r18
 95c:	b0 0d       	add	r27, r0
 95e:	a1 1d       	adc	r26, r1
 960:	62 1f       	adc	r22, r18
 962:	73 9f       	mul	r23, r19
 964:	b0 0d       	add	r27, r0
 966:	a1 1d       	adc	r26, r1
 968:	62 1f       	adc	r22, r18
 96a:	83 9f       	mul	r24, r19
 96c:	a0 0d       	add	r26, r0
 96e:	61 1d       	adc	r22, r1
 970:	22 1f       	adc	r18, r18
 972:	74 9f       	mul	r23, r20
 974:	33 27       	eor	r19, r19
 976:	a0 0d       	add	r26, r0
 978:	61 1d       	adc	r22, r1
 97a:	23 1f       	adc	r18, r19
 97c:	84 9f       	mul	r24, r20
 97e:	60 0d       	add	r22, r0
 980:	21 1d       	adc	r18, r1
 982:	82 2f       	mov	r24, r18
 984:	76 2f       	mov	r23, r22
 986:	6a 2f       	mov	r22, r26
 988:	11 24       	eor	r1, r1
 98a:	9f 57       	subi	r25, 0x7F	; 127
 98c:	50 40       	sbci	r21, 0x00	; 0
 98e:	9a f0       	brmi	.+38     	; 0x9b6 <__mulsf3_pse+0x88>
 990:	f1 f0       	breq	.+60     	; 0x9ce <__mulsf3_pse+0xa0>
 992:	88 23       	and	r24, r24
 994:	4a f0       	brmi	.+18     	; 0x9a8 <__mulsf3_pse+0x7a>
 996:	ee 0f       	add	r30, r30
 998:	ff 1f       	adc	r31, r31
 99a:	bb 1f       	adc	r27, r27
 99c:	66 1f       	adc	r22, r22
 99e:	77 1f       	adc	r23, r23
 9a0:	88 1f       	adc	r24, r24
 9a2:	91 50       	subi	r25, 0x01	; 1
 9a4:	50 40       	sbci	r21, 0x00	; 0
 9a6:	a9 f7       	brne	.-22     	; 0x992 <__mulsf3_pse+0x64>
 9a8:	9e 3f       	cpi	r25, 0xFE	; 254
 9aa:	51 05       	cpc	r21, r1
 9ac:	80 f0       	brcs	.+32     	; 0x9ce <__mulsf3_pse+0xa0>
 9ae:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_inf>
 9b2:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_szero>
 9b6:	5f 3f       	cpi	r21, 0xFF	; 255
 9b8:	e4 f3       	brlt	.-8      	; 0x9b2 <__mulsf3_pse+0x84>
 9ba:	98 3e       	cpi	r25, 0xE8	; 232
 9bc:	d4 f3       	brlt	.-12     	; 0x9b2 <__mulsf3_pse+0x84>
 9be:	86 95       	lsr	r24
 9c0:	77 95       	ror	r23
 9c2:	67 95       	ror	r22
 9c4:	b7 95       	ror	r27
 9c6:	f7 95       	ror	r31
 9c8:	e7 95       	ror	r30
 9ca:	9f 5f       	subi	r25, 0xFF	; 255
 9cc:	c1 f7       	brne	.-16     	; 0x9be <__mulsf3_pse+0x90>
 9ce:	fe 2b       	or	r31, r30
 9d0:	88 0f       	add	r24, r24
 9d2:	91 1d       	adc	r25, r1
 9d4:	96 95       	lsr	r25
 9d6:	87 95       	ror	r24
 9d8:	97 f9       	bld	r25, 7
 9da:	08 95       	ret

000009dc <__fp_inf>:
 9dc:	97 f9       	bld	r25, 7
 9de:	9f 67       	ori	r25, 0x7F	; 127
 9e0:	80 e8       	ldi	r24, 0x80	; 128
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	60 e0       	ldi	r22, 0x00	; 0
 9e6:	08 95       	ret

000009e8 <__fp_nan>:
 9e8:	9f ef       	ldi	r25, 0xFF	; 255
 9ea:	80 ec       	ldi	r24, 0xC0	; 192
 9ec:	08 95       	ret

000009ee <__fp_pscA>:
 9ee:	00 24       	eor	r0, r0
 9f0:	0a 94       	dec	r0
 9f2:	16 16       	cp	r1, r22
 9f4:	17 06       	cpc	r1, r23
 9f6:	18 06       	cpc	r1, r24
 9f8:	09 06       	cpc	r0, r25
 9fa:	08 95       	ret

000009fc <__fp_pscB>:
 9fc:	00 24       	eor	r0, r0
 9fe:	0a 94       	dec	r0
 a00:	12 16       	cp	r1, r18
 a02:	13 06       	cpc	r1, r19
 a04:	14 06       	cpc	r1, r20
 a06:	05 06       	cpc	r0, r21
 a08:	08 95       	ret

00000a0a <__fp_round>:
 a0a:	09 2e       	mov	r0, r25
 a0c:	03 94       	inc	r0
 a0e:	00 0c       	add	r0, r0
 a10:	11 f4       	brne	.+4      	; 0xa16 <__fp_round+0xc>
 a12:	88 23       	and	r24, r24
 a14:	52 f0       	brmi	.+20     	; 0xa2a <__fp_round+0x20>
 a16:	bb 0f       	add	r27, r27
 a18:	40 f4       	brcc	.+16     	; 0xa2a <__fp_round+0x20>
 a1a:	bf 2b       	or	r27, r31
 a1c:	11 f4       	brne	.+4      	; 0xa22 <__fp_round+0x18>
 a1e:	60 ff       	sbrs	r22, 0
 a20:	04 c0       	rjmp	.+8      	; 0xa2a <__fp_round+0x20>
 a22:	6f 5f       	subi	r22, 0xFF	; 255
 a24:	7f 4f       	sbci	r23, 0xFF	; 255
 a26:	8f 4f       	sbci	r24, 0xFF	; 255
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	08 95       	ret

00000a2c <__itoa_ncheck>:
 a2c:	bb 27       	eor	r27, r27
 a2e:	4a 30       	cpi	r20, 0x0A	; 10
 a30:	31 f4       	brne	.+12     	; 0xa3e <__itoa_ncheck+0x12>
 a32:	99 23       	and	r25, r25
 a34:	22 f4       	brpl	.+8      	; 0xa3e <__itoa_ncheck+0x12>
 a36:	bd e2       	ldi	r27, 0x2D	; 45
 a38:	90 95       	com	r25
 a3a:	81 95       	neg	r24
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__utoa_common>

00000a42 <__utoa_ncheck>:
 a42:	bb 27       	eor	r27, r27

00000a44 <__utoa_common>:
 a44:	fb 01       	movw	r30, r22
 a46:	55 27       	eor	r21, r21
 a48:	aa 27       	eor	r26, r26
 a4a:	88 0f       	add	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	aa 1f       	adc	r26, r26
 a50:	a4 17       	cp	r26, r20
 a52:	10 f0       	brcs	.+4      	; 0xa58 <__utoa_common+0x14>
 a54:	a4 1b       	sub	r26, r20
 a56:	83 95       	inc	r24
 a58:	50 51       	subi	r21, 0x10	; 16
 a5a:	b9 f7       	brne	.-18     	; 0xa4a <__utoa_common+0x6>
 a5c:	a0 5d       	subi	r26, 0xD0	; 208
 a5e:	aa 33       	cpi	r26, 0x3A	; 58
 a60:	08 f0       	brcs	.+2      	; 0xa64 <__utoa_common+0x20>
 a62:	a9 5d       	subi	r26, 0xD9	; 217
 a64:	a1 93       	st	Z+, r26
 a66:	00 97       	sbiw	r24, 0x00	; 0
 a68:	79 f7       	brne	.-34     	; 0xa48 <__utoa_common+0x4>
 a6a:	b1 11       	cpse	r27, r1
 a6c:	b1 93       	st	Z+, r27
 a6e:	11 92       	st	Z+, r1
 a70:	cb 01       	movw	r24, r22
 a72:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <strrev>

00000a76 <strrev>:
 a76:	dc 01       	movw	r26, r24
 a78:	fc 01       	movw	r30, r24
 a7a:	67 2f       	mov	r22, r23
 a7c:	71 91       	ld	r23, Z+
 a7e:	77 23       	and	r23, r23
 a80:	e1 f7       	brne	.-8      	; 0xa7a <strrev+0x4>
 a82:	32 97       	sbiw	r30, 0x02	; 2
 a84:	04 c0       	rjmp	.+8      	; 0xa8e <strrev+0x18>
 a86:	7c 91       	ld	r23, X
 a88:	6d 93       	st	X+, r22
 a8a:	70 83       	st	Z, r23
 a8c:	62 91       	ld	r22, -Z
 a8e:	ae 17       	cp	r26, r30
 a90:	bf 07       	cpc	r27, r31
 a92:	c8 f3       	brcs	.-14     	; 0xa86 <strrev+0x10>
 a94:	08 95       	ret

00000a96 <_exit>:
 a96:	f8 94       	cli

00000a98 <__stop_program>:
 a98:	ff cf       	rjmp	.-2      	; 0xa98 <__stop_program>
