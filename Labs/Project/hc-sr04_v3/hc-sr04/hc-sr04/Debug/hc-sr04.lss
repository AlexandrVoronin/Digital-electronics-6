
hc-sr04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000a5c  00000af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  0080011e  0080011e  00000b0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c08  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc4  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d02  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  000041b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075c  00000000  00000000  00004520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca1  00000000  00000000  00004c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000591d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_18>
  4c:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3b       	cpi	r26, 0xB0	; 176
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  9e:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */				// toggle choosen bit

void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 23       	and	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
  e0:	fc 01       	movw	r30, r24
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_read>:
/*--------------------------------------------------------------------*/
/* GPIO_read */			//read the value of chosen bit and return value due the condition

uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if(bit_is_set(*reg_name, pin_num))
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <GPIO_read+0xc>
 11a:	95 95       	asr	r25
 11c:	87 95       	ror	r24
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <GPIO_read+0x8>
	}
	else
	{
		return 0;
	}
}
 122:	81 70       	andi	r24, 0x01	; 1
 124:	08 95       	ret

00000126 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 126:	29 9a       	sbi	0x05, 1	; 5
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <toggle_e+0x4>
 12e:	00 00       	nop
 130:	29 98       	cbi	0x05, 1	; 5
 132:	08 95       	ret

00000134 <lcd_write>:
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
 138:	66 23       	and	r22, r22
 13a:	11 f0       	breq	.+4      	; 0x140 <lcd_write+0xc>
 13c:	28 9a       	sbi	0x05, 0	; 5
 13e:	01 c0       	rjmp	.+2      	; 0x142 <lcd_write+0xe>
 140:	28 98       	cbi	0x05, 0	; 5
 142:	54 9a       	sbi	0x0a, 4	; 10
 144:	55 9a       	sbi	0x0a, 5	; 10
 146:	56 9a       	sbi	0x0a, 6	; 10
 148:	57 9a       	sbi	0x0a, 7	; 10
 14a:	5f 98       	cbi	0x0b, 7	; 11
 14c:	5e 98       	cbi	0x0b, 6	; 11
 14e:	5d 98       	cbi	0x0b, 5	; 11
 150:	5c 98       	cbi	0x0b, 4	; 11
 152:	cc 23       	and	r28, r28
 154:	0c f4       	brge	.+2      	; 0x158 <lcd_write+0x24>
 156:	5f 9a       	sbi	0x0b, 7	; 11
 158:	c6 fd       	sbrc	r28, 6
 15a:	5e 9a       	sbi	0x0b, 6	; 11
 15c:	c5 fd       	sbrc	r28, 5
 15e:	5d 9a       	sbi	0x0b, 5	; 11
 160:	c4 fd       	sbrc	r28, 4
 162:	5c 9a       	sbi	0x0b, 4	; 11
 164:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 168:	5f 98       	cbi	0x0b, 7	; 11
 16a:	5e 98       	cbi	0x0b, 6	; 11
 16c:	5d 98       	cbi	0x0b, 5	; 11
 16e:	5c 98       	cbi	0x0b, 4	; 11
 170:	c3 fd       	sbrc	r28, 3
 172:	5f 9a       	sbi	0x0b, 7	; 11
 174:	c2 fd       	sbrc	r28, 2
 176:	5e 9a       	sbi	0x0b, 6	; 11
 178:	c1 fd       	sbrc	r28, 1
 17a:	5d 9a       	sbi	0x0b, 5	; 11
 17c:	c0 fd       	sbrc	r28, 0
 17e:	5c 9a       	sbi	0x0b, 4	; 11
 180:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 184:	5c 9a       	sbi	0x0b, 4	; 11
 186:	5d 9a       	sbi	0x0b, 5	; 11
 188:	5e 9a       	sbi	0x0b, 6	; 11
 18a:	5f 9a       	sbi	0x0b, 7	; 11
 18c:	87 eb       	ldi	r24, 0xB7	; 183
 18e:	9b e0       	ldi	r25, 0x0B	; 11
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_write+0x5c>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_write+0x62>
 196:	00 00       	nop
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <lcd_command>:
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write>
 1a2:	08 95       	ret

000001a4 <lcd_gotoxy>:
 1a4:	61 11       	cpse	r22, r1
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <lcd_gotoxy+0xc>
 1a8:	80 58       	subi	r24, 0x80	; 128
 1aa:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
 1ae:	08 95       	ret
 1b0:	80 54       	subi	r24, 0x40	; 64
 1b2:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
 1b6:	08 95       	ret

000001b8 <lcd_clrscr>:
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
 1be:	08 95       	ret

000001c0 <lcd_putc>:
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write>
 1c6:	08 95       	ret

000001c8 <lcd_puts>:
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	88 23       	and	r24, r24
 1d6:	29 f0       	breq	.+10     	; 0x1e2 <lcd_puts+0x1a>
 1d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_putc>
 1dc:	89 91       	ld	r24, Y+
 1de:	81 11       	cpse	r24, r1
 1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <lcd_puts+0x10>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e8:	cf 93       	push	r28
 1ea:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1ec:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f0:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1f2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1f4:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1f6:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1f8:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	99 ef       	ldi	r25, 0xF9	; 249
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x16>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init+0x1c>
 204:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 206:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 208:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 20a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_init+0x2a>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_init+0x30>
 218:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 21a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x3a>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x40>
 228:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 22a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x50>
 238:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 23a:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 23c:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <lcd_init+0x5c>
 248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_init+0x62>
 24a:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 252:	88 e0       	ldi	r24, 0x08	; 8
 254:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 258:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 262:	8c 2f       	mov	r24, r28
 264:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <main>:



int main(void)
{	
	lcd_init(LCD_DISP_ON);
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_init>
	lcd_gotoxy(1,0);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
	lcd_puts("Front: ");
 27a:	8a e0       	ldi	r24, 0x0A	; 10
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	lcd_gotoxy(1,1);
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
	lcd_puts("Back: ");
 28a:	82 e1       	ldi	r24, 0x12	; 18
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	
	
	GPIO_config_output(&DDRB,TRIGGERREAR);
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	84 e2       	ldi	r24, 0x24	; 36
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB,TRIGGERREAR);
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	85 e2       	ldi	r24, 0x25	; 37
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_input_nopull(&DDRB,ECHOREAR);
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	84 e2       	ldi	r24, 0x24	; 36
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	GPIO_config_output(&DDRB,TRIGGERREAR);
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	84 e2       	ldi	r24, 0x24	; 36
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB,TRIGGERREAR);
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	85 e2       	ldi	r24, 0x25	; 37
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_input_nopull(&DDRB,ECHOREAR);
 2c4:	63 e0       	ldi	r22, 0x03	; 3
 2c6:	84 e2       	ldi	r24, 0x24	; 36
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	

	
	GPIO_config_output(&DDRC,LED1);
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	87 e2       	ldi	r24, 0x27	; 39
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED1);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	88 e2       	ldi	r24, 0x28	; 40
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRC,LED2);
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	87 e2       	ldi	r24, 0x27	; 39
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED2);
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	88 e2       	ldi	r24, 0x28	; 40
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRC,LED3);
 2f6:	63 e0       	ldi	r22, 0x03	; 3
 2f8:	87 e2       	ldi	r24, 0x27	; 39
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED3);
 300:	63 e0       	ldi	r22, 0x03	; 3
 302:	88 e2       	ldi	r24, 0x28	; 40
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRC,LED4);
 30a:	64 e0       	ldi	r22, 0x04	; 4
 30c:	87 e2       	ldi	r24, 0x27	; 39
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED4);
 314:	64 e0       	ldi	r22, 0x04	; 4
 316:	88 e2       	ldi	r24, 0x28	; 40
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	
	GPIO_config_output(&DDRC,SPEAKER);
 31e:	65 e0       	ldi	r22, 0x05	; 5
 320:	87 e2       	ldi	r24, 0x27	; 39
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	
	
	
	
	
	TIM0_overflow_16u();
 328:	85 b5       	in	r24, 0x25	; 37
 32a:	89 7f       	andi	r24, 0xF9	; 249
 32c:	85 bd       	out	0x25, r24	; 37
 32e:	85 b5       	in	r24, 0x25	; 37
 330:	81 60       	ori	r24, 0x01	; 1
 332:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 334:	ee e6       	ldi	r30, 0x6E	; 110
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	80 83       	st	Z, r24
	
	TIM1_overflow_262ms();
 33e:	e1 e8       	ldi	r30, 0x81	; 129
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	8b 7f       	andi	r24, 0xFB	; 251
 346:	80 83       	st	Z, r24
 348:	80 81       	ld	r24, Z
 34a:	83 60       	ori	r24, 0x03	; 3
 34c:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 34e:	ef e6       	ldi	r30, 0x6F	; 111
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	81 60       	ori	r24, 0x01	; 1
 356:	80 83       	st	Z, r24

	TIM2_overflow_16ms();
 358:	e1 eb       	ldi	r30, 0xB1	; 177
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	87 60       	ori	r24, 0x07	; 7
 360:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 362:	e0 e7       	ldi	r30, 0x70	; 112
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	80 83       	st	Z, r24
	
	//uart_init(UART_BAUD_SELECT(115200,F_CPU));
	
	//enable global interrupt
	sei();
 36c:	78 94       	sei
 36e:	ff cf       	rjmp	.-2      	; 0x36e <main+0x102>

00000370 <isbigger>:
/*
*
*/
uint16_t isbigger (uint16_t distancerear, uint16_t distanceback)
{
	if (distancerear<=distanceback)
 370:	68 17       	cp	r22, r24
 372:	79 07       	cpc	r23, r25
 374:	28 f0       	brcs	.+10     	; 0x380 <isbigger+0x10>
	{
		smallerdist=distancerear;
 376:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <smallerdist+0x1>
 37a:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <smallerdist>
 37e:	04 c0       	rjmp	.+8      	; 0x388 <isbigger+0x18>
	}
	else
	{
		smallerdist=distanceback;
 380:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <smallerdist+0x1>
 384:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <smallerdist>
	}
	
	return smallerdist;
}
 388:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <smallerdist>
 38c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <smallerdist+0x1>
 390:	08 95       	ret

00000392 <__vector_16>:


ISR(TIMER0_OVF_vect)
{	
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
		STATE_ECHOCOUNT,
	} state_t;
	
	static state_t state= STATE_PULSE;
	
	number_of_overflows++;
 3b4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <number_of_overflows.1996>
 3b8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <number_of_overflows.1996+0x1>
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <number_of_overflows.1996+0x1>
 3c2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <number_of_overflows.1996>
	switch(state)
 3c6:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <state.2004>
 3ca:	21 30       	cpi	r18, 0x01	; 1
 3cc:	f1 f0       	breq	.+60     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ce:	20 f0       	brcs	.+8      	; 0x3d8 <__vector_16+0x46>
 3d0:	22 30       	cpi	r18, 0x02	; 2
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <__vector_16+0x44>
 3d4:	51 c0       	rjmp	.+162    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 3d6:	b2 c0       	rjmp	.+356    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
	{
		case STATE_PULSE:
				if (number_of_overflows<=1)
 3d8:	02 97       	sbiw	r24, 0x02	; 2
 3da:	08 f0       	brcs	.+2      	; 0x3de <__vector_16+0x4c>
 3dc:	b1 c0       	rjmp	.+354    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
				{
					GPIO_write_high(&PORTB,TRIGGERREAR);
 3de:	62 e0       	ldi	r22, 0x02	; 2
 3e0:	85 e2       	ldi	r24, 0x25	; 37
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
					GPIO_write_high(&PORTB,TRIGGERBACK);
 3e8:	64 e0       	ldi	r22, 0x04	; 4
 3ea:	85 e2       	ldi	r24, 0x25	; 37
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
					state=STATE_ECHODETECT;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state.2004>
					lenghtrear=0;
 3f8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <lenghtrear.1997+0x1>
 3fc:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <lenghtrear.1997>
					lenghtback=0;
 400:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__data_end+0x1>
 404:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
 408:	9b c0       	rjmp	.+310    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
				} 

				break;	
				
		case STATE_ECHODETECT:
				GPIO_write_low(&PORTB,TRIGGERREAR);
 40a:	62 e0       	ldi	r22, 0x02	; 2
 40c:	85 e2       	ldi	r24, 0x25	; 37
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
				GPIO_write_low(&PORTB,TRIGGERBACK);
 414:	64 e0       	ldi	r22, 0x04	; 4
 416:	85 e2       	ldi	r24, 0x25	; 37
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
				if (number_of_overflows<=4062)
 41e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <number_of_overflows.1996>
 422:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <number_of_overflows.1996+0x1>
 426:	8f 3d       	cpi	r24, 0xDF	; 223
 428:	9f 40       	sbci	r25, 0x0F	; 15
 42a:	10 f5       	brcc	.+68     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				{
					if (GPIO_read(&PINB,ECHOREAR))
 42c:	63 e0       	ldi	r22, 0x03	; 3
 42e:	83 e2       	ldi	r24, 0x23	; 35
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_read>
 436:	88 23       	and	r24, r24
 438:	49 f0       	breq	.+18     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
					{
						lenghtrear++;
 43a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <lenghtrear.1997>
 43e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <lenghtrear.1997+0x1>
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <lenghtrear.1997+0x1>
 448:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <lenghtrear.1997>
					}
					if (GPIO_read(&PINB,ECHOBACK))
 44c:	65 e0       	ldi	r22, 0x05	; 5
 44e:	83 e2       	ldi	r24, 0x23	; 35
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_read>
 456:	88 23       	and	r24, r24
 458:	09 f4       	brne	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	72 c0       	rjmp	.+228    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
					{
						lenghtback++;
 45c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 460:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 46a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 46e:	68 c0       	rjmp	.+208    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
					}
					
				} 
				else
				{
					state=STATE_ECHOCOUNT;
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state.2004>
 476:	64 c0       	rjmp	.+200    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
					
				}
				break;
		case STATE_ECHOCOUNT:
		
				if (lenghtrear<8)
 478:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <lenghtrear.1997>
 47c:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <lenghtrear.1997+0x1>
 480:	68 30       	cpi	r22, 0x08	; 8
 482:	71 05       	cpc	r23, r1
 484:	e8 f0       	brcs	.+58     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
				{
					
				}
				else
				{
					distancerear=lenghtrear*16*0.017;
 486:	62 95       	swap	r22
 488:	72 95       	swap	r23
 48a:	70 7f       	andi	r23, 0xF0	; 240
 48c:	76 27       	eor	r23, r22
 48e:	60 7f       	andi	r22, 0xF0	; 240
 490:	76 27       	eor	r23, r22
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__floatunsisf>
 49a:	26 e9       	ldi	r18, 0x96	; 150
 49c:	33 e4       	ldi	r19, 0x43	; 67
 49e:	4b e8       	ldi	r20, 0x8B	; 139
 4a0:	5c e3       	ldi	r21, 0x3C	; 60
 4a2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__mulsf3>
 4a6:	0e 94 cd 03 	call	0x79a	; 0x79a <__fixunssfsi>
 4aa:	dc 01       	movw	r26, r24
 4ac:	cb 01       	movw	r24, r22
 4ae:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <distancerear+0x1>
 4b2:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <distancerear>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4b6:	4a e0       	ldi	r20, 0x0A	; 10
 4b8:	65 e0       	ldi	r22, 0x05	; 5
 4ba:	71 e0       	ldi	r23, 0x01	; 1
 4bc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__itoa_ncheck>
					itoa(distancerear,lcd_stringrear,10);

				}
				
				if (lenghtback<8)  // smaller than 2cm
 4c0:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end>
 4c4:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x1>
 4c8:	68 30       	cpi	r22, 0x08	; 8
 4ca:	71 05       	cpc	r23, r1
 4cc:	e8 f0       	brcs	.+58     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
				{
				
				}
				else
				{
					distanceback=lenghtback*16*0.017;
 4ce:	62 95       	swap	r22
 4d0:	72 95       	swap	r23
 4d2:	70 7f       	andi	r23, 0xF0	; 240
 4d4:	76 27       	eor	r23, r22
 4d6:	60 7f       	andi	r22, 0xF0	; 240
 4d8:	76 27       	eor	r23, r22
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__floatunsisf>
 4e2:	26 e9       	ldi	r18, 0x96	; 150
 4e4:	33 e4       	ldi	r19, 0x43	; 67
 4e6:	4b e8       	ldi	r20, 0x8B	; 139
 4e8:	5c e3       	ldi	r21, 0x3C	; 60
 4ea:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__mulsf3>
 4ee:	0e 94 cd 03 	call	0x79a	; 0x79a <__fixunssfsi>
 4f2:	dc 01       	movw	r26, r24
 4f4:	cb 01       	movw	r24, r22
 4f6:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <distanceback+0x1>
 4fa:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <distanceback>
 4fe:	4a e0       	ldi	r20, 0x0A	; 10
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	71 e0       	ldi	r23, 0x01	; 1
 504:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__itoa_ncheck>
					itoa(distanceback,lcd_stringback,10);
				}
				

				smallerdist=isbigger(lenghtrear,lenghtback);
 508:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end>
 50c:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x1>
 510:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <lenghtrear.1997>
 514:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <lenghtrear.1997+0x1>
 518:	0e 94 b8 01 	call	0x370	; 0x370 <isbigger>
 51c:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <smallerdist+0x1>
 520:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <smallerdist>
			
				lenghtrear=0;
 524:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <lenghtrear.1997+0x1>
 528:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <lenghtrear.1997>
				lenghtback=0;
 52c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__data_end+0x1>
 530:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
				number_of_overflows=0;
 534:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <number_of_overflows.1996+0x1>
 538:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <number_of_overflows.1996>
				state=STATE_PULSE;

				
		default:
				state=STATE_PULSE;
 53c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <state.2004>
				
		}
	
	
	
}
 540:	ff 91       	pop	r31
 542:	ef 91       	pop	r30
 544:	bf 91       	pop	r27
 546:	af 91       	pop	r26
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	7f 91       	pop	r23
 54e:	6f 91       	pop	r22
 550:	5f 91       	pop	r21
 552:	4f 91       	pop	r20
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
		//uart_puts(lcd_stringback);
		//uart_puts("\n");
		//uart_puts(lcd_stringrear);
		//uart_puts(" ");
	
			lcd_gotoxy(8,0);
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	88 e0       	ldi	r24, 0x08	; 8
 588:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
			lcd_puts("    ");
 58c:	89 e1       	ldi	r24, 0x19	; 25
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
			lcd_gotoxy(8,0);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	88 e0       	ldi	r24, 0x08	; 8
 598:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
			lcd_puts(lcd_stringrear);
 59c:	85 e0       	ldi	r24, 0x05	; 5
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
			lcd_gotoxy(8,1);
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	88 e0       	ldi	r24, 0x08	; 8
 5a8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
			lcd_puts("    ");
 5ac:	89 e1       	ldi	r24, 0x19	; 25
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
			lcd_gotoxy(8,1);
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	88 e0       	ldi	r24, 0x08	; 8
 5b8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
			lcd_puts(lcd_stringback);
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		
		
		
			
	// Turn on LEDS
	if(smallerdist <= 10)
 5c4:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <smallerdist>
 5c8:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <smallerdist+0x1>
 5cc:	8b 30       	cpi	r24, 0x0B	; 11
 5ce:	91 05       	cpc	r25, r1
 5d0:	a8 f4       	brcc	.+42     	; 0x5fc <__vector_13+0x9a>
	{
		GPIO_write_high(&PORTC, LED1);
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	88 e2       	ldi	r24, 0x28	; 40
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED2);
 5dc:	62 e0       	ldi	r22, 0x02	; 2
 5de:	88 e2       	ldi	r24, 0x28	; 40
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED3);
 5e6:	63 e0       	ldi	r22, 0x03	; 3
 5e8:	88 e2       	ldi	r24, 0x28	; 40
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED4);
 5f0:	64 e0       	ldi	r22, 0x04	; 4
 5f2:	88 e2       	ldi	r24, 0x28	; 40
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 5fa:	5c c0       	rjmp	.+184    	; 0x6b4 <__vector_13+0x152>
	}
	else if(smallerdist<= 50)
 5fc:	83 33       	cpi	r24, 0x33	; 51
 5fe:	91 05       	cpc	r25, r1
 600:	a8 f4       	brcc	.+42     	; 0x62c <__vector_13+0xca>
	{
		GPIO_write_high(&PORTC, LED1);
 602:	61 e0       	ldi	r22, 0x01	; 1
 604:	88 e2       	ldi	r24, 0x28	; 40
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED2);
 60c:	62 e0       	ldi	r22, 0x02	; 2
 60e:	88 e2       	ldi	r24, 0x28	; 40
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED3);
 616:	63 e0       	ldi	r22, 0x03	; 3
 618:	88 e2       	ldi	r24, 0x28	; 40
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, LED4);
 620:	64 e0       	ldi	r22, 0x04	; 4
 622:	88 e2       	ldi	r24, 0x28	; 40
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 62a:	44 c0       	rjmp	.+136    	; 0x6b4 <__vector_13+0x152>
	}
	else if(smallerdist <= 100)
 62c:	85 36       	cpi	r24, 0x65	; 101
 62e:	91 05       	cpc	r25, r1
 630:	a8 f4       	brcc	.+42     	; 0x65c <__vector_13+0xfa>
	{
		GPIO_write_high(&PORTC, LED1);
 632:	61 e0       	ldi	r22, 0x01	; 1
 634:	88 e2       	ldi	r24, 0x28	; 40
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED2);
 63c:	62 e0       	ldi	r22, 0x02	; 2
 63e:	88 e2       	ldi	r24, 0x28	; 40
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, LED3);
 646:	63 e0       	ldi	r22, 0x03	; 3
 648:	88 e2       	ldi	r24, 0x28	; 40
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED4);
 650:	64 e0       	ldi	r22, 0x04	; 4
 652:	88 e2       	ldi	r24, 0x28	; 40
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 65a:	2c c0       	rjmp	.+88     	; 0x6b4 <__vector_13+0x152>
	}
	else if(smallerdist <= 200)
 65c:	89 3c       	cpi	r24, 0xC9	; 201
 65e:	91 05       	cpc	r25, r1
 660:	a8 f4       	brcc	.+42     	; 0x68c <__vector_13+0x12a>
	{
		GPIO_write_high(&PORTC, LED1);
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	88 e2       	ldi	r24, 0x28	; 40
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, LED2);
 66c:	62 e0       	ldi	r22, 0x02	; 2
 66e:	88 e2       	ldi	r24, 0x28	; 40
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED3);
 676:	63 e0       	ldi	r22, 0x03	; 3
 678:	88 e2       	ldi	r24, 0x28	; 40
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED4);
 680:	64 e0       	ldi	r22, 0x04	; 4
 682:	88 e2       	ldi	r24, 0x28	; 40
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 68a:	14 c0       	rjmp	.+40     	; 0x6b4 <__vector_13+0x152>
	}
	else
	{
		GPIO_write_low(&PORTC, LED1);
 68c:	61 e0       	ldi	r22, 0x01	; 1
 68e:	88 e2       	ldi	r24, 0x28	; 40
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED2);
 696:	62 e0       	ldi	r22, 0x02	; 2
 698:	88 e2       	ldi	r24, 0x28	; 40
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED3);
 6a0:	63 e0       	ldi	r22, 0x03	; 3
 6a2:	88 e2       	ldi	r24, 0x28	; 40
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED4);
 6aa:	64 e0       	ldi	r22, 0x04	; 4
 6ac:	88 e2       	ldi	r24, 0x28	; 40
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	else if(smallerdist<100)
	{
		
	}
	*/
}
 6b4:	ff 91       	pop	r31
 6b6:	ef 91       	pop	r30
 6b8:	bf 91       	pop	r27
 6ba:	af 91       	pop	r26
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	7f 91       	pop	r23
 6c2:	6f 91       	pop	r22
 6c4:	5f 91       	pop	r21
 6c6:	4f 91       	pop	r20
 6c8:	3f 91       	pop	r19
 6ca:	2f 91       	pop	r18
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <__vector_9>:



ISR(TIMER2_OVF_vect)
{
 6d6:	1f 92       	push	r1
 6d8:	0f 92       	push	r0
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	0f 92       	push	r0
 6de:	11 24       	eor	r1, r1
	


}
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 6ea:	1f 92       	push	r1
 6ec:	0f 92       	push	r0
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	0f 92       	push	r0
 6f2:	11 24       	eor	r1, r1
 6f4:	2f 93       	push	r18
 6f6:	8f 93       	push	r24
 6f8:	9f 93       	push	r25
 6fa:	ef 93       	push	r30
 6fc:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 6fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 702:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 706:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 708:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <UART_RxHead>
 70c:	ef 5f       	subi	r30, 0xFF	; 255
 70e:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 710:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <UART_RxTail>
 714:	e9 17       	cp	r30, r25
 716:	39 f0       	breq	.+14     	; 0x726 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 718:	e0 93 27 01 	sts	0x0127, r30	; 0x800127 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	e6 5d       	subi	r30, 0xD6	; 214
 720:	fe 4f       	sbci	r31, 0xFE	; 254
 722:	20 83       	st	Z, r18
 724:	01 c0       	rjmp	.+2      	; 0x728 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 726:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 728:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_LastRxError>
 72c:	89 2b       	or	r24, r25
 72e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <UART_LastRxError>
}
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	9f 91       	pop	r25
 738:	8f 91       	pop	r24
 73a:	2f 91       	pop	r18
 73c:	0f 90       	pop	r0
 73e:	0f be       	out	0x3f, r0	; 63
 740:	0f 90       	pop	r0
 742:	1f 90       	pop	r1
 744:	18 95       	reti

00000746 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 746:	1f 92       	push	r1
 748:	0f 92       	push	r0
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	0f 92       	push	r0
 74e:	11 24       	eor	r1, r1
 750:	8f 93       	push	r24
 752:	9f 93       	push	r25
 754:	ef 93       	push	r30
 756:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 758:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <UART_TxHead>
 75c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <UART_TxTail>
 760:	98 17       	cp	r25, r24
 762:	69 f0       	breq	.+26     	; 0x77e <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 764:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <UART_TxTail>
 768:	ef 5f       	subi	r30, 0xFF	; 255
 76a:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 76c:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	e6 59       	subi	r30, 0x96	; 150
 774:	fe 4f       	sbci	r31, 0xFE	; 254
 776:	80 81       	ld	r24, Z
 778:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 77c:	05 c0       	rjmp	.+10     	; 0x788 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 77e:	e1 ec       	ldi	r30, 0xC1	; 193
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	8f 7d       	andi	r24, 0xDF	; 223
 786:	80 83       	st	Z, r24
    }
}
 788:	ff 91       	pop	r31
 78a:	ef 91       	pop	r30
 78c:	9f 91       	pop	r25
 78e:	8f 91       	pop	r24
 790:	0f 90       	pop	r0
 792:	0f be       	out	0x3f, r0	; 63
 794:	0f 90       	pop	r0
 796:	1f 90       	pop	r1
 798:	18 95       	reti

0000079a <__fixunssfsi>:
 79a:	0e 94 41 04 	call	0x882	; 0x882 <__fp_splitA>
 79e:	88 f0       	brcs	.+34     	; 0x7c2 <__fixunssfsi+0x28>
 7a0:	9f 57       	subi	r25, 0x7F	; 127
 7a2:	98 f0       	brcs	.+38     	; 0x7ca <__fixunssfsi+0x30>
 7a4:	b9 2f       	mov	r27, r25
 7a6:	99 27       	eor	r25, r25
 7a8:	b7 51       	subi	r27, 0x17	; 23
 7aa:	b0 f0       	brcs	.+44     	; 0x7d8 <__fixunssfsi+0x3e>
 7ac:	e1 f0       	breq	.+56     	; 0x7e6 <__fixunssfsi+0x4c>
 7ae:	66 0f       	add	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	88 1f       	adc	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	1a f0       	brmi	.+6      	; 0x7be <__fixunssfsi+0x24>
 7b8:	ba 95       	dec	r27
 7ba:	c9 f7       	brne	.-14     	; 0x7ae <__fixunssfsi+0x14>
 7bc:	14 c0       	rjmp	.+40     	; 0x7e6 <__fixunssfsi+0x4c>
 7be:	b1 30       	cpi	r27, 0x01	; 1
 7c0:	91 f0       	breq	.+36     	; 0x7e6 <__fixunssfsi+0x4c>
 7c2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fp_zero>
 7c6:	b1 e0       	ldi	r27, 0x01	; 1
 7c8:	08 95       	ret
 7ca:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_zero>
 7ce:	67 2f       	mov	r22, r23
 7d0:	78 2f       	mov	r23, r24
 7d2:	88 27       	eor	r24, r24
 7d4:	b8 5f       	subi	r27, 0xF8	; 248
 7d6:	39 f0       	breq	.+14     	; 0x7e6 <__fixunssfsi+0x4c>
 7d8:	b9 3f       	cpi	r27, 0xF9	; 249
 7da:	cc f3       	brlt	.-14     	; 0x7ce <__fixunssfsi+0x34>
 7dc:	86 95       	lsr	r24
 7de:	77 95       	ror	r23
 7e0:	67 95       	ror	r22
 7e2:	b3 95       	inc	r27
 7e4:	d9 f7       	brne	.-10     	; 0x7dc <__fixunssfsi+0x42>
 7e6:	3e f4       	brtc	.+14     	; 0x7f6 <__fixunssfsi+0x5c>
 7e8:	90 95       	com	r25
 7ea:	80 95       	com	r24
 7ec:	70 95       	com	r23
 7ee:	61 95       	neg	r22
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	08 95       	ret

000007f8 <__floatunsisf>:
 7f8:	e8 94       	clt
 7fa:	09 c0       	rjmp	.+18     	; 0x80e <__floatsisf+0x12>

000007fc <__floatsisf>:
 7fc:	97 fb       	bst	r25, 7
 7fe:	3e f4       	brtc	.+14     	; 0x80e <__floatsisf+0x12>
 800:	90 95       	com	r25
 802:	80 95       	com	r24
 804:	70 95       	com	r23
 806:	61 95       	neg	r22
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	8f 4f       	sbci	r24, 0xFF	; 255
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	99 23       	and	r25, r25
 810:	a9 f0       	breq	.+42     	; 0x83c <__floatsisf+0x40>
 812:	f9 2f       	mov	r31, r25
 814:	96 e9       	ldi	r25, 0x96	; 150
 816:	bb 27       	eor	r27, r27
 818:	93 95       	inc	r25
 81a:	f6 95       	lsr	r31
 81c:	87 95       	ror	r24
 81e:	77 95       	ror	r23
 820:	67 95       	ror	r22
 822:	b7 95       	ror	r27
 824:	f1 11       	cpse	r31, r1
 826:	f8 cf       	rjmp	.-16     	; 0x818 <__floatsisf+0x1c>
 828:	fa f4       	brpl	.+62     	; 0x868 <__floatsisf+0x6c>
 82a:	bb 0f       	add	r27, r27
 82c:	11 f4       	brne	.+4      	; 0x832 <__floatsisf+0x36>
 82e:	60 ff       	sbrs	r22, 0
 830:	1b c0       	rjmp	.+54     	; 0x868 <__floatsisf+0x6c>
 832:	6f 5f       	subi	r22, 0xFF	; 255
 834:	7f 4f       	sbci	r23, 0xFF	; 255
 836:	8f 4f       	sbci	r24, 0xFF	; 255
 838:	9f 4f       	sbci	r25, 0xFF	; 255
 83a:	16 c0       	rjmp	.+44     	; 0x868 <__floatsisf+0x6c>
 83c:	88 23       	and	r24, r24
 83e:	11 f0       	breq	.+4      	; 0x844 <__floatsisf+0x48>
 840:	96 e9       	ldi	r25, 0x96	; 150
 842:	11 c0       	rjmp	.+34     	; 0x866 <__floatsisf+0x6a>
 844:	77 23       	and	r23, r23
 846:	21 f0       	breq	.+8      	; 0x850 <__floatsisf+0x54>
 848:	9e e8       	ldi	r25, 0x8E	; 142
 84a:	87 2f       	mov	r24, r23
 84c:	76 2f       	mov	r23, r22
 84e:	05 c0       	rjmp	.+10     	; 0x85a <__floatsisf+0x5e>
 850:	66 23       	and	r22, r22
 852:	71 f0       	breq	.+28     	; 0x870 <__floatsisf+0x74>
 854:	96 e8       	ldi	r25, 0x86	; 134
 856:	86 2f       	mov	r24, r22
 858:	70 e0       	ldi	r23, 0x00	; 0
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	2a f0       	brmi	.+10     	; 0x868 <__floatsisf+0x6c>
 85e:	9a 95       	dec	r25
 860:	66 0f       	add	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	88 1f       	adc	r24, r24
 866:	da f7       	brpl	.-10     	; 0x85e <__floatsisf+0x62>
 868:	88 0f       	add	r24, r24
 86a:	96 95       	lsr	r25
 86c:	87 95       	ror	r24
 86e:	97 f9       	bld	r25, 7
 870:	08 95       	ret

00000872 <__fp_split3>:
 872:	57 fd       	sbrc	r21, 7
 874:	90 58       	subi	r25, 0x80	; 128
 876:	44 0f       	add	r20, r20
 878:	55 1f       	adc	r21, r21
 87a:	59 f0       	breq	.+22     	; 0x892 <__fp_splitA+0x10>
 87c:	5f 3f       	cpi	r21, 0xFF	; 255
 87e:	71 f0       	breq	.+28     	; 0x89c <__fp_splitA+0x1a>
 880:	47 95       	ror	r20

00000882 <__fp_splitA>:
 882:	88 0f       	add	r24, r24
 884:	97 fb       	bst	r25, 7
 886:	99 1f       	adc	r25, r25
 888:	61 f0       	breq	.+24     	; 0x8a2 <__fp_splitA+0x20>
 88a:	9f 3f       	cpi	r25, 0xFF	; 255
 88c:	79 f0       	breq	.+30     	; 0x8ac <__fp_splitA+0x2a>
 88e:	87 95       	ror	r24
 890:	08 95       	ret
 892:	12 16       	cp	r1, r18
 894:	13 06       	cpc	r1, r19
 896:	14 06       	cpc	r1, r20
 898:	55 1f       	adc	r21, r21
 89a:	f2 cf       	rjmp	.-28     	; 0x880 <__fp_split3+0xe>
 89c:	46 95       	lsr	r20
 89e:	f1 df       	rcall	.-30     	; 0x882 <__fp_splitA>
 8a0:	08 c0       	rjmp	.+16     	; 0x8b2 <__fp_splitA+0x30>
 8a2:	16 16       	cp	r1, r22
 8a4:	17 06       	cpc	r1, r23
 8a6:	18 06       	cpc	r1, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	f1 cf       	rjmp	.-30     	; 0x88e <__fp_splitA+0xc>
 8ac:	86 95       	lsr	r24
 8ae:	71 05       	cpc	r23, r1
 8b0:	61 05       	cpc	r22, r1
 8b2:	08 94       	sec
 8b4:	08 95       	ret

000008b6 <__fp_zero>:
 8b6:	e8 94       	clt

000008b8 <__fp_szero>:
 8b8:	bb 27       	eor	r27, r27
 8ba:	66 27       	eor	r22, r22
 8bc:	77 27       	eor	r23, r23
 8be:	cb 01       	movw	r24, r22
 8c0:	97 f9       	bld	r25, 7
 8c2:	08 95       	ret

000008c4 <__mulsf3>:
 8c4:	0e 94 75 04 	call	0x8ea	; 0x8ea <__mulsf3x>
 8c8:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_round>
 8cc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__fp_pscA>
 8d0:	38 f0       	brcs	.+14     	; 0x8e0 <__mulsf3+0x1c>
 8d2:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_pscB>
 8d6:	20 f0       	brcs	.+8      	; 0x8e0 <__mulsf3+0x1c>
 8d8:	95 23       	and	r25, r21
 8da:	11 f0       	breq	.+4      	; 0x8e0 <__mulsf3+0x1c>
 8dc:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_inf>
 8e0:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_nan>
 8e4:	11 24       	eor	r1, r1
 8e6:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_szero>

000008ea <__mulsf3x>:
 8ea:	0e 94 39 04 	call	0x872	; 0x872 <__fp_split3>
 8ee:	70 f3       	brcs	.-36     	; 0x8cc <__mulsf3+0x8>

000008f0 <__mulsf3_pse>:
 8f0:	95 9f       	mul	r25, r21
 8f2:	c1 f3       	breq	.-16     	; 0x8e4 <__mulsf3+0x20>
 8f4:	95 0f       	add	r25, r21
 8f6:	50 e0       	ldi	r21, 0x00	; 0
 8f8:	55 1f       	adc	r21, r21
 8fa:	62 9f       	mul	r22, r18
 8fc:	f0 01       	movw	r30, r0
 8fe:	72 9f       	mul	r23, r18
 900:	bb 27       	eor	r27, r27
 902:	f0 0d       	add	r31, r0
 904:	b1 1d       	adc	r27, r1
 906:	63 9f       	mul	r22, r19
 908:	aa 27       	eor	r26, r26
 90a:	f0 0d       	add	r31, r0
 90c:	b1 1d       	adc	r27, r1
 90e:	aa 1f       	adc	r26, r26
 910:	64 9f       	mul	r22, r20
 912:	66 27       	eor	r22, r22
 914:	b0 0d       	add	r27, r0
 916:	a1 1d       	adc	r26, r1
 918:	66 1f       	adc	r22, r22
 91a:	82 9f       	mul	r24, r18
 91c:	22 27       	eor	r18, r18
 91e:	b0 0d       	add	r27, r0
 920:	a1 1d       	adc	r26, r1
 922:	62 1f       	adc	r22, r18
 924:	73 9f       	mul	r23, r19
 926:	b0 0d       	add	r27, r0
 928:	a1 1d       	adc	r26, r1
 92a:	62 1f       	adc	r22, r18
 92c:	83 9f       	mul	r24, r19
 92e:	a0 0d       	add	r26, r0
 930:	61 1d       	adc	r22, r1
 932:	22 1f       	adc	r18, r18
 934:	74 9f       	mul	r23, r20
 936:	33 27       	eor	r19, r19
 938:	a0 0d       	add	r26, r0
 93a:	61 1d       	adc	r22, r1
 93c:	23 1f       	adc	r18, r19
 93e:	84 9f       	mul	r24, r20
 940:	60 0d       	add	r22, r0
 942:	21 1d       	adc	r18, r1
 944:	82 2f       	mov	r24, r18
 946:	76 2f       	mov	r23, r22
 948:	6a 2f       	mov	r22, r26
 94a:	11 24       	eor	r1, r1
 94c:	9f 57       	subi	r25, 0x7F	; 127
 94e:	50 40       	sbci	r21, 0x00	; 0
 950:	9a f0       	brmi	.+38     	; 0x978 <__stack+0x79>
 952:	f1 f0       	breq	.+60     	; 0x990 <__stack+0x91>
 954:	88 23       	and	r24, r24
 956:	4a f0       	brmi	.+18     	; 0x96a <__stack+0x6b>
 958:	ee 0f       	add	r30, r30
 95a:	ff 1f       	adc	r31, r31
 95c:	bb 1f       	adc	r27, r27
 95e:	66 1f       	adc	r22, r22
 960:	77 1f       	adc	r23, r23
 962:	88 1f       	adc	r24, r24
 964:	91 50       	subi	r25, 0x01	; 1
 966:	50 40       	sbci	r21, 0x00	; 0
 968:	a9 f7       	brne	.-22     	; 0x954 <__stack+0x55>
 96a:	9e 3f       	cpi	r25, 0xFE	; 254
 96c:	51 05       	cpc	r21, r1
 96e:	80 f0       	brcs	.+32     	; 0x990 <__stack+0x91>
 970:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_inf>
 974:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_szero>
 978:	5f 3f       	cpi	r21, 0xFF	; 255
 97a:	e4 f3       	brlt	.-8      	; 0x974 <__stack+0x75>
 97c:	98 3e       	cpi	r25, 0xE8	; 232
 97e:	d4 f3       	brlt	.-12     	; 0x974 <__stack+0x75>
 980:	86 95       	lsr	r24
 982:	77 95       	ror	r23
 984:	67 95       	ror	r22
 986:	b7 95       	ror	r27
 988:	f7 95       	ror	r31
 98a:	e7 95       	ror	r30
 98c:	9f 5f       	subi	r25, 0xFF	; 255
 98e:	c1 f7       	brne	.-16     	; 0x980 <__stack+0x81>
 990:	fe 2b       	or	r31, r30
 992:	88 0f       	add	r24, r24
 994:	91 1d       	adc	r25, r1
 996:	96 95       	lsr	r25
 998:	87 95       	ror	r24
 99a:	97 f9       	bld	r25, 7
 99c:	08 95       	ret

0000099e <__fp_inf>:
 99e:	97 f9       	bld	r25, 7
 9a0:	9f 67       	ori	r25, 0x7F	; 127
 9a2:	80 e8       	ldi	r24, 0x80	; 128
 9a4:	70 e0       	ldi	r23, 0x00	; 0
 9a6:	60 e0       	ldi	r22, 0x00	; 0
 9a8:	08 95       	ret

000009aa <__fp_nan>:
 9aa:	9f ef       	ldi	r25, 0xFF	; 255
 9ac:	80 ec       	ldi	r24, 0xC0	; 192
 9ae:	08 95       	ret

000009b0 <__fp_pscA>:
 9b0:	00 24       	eor	r0, r0
 9b2:	0a 94       	dec	r0
 9b4:	16 16       	cp	r1, r22
 9b6:	17 06       	cpc	r1, r23
 9b8:	18 06       	cpc	r1, r24
 9ba:	09 06       	cpc	r0, r25
 9bc:	08 95       	ret

000009be <__fp_pscB>:
 9be:	00 24       	eor	r0, r0
 9c0:	0a 94       	dec	r0
 9c2:	12 16       	cp	r1, r18
 9c4:	13 06       	cpc	r1, r19
 9c6:	14 06       	cpc	r1, r20
 9c8:	05 06       	cpc	r0, r21
 9ca:	08 95       	ret

000009cc <__fp_round>:
 9cc:	09 2e       	mov	r0, r25
 9ce:	03 94       	inc	r0
 9d0:	00 0c       	add	r0, r0
 9d2:	11 f4       	brne	.+4      	; 0x9d8 <__fp_round+0xc>
 9d4:	88 23       	and	r24, r24
 9d6:	52 f0       	brmi	.+20     	; 0x9ec <__fp_round+0x20>
 9d8:	bb 0f       	add	r27, r27
 9da:	40 f4       	brcc	.+16     	; 0x9ec <__fp_round+0x20>
 9dc:	bf 2b       	or	r27, r31
 9de:	11 f4       	brne	.+4      	; 0x9e4 <__fp_round+0x18>
 9e0:	60 ff       	sbrs	r22, 0
 9e2:	04 c0       	rjmp	.+8      	; 0x9ec <__fp_round+0x20>
 9e4:	6f 5f       	subi	r22, 0xFF	; 255
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	08 95       	ret

000009ee <__itoa_ncheck>:
 9ee:	bb 27       	eor	r27, r27
 9f0:	4a 30       	cpi	r20, 0x0A	; 10
 9f2:	31 f4       	brne	.+12     	; 0xa00 <__itoa_ncheck+0x12>
 9f4:	99 23       	and	r25, r25
 9f6:	22 f4       	brpl	.+8      	; 0xa00 <__itoa_ncheck+0x12>
 9f8:	bd e2       	ldi	r27, 0x2D	; 45
 9fa:	90 95       	com	r25
 9fc:	81 95       	neg	r24
 9fe:	9f 4f       	sbci	r25, 0xFF	; 255
 a00:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__utoa_common>

00000a04 <__utoa_ncheck>:
 a04:	bb 27       	eor	r27, r27

00000a06 <__utoa_common>:
 a06:	fb 01       	movw	r30, r22
 a08:	55 27       	eor	r21, r21
 a0a:	aa 27       	eor	r26, r26
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	aa 1f       	adc	r26, r26
 a12:	a4 17       	cp	r26, r20
 a14:	10 f0       	brcs	.+4      	; 0xa1a <__utoa_common+0x14>
 a16:	a4 1b       	sub	r26, r20
 a18:	83 95       	inc	r24
 a1a:	50 51       	subi	r21, 0x10	; 16
 a1c:	b9 f7       	brne	.-18     	; 0xa0c <__utoa_common+0x6>
 a1e:	a0 5d       	subi	r26, 0xD0	; 208
 a20:	aa 33       	cpi	r26, 0x3A	; 58
 a22:	08 f0       	brcs	.+2      	; 0xa26 <__utoa_common+0x20>
 a24:	a9 5d       	subi	r26, 0xD9	; 217
 a26:	a1 93       	st	Z+, r26
 a28:	00 97       	sbiw	r24, 0x00	; 0
 a2a:	79 f7       	brne	.-34     	; 0xa0a <__utoa_common+0x4>
 a2c:	b1 11       	cpse	r27, r1
 a2e:	b1 93       	st	Z+, r27
 a30:	11 92       	st	Z+, r1
 a32:	cb 01       	movw	r24, r22
 a34:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <strrev>

00000a38 <strrev>:
 a38:	dc 01       	movw	r26, r24
 a3a:	fc 01       	movw	r30, r24
 a3c:	67 2f       	mov	r22, r23
 a3e:	71 91       	ld	r23, Z+
 a40:	77 23       	and	r23, r23
 a42:	e1 f7       	brne	.-8      	; 0xa3c <strrev+0x4>
 a44:	32 97       	sbiw	r30, 0x02	; 2
 a46:	04 c0       	rjmp	.+8      	; 0xa50 <strrev+0x18>
 a48:	7c 91       	ld	r23, X
 a4a:	6d 93       	st	X+, r22
 a4c:	70 83       	st	Z, r23
 a4e:	62 91       	ld	r22, -Z
 a50:	ae 17       	cp	r26, r30
 a52:	bf 07       	cpc	r27, r31
 a54:	c8 f3       	brcs	.-14     	; 0xa48 <strrev+0x10>
 a56:	08 95       	ret

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
