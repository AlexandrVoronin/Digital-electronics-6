
hc-sr04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000860  000008f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000860  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800108  00800108  000008fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001228  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000907  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000700  00000000  00000000  0000256b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000597  00000000  00000000  0000344f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000039e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_18>
  4c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  9e:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/* GPIO_config_input_pullup */
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register
	*reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 23       	and	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
/* GPIO_write_low */
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  e0:	fc 01       	movw	r30, r24
	*reg_name = *reg_name & ~(1<<pin_num);
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
/*--------------------------------------------------------------------*/
/* GPIO_write_high */

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_toggle>:
/*--------------------------------------------------------------------*/
/* GPIO_toggle */				// toggle choosen bit

void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
 112:	fc 01       	movw	r30, r24
 114:	40 81       	ld	r20, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_toggle+0xe>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_toggle+0xa>
 124:	24 27       	eor	r18, r20
 126:	20 83       	st	Z, r18
 128:	08 95       	ret

0000012a <GPIO_read>:
/*--------------------------------------------------------------------*/
/* GPIO_read */			//read the value of chosen bit and return value due the condition

uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if(bit_is_set(*reg_name, pin_num))
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_read+0xc>
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_read+0x8>
	}
	else
	{
		return 0;
	}
}
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <main>:


int main(void)
{	

	GPIO_config_output(&DDRB,TRIGGER);
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	84 e2       	ldi	r24, 0x24	; 36
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB,TRIGGER);
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	85 e2       	ldi	r24, 0x25	; 37
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRC,LED1);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	87 e2       	ldi	r24, 0x27	; 39
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED1);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRC,LED2);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	87 e2       	ldi	r24, 0x27	; 39
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED2);
 170:	62 e0       	ldi	r22, 0x02	; 2
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRC,LED3);
 17a:	63 e0       	ldi	r22, 0x03	; 3
 17c:	87 e2       	ldi	r24, 0x27	; 39
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED3);
 184:	63 e0       	ldi	r22, 0x03	; 3
 186:	88 e2       	ldi	r24, 0x28	; 40
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRC,LED4);
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	87 e2       	ldi	r24, 0x27	; 39
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED4);
 198:	64 e0       	ldi	r22, 0x04	; 4
 19a:	88 e2       	ldi	r24, 0x28	; 40
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	
	GPIO_config_input_nopull(&DDRB,ECHO);
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	84 e2       	ldi	r24, 0x24	; 36
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	
	
	
	TIM0_overflow_16u();
 1ac:	85 b5       	in	r24, 0x25	; 37
 1ae:	89 7f       	andi	r24, 0xF9	; 249
 1b0:	85 bd       	out	0x25, r24	; 37
 1b2:	85 b5       	in	r24, 0x25	; 37
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 1b8:	ee e6       	ldi	r30, 0x6E	; 110
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	80 83       	st	Z, r24
	
	TIM1_overflow_1s();
 1c2:	e1 e8       	ldi	r30, 0x81	; 129
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	8c 7f       	andi	r24, 0xFC	; 252
 1ca:	80 83       	st	Z, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 1d2:	ef e6       	ldi	r30, 0x6F	; 111
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	80 83       	st	Z, r24
	
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 1dc:	87 e6       	ldi	r24, 0x67	; 103
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 92 02 	call	0x524	; 0x524 <uart_init>
	
	//enable global interrupt
	sei();
 1e4:	78 94       	sei
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0xa8>

000001e8 <__vector_16>:
/*
*
*/

ISR(TIMER0_OVF_vect)
{	
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
		STATE_ECHOCOUNT,
	} state_t;
	
	static state_t state= STATE_PULSE;
	
	number_of_overflows++;
 20a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <number_of_overflows.1989>
 20e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <number_of_overflows.1989+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <number_of_overflows.1989+0x1>
 218:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <number_of_overflows.1989>
	switch(state)
 21c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <state.1997>
 220:	21 30       	cpi	r18, 0x01	; 1
 222:	a1 f0       	breq	.+40     	; 0x24c <__vector_16+0x64>
 224:	18 f0       	brcs	.+6      	; 0x22c <__vector_16+0x44>
 226:	22 30       	cpi	r18, 0x02	; 2
 228:	99 f1       	breq	.+102    	; 0x290 <__vector_16+0xa8>
 22a:	6f c0       	rjmp	.+222    	; 0x30a <__vector_16+0x122>
	{
		case STATE_PULSE:
				if (number_of_overflows<=1)
 22c:	02 97       	sbiw	r24, 0x02	; 2
 22e:	08 f0       	brcs	.+2      	; 0x232 <__vector_16+0x4a>
 230:	6e c0       	rjmp	.+220    	; 0x30e <__vector_16+0x126>
				{
					GPIO_write_high(&PORTB,TRIGGER);
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	85 e2       	ldi	r24, 0x25	; 37
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
					state=STATE_ECHODETECT;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state.1997>
					lenght=0;
 242:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lenght.1991+0x1>
 246:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lenght.1991>
 24a:	61 c0       	rjmp	.+194    	; 0x30e <__vector_16+0x126>

				break;
				
				
		case STATE_ECHODETECT:
				GPIO_write_low(&PORTB,TRIGGER);
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	85 e2       	ldi	r24, 0x25	; 37
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
				if (number_of_overflows<=4062)
 256:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <number_of_overflows.1989>
 25a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <number_of_overflows.1989+0x1>
 25e:	8f 3d       	cpi	r24, 0xDF	; 223
 260:	9f 40       	sbci	r25, 0x0F	; 15
 262:	90 f4       	brcc	.+36     	; 0x288 <__vector_16+0xa0>
				{
					if (GPIO_read(&PINB,ECHO))
 264:	63 e0       	ldi	r22, 0x03	; 3
 266:	83 e2       	ldi	r24, 0x23	; 35
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 26e:	88 23       	and	r24, r24
 270:	09 f4       	brne	.+2      	; 0x274 <__vector_16+0x8c>
 272:	4d c0       	rjmp	.+154    	; 0x30e <__vector_16+0x126>
					{
						lenght++;
 274:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lenght.1991>
 278:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lenght.1991+0x1>
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lenght.1991+0x1>
 282:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lenght.1991>
 286:	43 c0       	rjmp	.+134    	; 0x30e <__vector_16+0x126>
					}
				} 
				else
				{
					state=STATE_ECHOCOUNT;
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state.1997>
 28e:	3f c0       	rjmp	.+126    	; 0x30e <__vector_16+0x126>
					
				}
				break;
		case STATE_ECHOCOUNT:
				if (lenght!=comparelenght)
 290:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <lenght.1991>
 294:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <lenght.1991+0x1>
 298:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 29c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 2a0:	68 17       	cp	r22, r24
 2a2:	79 07       	cpc	r23, r25
 2a4:	51 f1       	breq	.+84     	; 0x2fa <__vector_16+0x112>
				{
					distance=lenght*16*0.017;
 2a6:	62 95       	swap	r22
 2a8:	72 95       	swap	r23
 2aa:	70 7f       	andi	r23, 0xF0	; 240
 2ac:	76 27       	eor	r23, r22
 2ae:	60 7f       	andi	r22, 0xF0	; 240
 2b0:	76 27       	eor	r23, r22
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatunsisf>
 2ba:	26 e9       	ldi	r18, 0x96	; 150
 2bc:	33 e4       	ldi	r19, 0x43	; 67
 2be:	4b e8       	ldi	r20, 0x8B	; 139
 2c0:	5c e3       	ldi	r21, 0x3C	; 60
 2c2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 2c6:	0e 94 cf 02 	call	0x59e	; 0x59e <__fixunssfsi>
 2ca:	dc 01       	movw	r26, r24
 2cc:	cb 01       	movw	r24, r22
 2ce:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <distance+0x1>
 2d2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <distance>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2d6:	4a e0       	ldi	r20, 0x0A	; 10
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	71 e0       	ldi	r23, 0x01	; 1
 2dc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__itoa_ncheck>
					itoa(distance,lcd_string,10);
					GPIO_toggle(&PORTB,LED3);
 2e0:	63 e0       	ldi	r22, 0x03	; 3
 2e2:	85 e2       	ldi	r24, 0x25	; 37
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
					
					comparelenght=lenght;
 2ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lenght.1991>
 2ee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lenght.1991+0x1>
 2f2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 2f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
				}
				
				
				lenght=0;
 2fa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lenght.1991+0x1>
 2fe:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lenght.1991>
				number_of_overflows=0;
 302:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <number_of_overflows.1989+0x1>
 306:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <number_of_overflows.1989>
				state=STATE_PULSE;

				
		default:
				state=STATE_PULSE;
 30a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state.1997>
				
		}
	
	
	
}
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_13>:



ISR(TIMER1_OVF_vect)
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31

	
	uart_puts(lcd_string);
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 c0 02 	call	0x580	; 0x580 <uart_puts>
	uart_puts("\n");
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 c0 02 	call	0x580	; 0x580 <uart_puts>
	
	
	// Turn on LEDS
	if(distance <= 10)
 362:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <distance>
 366:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <distance+0x1>
 36a:	8b 30       	cpi	r24, 0x0B	; 11
 36c:	91 05       	cpc	r25, r1
 36e:	a8 f4       	brcc	.+42     	; 0x39a <__vector_13+0x6a>
	{
		GPIO_write_high(&PORTC, LED1);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	88 e2       	ldi	r24, 0x28	; 40
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED2);
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	88 e2       	ldi	r24, 0x28	; 40
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED3);
 384:	63 e0       	ldi	r22, 0x03	; 3
 386:	88 e2       	ldi	r24, 0x28	; 40
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED4);
 38e:	64 e0       	ldi	r22, 0x04	; 4
 390:	88 e2       	ldi	r24, 0x28	; 40
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 398:	5c c0       	rjmp	.+184    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	}
	else if(distance <= 50)
 39a:	83 33       	cpi	r24, 0x33	; 51
 39c:	91 05       	cpc	r25, r1
 39e:	a8 f4       	brcc	.+42     	; 0x3ca <__vector_13+0x9a>
	{
		GPIO_write_high(&PORTC, LED1);
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	88 e2       	ldi	r24, 0x28	; 40
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED2);
 3aa:	62 e0       	ldi	r22, 0x02	; 2
 3ac:	88 e2       	ldi	r24, 0x28	; 40
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED3);
 3b4:	63 e0       	ldi	r22, 0x03	; 3
 3b6:	88 e2       	ldi	r24, 0x28	; 40
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, LED4);
 3be:	64 e0       	ldi	r22, 0x04	; 4
 3c0:	88 e2       	ldi	r24, 0x28	; 40
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 3c8:	44 c0       	rjmp	.+136    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	}
	else if(distance <= 100)
 3ca:	85 36       	cpi	r24, 0x65	; 101
 3cc:	91 05       	cpc	r25, r1
 3ce:	a8 f4       	brcc	.+42     	; 0x3fa <__vector_13+0xca>
	{
		GPIO_write_high(&PORTC, LED1);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	88 e2       	ldi	r24, 0x28	; 40
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED2);
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	88 e2       	ldi	r24, 0x28	; 40
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, LED3);
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	88 e2       	ldi	r24, 0x28	; 40
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED4);
 3ee:	64 e0       	ldi	r22, 0x04	; 4
 3f0:	88 e2       	ldi	r24, 0x28	; 40
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 3f8:	2c c0       	rjmp	.+88     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	}
	else if(distance <= 200)
 3fa:	89 3c       	cpi	r24, 0xC9	; 201
 3fc:	91 05       	cpc	r25, r1
 3fe:	a8 f4       	brcc	.+42     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		GPIO_write_high(&PORTC, LED1);
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	88 e2       	ldi	r24, 0x28	; 40
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, LED2);
 40a:	62 e0       	ldi	r22, 0x02	; 2
 40c:	88 e2       	ldi	r24, 0x28	; 40
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED3);
 414:	63 e0       	ldi	r22, 0x03	; 3
 416:	88 e2       	ldi	r24, 0x28	; 40
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED4);
 41e:	64 e0       	ldi	r22, 0x04	; 4
 420:	88 e2       	ldi	r24, 0x28	; 40
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 428:	14 c0       	rjmp	.+40     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	}
	else
	{
		GPIO_write_low(&PORTC, LED1);
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	88 e2       	ldi	r24, 0x28	; 40
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED2);
 434:	62 e0       	ldi	r22, 0x02	; 2
 436:	88 e2       	ldi	r24, 0x28	; 40
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED3);
 43e:	63 e0       	ldi	r22, 0x03	; 3
 440:	88 e2       	ldi	r24, 0x28	; 40
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED4);
 448:	64 e0       	ldi	r22, 0x04	; 4
 44a:	88 e2       	ldi	r24, 0x28	; 40
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	}
	
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	2f 93       	push	r18
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
 488:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 48c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 490:	8c 71       	andi	r24, 0x1C	; 28
 492:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <UART_RxHead>
 496:	ef 5f       	subi	r30, 0xFF	; 255
 498:	ef 71       	andi	r30, 0x1F	; 31
 49a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <UART_RxTail>
 49e:	e9 17       	cp	r30, r25
 4a0:	39 f0       	breq	.+14     	; 0x4b0 <__vector_18+0x3c>
 4a2:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <UART_RxHead>
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	ea 5e       	subi	r30, 0xEA	; 234
 4aa:	fe 4f       	sbci	r31, 0xFE	; 254
 4ac:	20 83       	st	Z, r18
 4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <__vector_18+0x3e>
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <UART_LastRxError>
 4b6:	89 2b       	or	r24, r25
 4b8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <UART_LastRxError>
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	2f 91       	pop	r18
 4c6:	0f 90       	pop	r0
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	0f 90       	pop	r0
 4cc:	1f 90       	pop	r1
 4ce:	18 95       	reti

000004d0 <__vector_19>:
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	0f 92       	push	r0
 4d8:	11 24       	eor	r1, r1
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	ef 93       	push	r30
 4e0:	ff 93       	push	r31
 4e2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <UART_TxHead>
 4e6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <UART_TxTail>
 4ea:	98 17       	cp	r25, r24
 4ec:	69 f0       	breq	.+26     	; 0x508 <__vector_19+0x38>
 4ee:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <UART_TxTail>
 4f2:	ef 5f       	subi	r30, 0xFF	; 255
 4f4:	ef 71       	andi	r30, 0x1F	; 31
 4f6:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <UART_TxTail>
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	ea 5c       	subi	r30, 0xCA	; 202
 4fe:	fe 4f       	sbci	r31, 0xFE	; 254
 500:	80 81       	ld	r24, Z
 502:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 506:	05 c0       	rjmp	.+10     	; 0x512 <__vector_19+0x42>
 508:	e1 ec       	ldi	r30, 0xC1	; 193
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	8f 7d       	andi	r24, 0xDF	; 223
 510:	80 83       	st	Z, r24
 512:	ff 91       	pop	r31
 514:	ef 91       	pop	r30
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <uart_init>:
 524:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <UART_TxHead>
 528:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <UART_TxTail>
 52c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <UART_RxHead>
 530:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <UART_RxTail>
 534:	99 23       	and	r25, r25
 536:	1c f4       	brge	.+6      	; 0x53e <uart_init+0x1a>
 538:	22 e0       	ldi	r18, 0x02	; 2
 53a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 53e:	90 78       	andi	r25, 0x80	; 128
 540:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 544:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 548:	88 e9       	ldi	r24, 0x98	; 152
 54a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 54e:	86 e0       	ldi	r24, 0x06	; 6
 550:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 554:	08 95       	ret

00000556 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 556:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <UART_TxHead>
 55a:	2f 5f       	subi	r18, 0xFF	; 255
 55c:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 55e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <UART_TxTail>
 562:	29 17       	cp	r18, r25
 564:	e1 f3       	breq	.-8      	; 0x55e <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 566:	e2 2f       	mov	r30, r18
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	ea 5c       	subi	r30, 0xCA	; 202
 56c:	fe 4f       	sbci	r31, 0xFE	; 254
 56e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 570:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 574:	e1 ec       	ldi	r30, 0xC1	; 193
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	80 62       	ori	r24, 0x20	; 32
 57c:	80 83       	st	Z, r24
 57e:	08 95       	ret

00000580 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	ec 01       	movw	r28, r24
    while (*s)
 586:	88 81       	ld	r24, Y
 588:	88 23       	and	r24, r24
 58a:	31 f0       	breq	.+12     	; 0x598 <uart_puts+0x18>
 58c:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 58e:	0e 94 ab 02 	call	0x556	; 0x556 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 592:	89 91       	ld	r24, Y+
 594:	81 11       	cpse	r24, r1
 596:	fb cf       	rjmp	.-10     	; 0x58e <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <__fixunssfsi>:
 59e:	0e 94 43 03 	call	0x686	; 0x686 <__fp_splitA>
 5a2:	88 f0       	brcs	.+34     	; 0x5c6 <__fixunssfsi+0x28>
 5a4:	9f 57       	subi	r25, 0x7F	; 127
 5a6:	98 f0       	brcs	.+38     	; 0x5ce <__fixunssfsi+0x30>
 5a8:	b9 2f       	mov	r27, r25
 5aa:	99 27       	eor	r25, r25
 5ac:	b7 51       	subi	r27, 0x17	; 23
 5ae:	b0 f0       	brcs	.+44     	; 0x5dc <__fixunssfsi+0x3e>
 5b0:	e1 f0       	breq	.+56     	; 0x5ea <__fixunssfsi+0x4c>
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	1a f0       	brmi	.+6      	; 0x5c2 <__fixunssfsi+0x24>
 5bc:	ba 95       	dec	r27
 5be:	c9 f7       	brne	.-14     	; 0x5b2 <__fixunssfsi+0x14>
 5c0:	14 c0       	rjmp	.+40     	; 0x5ea <__fixunssfsi+0x4c>
 5c2:	b1 30       	cpi	r27, 0x01	; 1
 5c4:	91 f0       	breq	.+36     	; 0x5ea <__fixunssfsi+0x4c>
 5c6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_zero>
 5ca:	b1 e0       	ldi	r27, 0x01	; 1
 5cc:	08 95       	ret
 5ce:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_zero>
 5d2:	67 2f       	mov	r22, r23
 5d4:	78 2f       	mov	r23, r24
 5d6:	88 27       	eor	r24, r24
 5d8:	b8 5f       	subi	r27, 0xF8	; 248
 5da:	39 f0       	breq	.+14     	; 0x5ea <__fixunssfsi+0x4c>
 5dc:	b9 3f       	cpi	r27, 0xF9	; 249
 5de:	cc f3       	brlt	.-14     	; 0x5d2 <__fixunssfsi+0x34>
 5e0:	86 95       	lsr	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b3 95       	inc	r27
 5e8:	d9 f7       	brne	.-10     	; 0x5e0 <__fixunssfsi+0x42>
 5ea:	3e f4       	brtc	.+14     	; 0x5fa <__fixunssfsi+0x5c>
 5ec:	90 95       	com	r25
 5ee:	80 95       	com	r24
 5f0:	70 95       	com	r23
 5f2:	61 95       	neg	r22
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	8f 4f       	sbci	r24, 0xFF	; 255
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	08 95       	ret

000005fc <__floatunsisf>:
 5fc:	e8 94       	clt
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <__floatsisf+0x12>

00000600 <__floatsisf>:
 600:	97 fb       	bst	r25, 7
 602:	3e f4       	brtc	.+14     	; 0x612 <__floatsisf+0x12>
 604:	90 95       	com	r25
 606:	80 95       	com	r24
 608:	70 95       	com	r23
 60a:	61 95       	neg	r22
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	99 23       	and	r25, r25
 614:	a9 f0       	breq	.+42     	; 0x640 <__floatsisf+0x40>
 616:	f9 2f       	mov	r31, r25
 618:	96 e9       	ldi	r25, 0x96	; 150
 61a:	bb 27       	eor	r27, r27
 61c:	93 95       	inc	r25
 61e:	f6 95       	lsr	r31
 620:	87 95       	ror	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f1 11       	cpse	r31, r1
 62a:	f8 cf       	rjmp	.-16     	; 0x61c <__floatsisf+0x1c>
 62c:	fa f4       	brpl	.+62     	; 0x66c <__floatsisf+0x6c>
 62e:	bb 0f       	add	r27, r27
 630:	11 f4       	brne	.+4      	; 0x636 <__floatsisf+0x36>
 632:	60 ff       	sbrs	r22, 0
 634:	1b c0       	rjmp	.+54     	; 0x66c <__floatsisf+0x6c>
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	16 c0       	rjmp	.+44     	; 0x66c <__floatsisf+0x6c>
 640:	88 23       	and	r24, r24
 642:	11 f0       	breq	.+4      	; 0x648 <__floatsisf+0x48>
 644:	96 e9       	ldi	r25, 0x96	; 150
 646:	11 c0       	rjmp	.+34     	; 0x66a <__floatsisf+0x6a>
 648:	77 23       	and	r23, r23
 64a:	21 f0       	breq	.+8      	; 0x654 <__floatsisf+0x54>
 64c:	9e e8       	ldi	r25, 0x8E	; 142
 64e:	87 2f       	mov	r24, r23
 650:	76 2f       	mov	r23, r22
 652:	05 c0       	rjmp	.+10     	; 0x65e <__floatsisf+0x5e>
 654:	66 23       	and	r22, r22
 656:	71 f0       	breq	.+28     	; 0x674 <__floatsisf+0x74>
 658:	96 e8       	ldi	r25, 0x86	; 134
 65a:	86 2f       	mov	r24, r22
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	2a f0       	brmi	.+10     	; 0x66c <__floatsisf+0x6c>
 662:	9a 95       	dec	r25
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	da f7       	brpl	.-10     	; 0x662 <__floatsisf+0x62>
 66c:	88 0f       	add	r24, r24
 66e:	96 95       	lsr	r25
 670:	87 95       	ror	r24
 672:	97 f9       	bld	r25, 7
 674:	08 95       	ret

00000676 <__fp_split3>:
 676:	57 fd       	sbrc	r21, 7
 678:	90 58       	subi	r25, 0x80	; 128
 67a:	44 0f       	add	r20, r20
 67c:	55 1f       	adc	r21, r21
 67e:	59 f0       	breq	.+22     	; 0x696 <__fp_splitA+0x10>
 680:	5f 3f       	cpi	r21, 0xFF	; 255
 682:	71 f0       	breq	.+28     	; 0x6a0 <__fp_splitA+0x1a>
 684:	47 95       	ror	r20

00000686 <__fp_splitA>:
 686:	88 0f       	add	r24, r24
 688:	97 fb       	bst	r25, 7
 68a:	99 1f       	adc	r25, r25
 68c:	61 f0       	breq	.+24     	; 0x6a6 <__fp_splitA+0x20>
 68e:	9f 3f       	cpi	r25, 0xFF	; 255
 690:	79 f0       	breq	.+30     	; 0x6b0 <__fp_splitA+0x2a>
 692:	87 95       	ror	r24
 694:	08 95       	ret
 696:	12 16       	cp	r1, r18
 698:	13 06       	cpc	r1, r19
 69a:	14 06       	cpc	r1, r20
 69c:	55 1f       	adc	r21, r21
 69e:	f2 cf       	rjmp	.-28     	; 0x684 <__fp_split3+0xe>
 6a0:	46 95       	lsr	r20
 6a2:	f1 df       	rcall	.-30     	; 0x686 <__fp_splitA>
 6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <__fp_splitA+0x30>
 6a6:	16 16       	cp	r1, r22
 6a8:	17 06       	cpc	r1, r23
 6aa:	18 06       	cpc	r1, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	f1 cf       	rjmp	.-30     	; 0x692 <__fp_splitA+0xc>
 6b0:	86 95       	lsr	r24
 6b2:	71 05       	cpc	r23, r1
 6b4:	61 05       	cpc	r22, r1
 6b6:	08 94       	sec
 6b8:	08 95       	ret

000006ba <__fp_zero>:
 6ba:	e8 94       	clt

000006bc <__fp_szero>:
 6bc:	bb 27       	eor	r27, r27
 6be:	66 27       	eor	r22, r22
 6c0:	77 27       	eor	r23, r23
 6c2:	cb 01       	movw	r24, r22
 6c4:	97 f9       	bld	r25, 7
 6c6:	08 95       	ret

000006c8 <__mulsf3>:
 6c8:	0e 94 77 03 	call	0x6ee	; 0x6ee <__mulsf3x>
 6cc:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__fp_round>
 6d0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_pscA>
 6d4:	38 f0       	brcs	.+14     	; 0x6e4 <__mulsf3+0x1c>
 6d6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__fp_pscB>
 6da:	20 f0       	brcs	.+8      	; 0x6e4 <__mulsf3+0x1c>
 6dc:	95 23       	and	r25, r21
 6de:	11 f0       	breq	.+4      	; 0x6e4 <__mulsf3+0x1c>
 6e0:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__fp_inf>
 6e4:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__fp_nan>
 6e8:	11 24       	eor	r1, r1
 6ea:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_szero>

000006ee <__mulsf3x>:
 6ee:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_split3>
 6f2:	70 f3       	brcs	.-36     	; 0x6d0 <__mulsf3+0x8>

000006f4 <__mulsf3_pse>:
 6f4:	95 9f       	mul	r25, r21
 6f6:	c1 f3       	breq	.-16     	; 0x6e8 <__mulsf3+0x20>
 6f8:	95 0f       	add	r25, r21
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	55 1f       	adc	r21, r21
 6fe:	62 9f       	mul	r22, r18
 700:	f0 01       	movw	r30, r0
 702:	72 9f       	mul	r23, r18
 704:	bb 27       	eor	r27, r27
 706:	f0 0d       	add	r31, r0
 708:	b1 1d       	adc	r27, r1
 70a:	63 9f       	mul	r22, r19
 70c:	aa 27       	eor	r26, r26
 70e:	f0 0d       	add	r31, r0
 710:	b1 1d       	adc	r27, r1
 712:	aa 1f       	adc	r26, r26
 714:	64 9f       	mul	r22, r20
 716:	66 27       	eor	r22, r22
 718:	b0 0d       	add	r27, r0
 71a:	a1 1d       	adc	r26, r1
 71c:	66 1f       	adc	r22, r22
 71e:	82 9f       	mul	r24, r18
 720:	22 27       	eor	r18, r18
 722:	b0 0d       	add	r27, r0
 724:	a1 1d       	adc	r26, r1
 726:	62 1f       	adc	r22, r18
 728:	73 9f       	mul	r23, r19
 72a:	b0 0d       	add	r27, r0
 72c:	a1 1d       	adc	r26, r1
 72e:	62 1f       	adc	r22, r18
 730:	83 9f       	mul	r24, r19
 732:	a0 0d       	add	r26, r0
 734:	61 1d       	adc	r22, r1
 736:	22 1f       	adc	r18, r18
 738:	74 9f       	mul	r23, r20
 73a:	33 27       	eor	r19, r19
 73c:	a0 0d       	add	r26, r0
 73e:	61 1d       	adc	r22, r1
 740:	23 1f       	adc	r18, r19
 742:	84 9f       	mul	r24, r20
 744:	60 0d       	add	r22, r0
 746:	21 1d       	adc	r18, r1
 748:	82 2f       	mov	r24, r18
 74a:	76 2f       	mov	r23, r22
 74c:	6a 2f       	mov	r22, r26
 74e:	11 24       	eor	r1, r1
 750:	9f 57       	subi	r25, 0x7F	; 127
 752:	50 40       	sbci	r21, 0x00	; 0
 754:	9a f0       	brmi	.+38     	; 0x77c <__mulsf3_pse+0x88>
 756:	f1 f0       	breq	.+60     	; 0x794 <__mulsf3_pse+0xa0>
 758:	88 23       	and	r24, r24
 75a:	4a f0       	brmi	.+18     	; 0x76e <__mulsf3_pse+0x7a>
 75c:	ee 0f       	add	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	bb 1f       	adc	r27, r27
 762:	66 1f       	adc	r22, r22
 764:	77 1f       	adc	r23, r23
 766:	88 1f       	adc	r24, r24
 768:	91 50       	subi	r25, 0x01	; 1
 76a:	50 40       	sbci	r21, 0x00	; 0
 76c:	a9 f7       	brne	.-22     	; 0x758 <__mulsf3_pse+0x64>
 76e:	9e 3f       	cpi	r25, 0xFE	; 254
 770:	51 05       	cpc	r21, r1
 772:	80 f0       	brcs	.+32     	; 0x794 <__mulsf3_pse+0xa0>
 774:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__fp_inf>
 778:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_szero>
 77c:	5f 3f       	cpi	r21, 0xFF	; 255
 77e:	e4 f3       	brlt	.-8      	; 0x778 <__mulsf3_pse+0x84>
 780:	98 3e       	cpi	r25, 0xE8	; 232
 782:	d4 f3       	brlt	.-12     	; 0x778 <__mulsf3_pse+0x84>
 784:	86 95       	lsr	r24
 786:	77 95       	ror	r23
 788:	67 95       	ror	r22
 78a:	b7 95       	ror	r27
 78c:	f7 95       	ror	r31
 78e:	e7 95       	ror	r30
 790:	9f 5f       	subi	r25, 0xFF	; 255
 792:	c1 f7       	brne	.-16     	; 0x784 <__mulsf3_pse+0x90>
 794:	fe 2b       	or	r31, r30
 796:	88 0f       	add	r24, r24
 798:	91 1d       	adc	r25, r1
 79a:	96 95       	lsr	r25
 79c:	87 95       	ror	r24
 79e:	97 f9       	bld	r25, 7
 7a0:	08 95       	ret

000007a2 <__fp_inf>:
 7a2:	97 f9       	bld	r25, 7
 7a4:	9f 67       	ori	r25, 0x7F	; 127
 7a6:	80 e8       	ldi	r24, 0x80	; 128
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	08 95       	ret

000007ae <__fp_nan>:
 7ae:	9f ef       	ldi	r25, 0xFF	; 255
 7b0:	80 ec       	ldi	r24, 0xC0	; 192
 7b2:	08 95       	ret

000007b4 <__fp_pscA>:
 7b4:	00 24       	eor	r0, r0
 7b6:	0a 94       	dec	r0
 7b8:	16 16       	cp	r1, r22
 7ba:	17 06       	cpc	r1, r23
 7bc:	18 06       	cpc	r1, r24
 7be:	09 06       	cpc	r0, r25
 7c0:	08 95       	ret

000007c2 <__fp_pscB>:
 7c2:	00 24       	eor	r0, r0
 7c4:	0a 94       	dec	r0
 7c6:	12 16       	cp	r1, r18
 7c8:	13 06       	cpc	r1, r19
 7ca:	14 06       	cpc	r1, r20
 7cc:	05 06       	cpc	r0, r21
 7ce:	08 95       	ret

000007d0 <__fp_round>:
 7d0:	09 2e       	mov	r0, r25
 7d2:	03 94       	inc	r0
 7d4:	00 0c       	add	r0, r0
 7d6:	11 f4       	brne	.+4      	; 0x7dc <__fp_round+0xc>
 7d8:	88 23       	and	r24, r24
 7da:	52 f0       	brmi	.+20     	; 0x7f0 <__fp_round+0x20>
 7dc:	bb 0f       	add	r27, r27
 7de:	40 f4       	brcc	.+16     	; 0x7f0 <__fp_round+0x20>
 7e0:	bf 2b       	or	r27, r31
 7e2:	11 f4       	brne	.+4      	; 0x7e8 <__fp_round+0x18>
 7e4:	60 ff       	sbrs	r22, 0
 7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <__fp_round+0x20>
 7e8:	6f 5f       	subi	r22, 0xFF	; 255
 7ea:	7f 4f       	sbci	r23, 0xFF	; 255
 7ec:	8f 4f       	sbci	r24, 0xFF	; 255
 7ee:	9f 4f       	sbci	r25, 0xFF	; 255
 7f0:	08 95       	ret

000007f2 <__itoa_ncheck>:
 7f2:	bb 27       	eor	r27, r27
 7f4:	4a 30       	cpi	r20, 0x0A	; 10
 7f6:	31 f4       	brne	.+12     	; 0x804 <__itoa_ncheck+0x12>
 7f8:	99 23       	and	r25, r25
 7fa:	22 f4       	brpl	.+8      	; 0x804 <__itoa_ncheck+0x12>
 7fc:	bd e2       	ldi	r27, 0x2D	; 45
 7fe:	90 95       	com	r25
 800:	81 95       	neg	r24
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	0c 94 05 04 	jmp	0x80a	; 0x80a <__utoa_common>

00000808 <__utoa_ncheck>:
 808:	bb 27       	eor	r27, r27

0000080a <__utoa_common>:
 80a:	fb 01       	movw	r30, r22
 80c:	55 27       	eor	r21, r21
 80e:	aa 27       	eor	r26, r26
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	aa 1f       	adc	r26, r26
 816:	a4 17       	cp	r26, r20
 818:	10 f0       	brcs	.+4      	; 0x81e <__utoa_common+0x14>
 81a:	a4 1b       	sub	r26, r20
 81c:	83 95       	inc	r24
 81e:	50 51       	subi	r21, 0x10	; 16
 820:	b9 f7       	brne	.-18     	; 0x810 <__utoa_common+0x6>
 822:	a0 5d       	subi	r26, 0xD0	; 208
 824:	aa 33       	cpi	r26, 0x3A	; 58
 826:	08 f0       	brcs	.+2      	; 0x82a <__utoa_common+0x20>
 828:	a9 5d       	subi	r26, 0xD9	; 217
 82a:	a1 93       	st	Z+, r26
 82c:	00 97       	sbiw	r24, 0x00	; 0
 82e:	79 f7       	brne	.-34     	; 0x80e <__utoa_common+0x4>
 830:	b1 11       	cpse	r27, r1
 832:	b1 93       	st	Z+, r27
 834:	11 92       	st	Z+, r1
 836:	cb 01       	movw	r24, r22
 838:	0c 94 1e 04 	jmp	0x83c	; 0x83c <strrev>

0000083c <strrev>:
 83c:	dc 01       	movw	r26, r24
 83e:	fc 01       	movw	r30, r24
 840:	67 2f       	mov	r22, r23
 842:	71 91       	ld	r23, Z+
 844:	77 23       	and	r23, r23
 846:	e1 f7       	brne	.-8      	; 0x840 <strrev+0x4>
 848:	32 97       	sbiw	r30, 0x02	; 2
 84a:	04 c0       	rjmp	.+8      	; 0x854 <strrev+0x18>
 84c:	7c 91       	ld	r23, X
 84e:	6d 93       	st	X+, r22
 850:	70 83       	st	Z, r23
 852:	62 91       	ld	r22, -Z
 854:	ae 17       	cp	r26, r30
 856:	bf 07       	cpc	r27, r31
 858:	c8 f3       	brcs	.-14     	; 0x84c <strrev+0x10>
 85a:	08 95       	ret

0000085c <_exit>:
 85c:	f8 94       	cli

0000085e <__stop_program>:
 85e:	ff cf       	rjmp	.-2      	; 0x85e <__stop_program>
