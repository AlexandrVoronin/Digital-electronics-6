
Project_HC-SR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00000eb4  00000f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  0080019e  0080019e  00000fe6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001018  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f7f  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4e  00000000  00000000  0000313f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eba  00000000  00000000  00003d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00004c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fd  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e9e  00000000  00000000  0000572d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000065cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__vector_13>
  38:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__vector_18>
  4c:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 39       	cpi	r26, 0x9E	; 158
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e9       	ldi	r26, 0x9E	; 158
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 42 01 	call	0x284	; 0x284 <main>
  9e:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;							// Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 23       	and	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  e0:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_toggle>:
}

/*--------------------------------------------------------------------*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
 112:	fc 01       	movw	r30, r24
 114:	40 81       	ld	r20, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_toggle+0xe>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_toggle+0xa>
 124:	24 27       	eor	r18, r20
 126:	20 83       	st	Z, r18
 128:	08 95       	ret

0000012a <GPIO_read>:
}

/*--------------------------------------------------------------------*/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if(bit_is_clear(*reg_name, pin_num))
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_read+0xc>
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_read+0x8>
	}
	else
	{
		return 1;
	}
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 13e:	29 9a       	sbi	0x05, 1	; 5
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <toggle_e+0x4>
 146:	00 00       	nop
 148:	29 98       	cbi	0x05, 1	; 5
 14a:	08 95       	ret

0000014c <lcd_write>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	66 23       	and	r22, r22
 152:	11 f0       	breq	.+4      	; 0x158 <lcd_write+0xc>
 154:	28 9a       	sbi	0x05, 0	; 5
 156:	01 c0       	rjmp	.+2      	; 0x15a <lcd_write+0xe>
 158:	28 98       	cbi	0x05, 0	; 5
 15a:	54 9a       	sbi	0x0a, 4	; 10
 15c:	55 9a       	sbi	0x0a, 5	; 10
 15e:	56 9a       	sbi	0x0a, 6	; 10
 160:	57 9a       	sbi	0x0a, 7	; 10
 162:	5f 98       	cbi	0x0b, 7	; 11
 164:	5e 98       	cbi	0x0b, 6	; 11
 166:	5d 98       	cbi	0x0b, 5	; 11
 168:	5c 98       	cbi	0x0b, 4	; 11
 16a:	cc 23       	and	r28, r28
 16c:	0c f4       	brge	.+2      	; 0x170 <lcd_write+0x24>
 16e:	5f 9a       	sbi	0x0b, 7	; 11
 170:	c6 fd       	sbrc	r28, 6
 172:	5e 9a       	sbi	0x0b, 6	; 11
 174:	c5 fd       	sbrc	r28, 5
 176:	5d 9a       	sbi	0x0b, 5	; 11
 178:	c4 fd       	sbrc	r28, 4
 17a:	5c 9a       	sbi	0x0b, 4	; 11
 17c:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 180:	5f 98       	cbi	0x0b, 7	; 11
 182:	5e 98       	cbi	0x0b, 6	; 11
 184:	5d 98       	cbi	0x0b, 5	; 11
 186:	5c 98       	cbi	0x0b, 4	; 11
 188:	c3 fd       	sbrc	r28, 3
 18a:	5f 9a       	sbi	0x0b, 7	; 11
 18c:	c2 fd       	sbrc	r28, 2
 18e:	5e 9a       	sbi	0x0b, 6	; 11
 190:	c1 fd       	sbrc	r28, 1
 192:	5d 9a       	sbi	0x0b, 5	; 11
 194:	c0 fd       	sbrc	r28, 0
 196:	5c 9a       	sbi	0x0b, 4	; 11
 198:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 19c:	5c 9a       	sbi	0x0b, 4	; 11
 19e:	5d 9a       	sbi	0x0b, 5	; 11
 1a0:	5e 9a       	sbi	0x0b, 6	; 11
 1a2:	5f 9a       	sbi	0x0b, 7	; 11
 1a4:	87 eb       	ldi	r24, 0xB7	; 183
 1a6:	9b e0       	ldi	r25, 0x0B	; 11
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_write+0x5c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_write+0x62>
 1ae:	00 00       	nop
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <lcd_command>:
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
 1ba:	08 95       	ret

000001bc <lcd_gotoxy>:
 1bc:	61 11       	cpse	r22, r1
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <lcd_gotoxy+0xc>
 1c0:	80 58       	subi	r24, 0x80	; 128
 1c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1c6:	08 95       	ret
 1c8:	80 54       	subi	r24, 0x40	; 64
 1ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1ce:	08 95       	ret

000001d0 <lcd_clrscr>:
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1d6:	08 95       	ret

000001d8 <lcd_putc>:
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
 1de:	08 95       	ret

000001e0 <lcd_puts>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	fc 01       	movw	r30, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	29 f0       	breq	.+10     	; 0x1fa <lcd_puts+0x1a>
 1f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
 1f4:	89 91       	ld	r24, Y+
 1f6:	81 11       	cpse	r24, r1
 1f8:	fb cf       	rjmp	.-10     	; 0x1f0 <lcd_puts+0x10>
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 200:	cf 93       	push	r28
 202:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 204:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 206:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 208:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 20a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 20c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 20e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 210:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x16>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x1c>
 21c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 21e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 220:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 222:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 226:	8f e1       	ldi	r24, 0x1F	; 31
 228:	9e e4       	ldi	r25, 0x4E	; 78
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x2a>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_init+0x30>
 230:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 232:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x3a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x40>
 240:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 242:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x4a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x50>
 250:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 252:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 254:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x5c>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x62>
 262:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 264:	88 e2       	ldi	r24, 0x28	; 40
 266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 26a:	88 e0       	ldi	r24, 0x08	; 8
 26c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 270:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 27a:	8c 2f       	mov	r24, r28
 27c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
}/* lcd_init */
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <main>:

/* Function definitions ----------------------------------------------*/
int main(void)
{
    // Output pins (Trigger)
     GPIO_config_output(&DDRB, trigFront);
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	84 e2       	ldi	r24, 0x24	; 36
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTB, trigFront);
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	85 e2       	ldi	r24, 0x25	; 37
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRB, trigBack);
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	84 e2       	ldi	r24, 0x24	; 36
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTB, trigBack);
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	85 e2       	ldi	r24, 0x25	; 37
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
     // Input pins (Echo)
     GPIO_config_input_nopull(&DDRB, echoFront);
 2ac:	63 e0       	ldi	r22, 0x03	; 3
 2ae:	84 e2       	ldi	r24, 0x24	; 36
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
     GPIO_config_input_nopull(&DDRB, echoBack);
 2b6:	65 e0       	ldi	r22, 0x05	; 5
 2b8:	84 e2       	ldi	r24, 0x24	; 36
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
     
     // LEDs
     GPIO_config_output(&DDRC,LED1);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	87 e2       	ldi	r24, 0x27	; 39
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED1);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRC,LED2);
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	87 e2       	ldi	r24, 0x27	; 39
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED2);
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	88 e2       	ldi	r24, 0x28	; 40
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRC,LED3);
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	87 e2       	ldi	r24, 0x27	; 39
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED3);
 2f2:	63 e0       	ldi	r22, 0x03	; 3
 2f4:	88 e2       	ldi	r24, 0x28	; 40
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRC,LED4);
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	87 e2       	ldi	r24, 0x27	; 39
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED4);
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	88 e2       	ldi	r24, 0x28	; 40
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
     // speaker
     GPIO_config_output(&DDRC, speaker);
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	87 e2       	ldi	r24, 0x27	; 39
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC, speaker);
 31a:	65 e0       	ldi	r22, 0x05	; 5
 31c:	88 e2       	ldi	r24, 0x28	; 40
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 324:	8c e0       	ldi	r24, 0x0C	; 12
 326:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>
    lcd_gotoxy(0, 0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("Front: Standby..");
 332:	86 e0       	ldi	r24, 0x06	; 6
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
    lcd_gotoxy(0, 1);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts(" Back: Standby..");
 342:	87 e1       	ldi	r24, 0x17	; 23
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
    
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 34a:	87 e6       	ldi	r24, 0x67	; 103
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 87 05 	call	0xb0e	; 0xb0e <uart_init>
    uart_puts("Welcome.\n\n");
 352:	88 e2       	ldi	r24, 0x28	; 40
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
    //TIM0_overflow_16us();
    //TIM0_overflow_interrupt_enable();
    
    // Timer0 1us overflow interrupt
    // F_CPU/freq*2*N -1
    OCR0A = 127;    
 35a:	8f e7       	ldi	r24, 0x7F	; 127
 35c:	87 bd       	out	0x27, r24	; 39
    TIM0_CTC();
 35e:	84 b5       	in	r24, 0x24	; 36
 360:	82 60       	ori	r24, 0x02	; 2
 362:	84 bd       	out	0x24, r24	; 36
 364:	84 b5       	in	r24, 0x24	; 36
 366:	8e 7f       	andi	r24, 0xFE	; 254
 368:	84 bd       	out	0x24, r24	; 36
 36a:	85 b5       	in	r24, 0x25	; 37
 36c:	87 7f       	andi	r24, 0xF7	; 247
 36e:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_COMPA();
 370:	ee e6       	ldi	r30, 0x6E	; 110
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	82 60       	ori	r24, 0x02	; 2
 378:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1
    // Enable interrupt and set the overflow prescaler to 262 ms
    // Used for displaying result on LCD, uart, LEDs
    TIM1_overflow_262ms();
 37a:	e1 e8       	ldi	r30, 0x81	; 129
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	8b 7f       	andi	r24, 0xFB	; 251
 382:	80 83       	st	Z, r24
 384:	80 81       	ld	r24, Z
 386:	83 60       	ori	r24, 0x03	; 3
 388:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();      
 38a:	ef e6       	ldi	r30, 0x6F	; 111
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	81 60       	ori	r24, 0x01	; 1
 392:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 394:	78 94       	sei
 396:	ff cf       	rjmp	.-2      	; 0x396 <main+0x112>

00000398 <__vector_14>:
 * ISR starts when Timer/Counter0 overflows. 
 * 
 */
//ISR(TIMER0_OVF_vect)
ISR(TIMER0_COMPA_vect)
{
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	4f 93       	push	r20
 3a8:	5f 93       	push	r21
 3aa:	6f 93       	push	r22
 3ac:	7f 93       	push	r23
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
    static uint16_t number_of_overflows = 0;
    static uint16_t lenFront = 0;
    static uint16_t lenBack = 0;
    static state_t state= STATE_TRIG;
    
    number_of_overflows++;
 3ba:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <number_of_overflows.2259>
 3be:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <number_of_overflows.2259+0x1>
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <number_of_overflows.2259+0x1>
 3c8:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <number_of_overflows.2259>
    
    switch(state)
 3cc:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <state.2262>
 3d0:	22 23       	and	r18, r18
 3d2:	19 f0       	breq	.+6      	; 0x3da <__vector_14+0x42>
 3d4:	21 30       	cpi	r18, 0x01	; 1
 3d6:	e9 f0       	breq	.+58     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3d8:	88 c0       	rjmp	.+272    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
    {
        case STATE_TRIG:            
            GPIO_write_high(&PORTB, trigFront);
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	85 e2       	ldi	r24, 0x25	; 37
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, trigBack);
 3e4:	64 e0       	ldi	r22, 0x04	; 4
 3e6:	85 e2       	ldi	r24, 0x25	; 37
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 3ee:	25 e3       	ldi	r18, 0x35	; 53
 3f0:	2a 95       	dec	r18
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <__vector_14+0x58>
 3f4:	00 00       	nop
            _delay_us(10);
            GPIO_write_low(&PORTB, trigFront);
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	85 e2       	ldi	r24, 0x25	; 37
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, trigBack);
 400:	64 e0       	ldi	r22, 0x04	; 4
 402:	85 e2       	ldi	r24, 0x25	; 37
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            
            state = STATE_ECHO_MEAS;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state.2262>

            break;
 410:	6e c0       	rjmp	.+220    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
        
        case STATE_ECHO_MEAS:
            if (number_of_overflows <= 65000)  // 60 ms
 412:	89 3e       	cpi	r24, 0xE9	; 233
 414:	9d 4f       	sbci	r25, 0xFD	; 253
 416:	10 f5       	brcc	.+68     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
            {
                if (GPIO_read(&PINB, echoFront))
 418:	63 e0       	ldi	r22, 0x03	; 3
 41a:	83 e2       	ldi	r24, 0x23	; 35
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 422:	88 23       	and	r24, r24
 424:	49 f0       	breq	.+18     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
                {
                    lenFront++;
 426:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lenFront.2260>
 42a:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <lenFront.2260+0x1>
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <lenFront.2260+0x1>
 434:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lenFront.2260>
                }
                if (GPIO_read(&PINB, echoBack))
 438:	65 e0       	ldi	r22, 0x05	; 5
 43a:	83 e2       	ldi	r24, 0x23	; 35
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 442:	88 23       	and	r24, r24
 444:	09 f4       	brne	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	53 c0       	rjmp	.+166    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
                {
                    lenBack++;
 448:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <lenBack.2261>
 44c:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <lenBack.2261+0x1>
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <lenBack.2261+0x1>
 456:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <lenBack.2261>
 45a:	49 c0       	rjmp	.+146    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
                }
            }
            else
            {
                number_of_overflows = 0;
 45c:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <number_of_overflows.2259+0x1>
 460:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <number_of_overflows.2259>
                distFront = (float)lenFront * 0.017 * 16.0; // 16 us
 464:	60 91 af 01 	lds	r22, 0x01AF	; 0x8001af <lenFront.2260>
 468:	70 91 b0 01 	lds	r23, 0x01B0	; 0x8001b0 <lenFront.2260+0x1>
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatunsisf>
 474:	26 e9       	ldi	r18, 0x96	; 150
 476:	33 e4       	ldi	r19, 0x43	; 67
 478:	4b e8       	ldi	r20, 0x8B	; 139
 47a:	5c e3       	ldi	r21, 0x3C	; 60
 47c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__mulsf3>
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 e8       	ldi	r20, 0x80	; 128
 486:	51 e4       	ldi	r21, 0x41	; 65
 488:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__mulsf3>
 48c:	60 93 b9 01 	sts	0x01B9, r22	; 0x8001b9 <distFront>
 490:	70 93 ba 01 	sts	0x01BA, r23	; 0x8001ba <distFront+0x1>
 494:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <distFront+0x2>
 498:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <distFront+0x3>
                distBack = (float)lenBack * 0.017 * 16.0;
 49c:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <lenBack.2261>
 4a0:	70 91 ae 01 	lds	r23, 0x01AE	; 0x8001ae <lenBack.2261+0x1>
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatunsisf>
 4ac:	26 e9       	ldi	r18, 0x96	; 150
 4ae:	33 e4       	ldi	r19, 0x43	; 67
 4b0:	4b e8       	ldi	r20, 0x8B	; 139
 4b2:	5c e3       	ldi	r21, 0x3C	; 60
 4b4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__mulsf3>
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	40 e8       	ldi	r20, 0x80	; 128
 4be:	51 e4       	ldi	r21, 0x41	; 65
 4c0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__mulsf3>
 4c4:	60 93 b5 01 	sts	0x01B5, r22	; 0x8001b5 <distBack>
 4c8:	70 93 b6 01 	sts	0x01B6, r23	; 0x8001b6 <distBack+0x1>
 4cc:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <distBack+0x2>
 4d0:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <distBack+0x3>
                lenFront = 0;
 4d4:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <lenFront.2260+0x1>
 4d8:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <lenFront.2260>
                lenBack = 0;
 4dc:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <lenBack.2261+0x1>
 4e0:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <lenBack.2261>
                state = STATE_TRIG;
 4e4:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <state.2262>
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
            } 
            
            break;   
            
        default:
            state=STATE_TRIG;        
 4ea:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <state.2262>
    }
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__vector_9>:
        TIM2_overflow_interrupt_disable();
    }
}

ISR(TIMER2_OVF_vect)
{
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
    //GPIO_toggle(&PORTC, speaker);
    static uint8_t counter = 0;
    counter++;
 532:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <counter.2278>
 536:	8f 5f       	subi	r24, 0xFF	; 255
 538:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <counter.2278>

    GPIO_toggle(&PORTC, speaker);
 53c:	65 e0       	ldi	r22, 0x05	; 5
 53e:	88 e2       	ldi	r24, 0x28	; 40
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>

    if(counter >= TIM2_off)
 546:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <counter.2278>
 54a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <TIM2_off>
 54e:	98 17       	cp	r25, r24
 550:	38 f0       	brcs	.+14     	; 0x560 <__vector_9+0x50>
    {
        TIM2_overflow_interrupt_disable();
 552:	e0 e7       	ldi	r30, 0x70	; 112
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	8e 7f       	andi	r24, 0xFE	; 254
 55a:	80 83       	st	Z, r24
        counter = 0;
 55c:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <counter.2278>
    }
}
 560:	ff 91       	pop	r31
 562:	ef 91       	pop	r30
 564:	bf 91       	pop	r27
 566:	af 91       	pop	r26
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	7f 91       	pop	r23
 56e:	6f 91       	pop	r22
 570:	5f 91       	pop	r21
 572:	4f 91       	pop	r20
 574:	3f 91       	pop	r19
 576:	2f 91       	pop	r18
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <lcd_clear>:

// clears LCD
void lcd_clear(uint8_t pos)
{
    lcd_gotoxy(7, pos);
 582:	68 2f       	mov	r22, r24
 584:	87 e0       	ldi	r24, 0x07	; 7
 586:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("                ");   // clear all 16 symbols in a row
 58a:	83 e3       	ldi	r24, 0x33	; 51
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
 592:	08 95       	ret

00000594 <displayResult>:
}

// displays result on LCD, uart
void displayResult(volatile float DistanceFront, volatile float DistanceBack)
{    
 594:	cf 92       	push	r12
 596:	df 92       	push	r13
 598:	ef 92       	push	r14
 59a:	ff 92       	push	r15
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
 5a6:	2d 97       	sbiw	r28, 0x0d	; 13
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	f8 94       	cli
 5ac:	de bf       	out	0x3e, r29	; 62
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	cd bf       	out	0x3d, r28	; 61
 5b2:	6e 83       	std	Y+6, r22	; 0x06
 5b4:	7f 83       	std	Y+7, r23	; 0x07
 5b6:	88 87       	std	Y+8, r24	; 0x08
 5b8:	99 87       	std	Y+9, r25	; 0x09
 5ba:	2a 87       	std	Y+10, r18	; 0x0a
 5bc:	3b 87       	std	Y+11, r19	; 0x0b
 5be:	4c 87       	std	Y+12, r20	; 0x0c
 5c0:	5d 87       	std	Y+13, r21	; 0x0d
    static float dist = 0.0, diffFront = 0.0, diffBack = 0.0;
    uint8_t pos = 0;
    char side[5]= "Front"; 
 5c2:	85 e0       	ldi	r24, 0x05	; 5
 5c4:	e0 e0       	ldi	r30, 0x00	; 0
 5c6:	f1 e0       	ldi	r31, 0x01	; 1
 5c8:	de 01       	movw	r26, r28
 5ca:	11 96       	adiw	r26, 0x01	; 1
 5cc:	01 90       	ld	r0, Z+
 5ce:	0d 92       	st	X+, r0
 5d0:	8a 95       	dec	r24
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <displayResult+0x38>
    bool changed = false;  
    
    // if one distance changed
     if (diffFront != DistanceFront)
 5d4:	2e 81       	ldd	r18, Y+6	; 0x06
 5d6:	3f 81       	ldd	r19, Y+7	; 0x07
 5d8:	48 85       	ldd	r20, Y+8	; 0x08
 5da:	59 85       	ldd	r21, Y+9	; 0x09
 5dc:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <diffFront.2287>
 5e0:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <diffFront.2287+0x1>
 5e4:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <diffFront.2287+0x2>
 5e8:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <diffFront.2287+0x3>
 5ec:	0e 94 c4 05 	call	0xb88	; 0xb88 <__cmpsf2>
 5f0:	88 23       	and	r24, r24
 5f2:	09 f4       	brne	.+2      	; 0x5f6 <displayResult+0x62>
 5f4:	f4 c0       	rjmp	.+488    	; 0x7de <displayResult+0x24a>
    {	
        pos = 0;
        diffFront = DistanceFront;
 5f6:	8e 81       	ldd	r24, Y+6	; 0x06
 5f8:	9f 81       	ldd	r25, Y+7	; 0x07
 5fa:	a8 85       	ldd	r26, Y+8	; 0x08
 5fc:	b9 85       	ldd	r27, Y+9	; 0x09
 5fe:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <diffFront.2287>
 602:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <diffFront.2287+0x1>
 606:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <diffFront.2287+0x2>
 60a:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <diffFront.2287+0x3>
        dist = DistanceFront;
 60e:	8e 81       	ldd	r24, Y+6	; 0x06
 610:	9f 81       	ldd	r25, Y+7	; 0x07
 612:	a8 85       	ldd	r26, Y+8	; 0x08
 614:	b9 85       	ldd	r27, Y+9	; 0x09
 616:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <dist.2286>
 61a:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <dist.2286+0x1>
 61e:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <dist.2286+0x2>
 622:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <dist.2286+0x3>
        strcpy(side, "Front");  // for assigning to array type
 626:	86 e0       	ldi	r24, 0x06	; 6
 628:	e0 e0       	ldi	r30, 0x00	; 0
 62a:	f1 e0       	ldi	r31, 0x01	; 1
 62c:	de 01       	movw	r26, r28
 62e:	11 96       	adiw	r26, 0x01	; 1
 630:	01 90       	ld	r0, Z+
 632:	0d 92       	st	X+, r0
 634:	8a 95       	dec	r24
 636:	e1 f7       	brne	.-8      	; 0x630 <displayResult+0x9c>
        changed = true;
    }
    if (diffBack != DistanceBack)
 638:	2a 85       	ldd	r18, Y+10	; 0x0a
 63a:	3b 85       	ldd	r19, Y+11	; 0x0b
 63c:	4c 85       	ldd	r20, Y+12	; 0x0c
 63e:	5d 85       	ldd	r21, Y+13	; 0x0d
 640:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end>
 644:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x1>
 648:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end+0x2>
 64c:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x3>
 650:	0e 94 c4 05 	call	0xb88	; 0xb88 <__cmpsf2>
 654:	88 23       	and	r24, r24
 656:	19 f1       	breq	.+70     	; 0x69e <displayResult+0x10a>
    {  
        pos = 1;
        diffBack = DistanceBack;
 658:	8a 85       	ldd	r24, Y+10	; 0x0a
 65a:	9b 85       	ldd	r25, Y+11	; 0x0b
 65c:	ac 85       	ldd	r26, Y+12	; 0x0c
 65e:	bd 85       	ldd	r27, Y+13	; 0x0d
 660:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
 664:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
 668:	a0 93 a0 01 	sts	0x01A0, r26	; 0x8001a0 <__data_end+0x2>
 66c:	b0 93 a1 01 	sts	0x01A1, r27	; 0x8001a1 <__data_end+0x3>
        dist = DistanceBack;
 670:	8a 85       	ldd	r24, Y+10	; 0x0a
 672:	9b 85       	ldd	r25, Y+11	; 0x0b
 674:	ac 85       	ldd	r26, Y+12	; 0x0c
 676:	bd 85       	ldd	r27, Y+13	; 0x0d
 678:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <dist.2286>
 67c:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <dist.2286+0x1>
 680:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <dist.2286+0x2>
 684:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <dist.2286+0x3>
        strcpy(side, "Back");
 688:	85 e0       	ldi	r24, 0x05	; 5
 68a:	e8 e9       	ldi	r30, 0x98	; 152
 68c:	f1 e0       	ldi	r31, 0x01	; 1
 68e:	de 01       	movw	r26, r28
 690:	11 96       	adiw	r26, 0x01	; 1
 692:	01 90       	ld	r0, Z+
 694:	0d 92       	st	X+, r0
 696:	8a 95       	dec	r24
 698:	e1 f7       	brne	.-8      	; 0x692 <displayResult+0xfe>
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
    {  
        pos = 1;
 69a:	11 e0       	ldi	r17, 0x01	; 1
 69c:	01 c0       	rjmp	.+2      	; 0x6a0 <displayResult+0x10c>
        diffFront = DistanceFront;
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
 69e:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 6a0:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <dist.2286>
 6a4:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <dist.2286+0x1>
 6a8:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <dist.2286+0x2>
 6ac:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <dist.2286+0x3>
 6b0:	0e 94 c9 05 	call	0xb92	; 0xb92 <__fixsfsi>
 6b4:	dc 01       	movw	r26, r24
 6b6:	cb 01       	movw	r24, r22
 6b8:	4a e0       	ldi	r20, 0x0A	; 10
 6ba:	62 e0       	ldi	r22, 0x02	; 2
 6bc:	72 e0       	ldi	r23, 0x02	; 2
 6be:	0e 94 23 07 	call	0xe46	; 0xe46 <__itoa_ncheck>
        itoa(dist, lcd_string, 10);
        //sprintf(lcd_string, "%0.2f", dist);
        
    
	    // Write result on LCD screen
	    if(dist < 2)  // Distance smaller than minimum possible
 6c2:	c0 90 a2 01 	lds	r12, 0x01A2	; 0x8001a2 <dist.2286>
 6c6:	d0 90 a3 01 	lds	r13, 0x01A3	; 0x8001a3 <dist.2286+0x1>
 6ca:	e0 90 a4 01 	lds	r14, 0x01A4	; 0x8001a4 <dist.2286+0x2>
 6ce:	f0 90 a5 01 	lds	r15, 0x01A5	; 0x8001a5 <dist.2286+0x3>
 6d2:	20 e0       	ldi	r18, 0x00	; 0
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	50 e4       	ldi	r21, 0x40	; 64
 6da:	c7 01       	movw	r24, r14
 6dc:	b6 01       	movw	r22, r12
 6de:	0e 94 c4 05 	call	0xb88	; 0xb88 <__cmpsf2>
 6e2:	88 23       	and	r24, r24
 6e4:	c4 f4       	brge	.+48     	; 0x716 <displayResult+0x182>
	    {
		    lcd_clear(pos);
 6e6:	81 2f       	mov	r24, r17
 6e8:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_clear>
		    lcd_gotoxy(7, pos);                                   
 6ec:	61 2f       	mov	r22, r17
 6ee:	87 e0       	ldi	r24, 0x07	; 7
 6f0:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts("<2 cm");
 6f4:	84 e4       	ldi	r24, 0x44	; 68
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
			
            uart_puts(side);		    
 6fc:	ce 01       	movw	r24, r28
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
		    uart_puts(" object too close.");
 704:	8a e4       	ldi	r24, 0x4A	; 74
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
		    uart_puts("\n");   
 70c:	81 e3       	ldi	r24, 0x31	; 49
 70e:	91 e0       	ldi	r25, 0x01	; 1
 710:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
 714:	74 c0       	rjmp	.+232    	; 0x7fe <displayResult+0x26a>
	    }
	    else if(dist <= 400)
 716:	20 e0       	ldi	r18, 0x00	; 0
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	48 ec       	ldi	r20, 0xC8	; 200
 71c:	53 e4       	ldi	r21, 0x43	; 67
 71e:	c7 01       	movw	r24, r14
 720:	b6 01       	movw	r22, r12
 722:	0e 94 c4 05 	call	0xb88	; 0xb88 <__cmpsf2>
 726:	18 16       	cp	r1, r24
 728:	24 f1       	brlt	.+72     	; 0x772 <displayResult+0x1de>
	    {
		    lcd_clear(pos);
 72a:	81 2f       	mov	r24, r17
 72c:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_clear>
		    lcd_gotoxy(8, pos);		    
 730:	61 2f       	mov	r22, r17
 732:	88 e0       	ldi	r24, 0x08	; 8
 734:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(lcd_string);
 738:	82 e0       	ldi	r24, 0x02	; 2
 73a:	92 e0       	ldi	r25, 0x02	; 2
 73c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
            lcd_puts("  cm");                       
 740:	8d e5       	ldi	r24, 0x5D	; 93
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
			
            uart_puts(side);		    
 748:	ce 01       	movw	r24, r28
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
		    uart_puts(" distance: ");
 750:	82 e6       	ldi	r24, 0x62	; 98
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
		    uart_puts(lcd_string);
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	92 e0       	ldi	r25, 0x02	; 2
 75c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
            uart_puts("  cm");
 760:	8d e5       	ldi	r24, 0x5D	; 93
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
		    uart_puts("\n");    
 768:	81 e3       	ldi	r24, 0x31	; 49
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
 770:	46 c0       	rjmp	.+140    	; 0x7fe <displayResult+0x26a>
	    }
	    else if(dist > 400)   // Distance greater than maximum possible
 772:	20 e0       	ldi	r18, 0x00	; 0
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	48 ec       	ldi	r20, 0xC8	; 200
 778:	53 e4       	ldi	r21, 0x43	; 67
 77a:	c7 01       	movw	r24, r14
 77c:	b6 01       	movw	r22, r12
 77e:	0e 94 89 06 	call	0xd12	; 0xd12 <__gesf2>
 782:	18 16       	cp	r1, r24
 784:	c4 f4       	brge	.+48     	; 0x7b6 <displayResult+0x222>
	    {
		    lcd_clear(pos);
 786:	81 2f       	mov	r24, r17
 788:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_clear>
		    lcd_gotoxy(7, pos);
 78c:	61 2f       	mov	r22, r17
 78e:	87 e0       	ldi	r24, 0x07	; 7
 790:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(">400 cm");
 794:	8e e6       	ldi	r24, 0x6E	; 110
 796:	91 e0       	ldi	r25, 0x01	; 1
 798:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
					    
            uart_puts(side);
 79c:	ce 01       	movw	r24, r28
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
		    uart_puts(" object too far.");     
 7a4:	86 e7       	ldi	r24, 0x76	; 118
 7a6:	91 e0       	ldi	r25, 0x01	; 1
 7a8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
		    uart_puts("\n"); 
 7ac:	81 e3       	ldi	r24, 0x31	; 49
 7ae:	91 e0       	ldi	r25, 0x01	; 1
 7b0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
 7b4:	24 c0       	rjmp	.+72     	; 0x7fe <displayResult+0x26a>
	    }
	    else
	    {
		    lcd_clear(pos);
 7b6:	81 2f       	mov	r24, r17
 7b8:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_clear>
		    lcd_gotoxy(0, pos);
 7bc:	61 2f       	mov	r22, r17
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts("Somethings wrong");
 7c4:	87 e8       	ldi	r24, 0x87	; 135
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
					    
		    uart_puts("Somethings wrong");
 7cc:	87 e8       	ldi	r24, 0x87	; 135
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
		    uart_puts("\n"); 
 7d4:	81 e3       	ldi	r24, 0x31	; 49
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts>
	    }          
    }             
 7dc:	10 c0       	rjmp	.+32     	; 0x7fe <displayResult+0x26a>
        diffFront = DistanceFront;
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
 7de:	2a 85       	ldd	r18, Y+10	; 0x0a
 7e0:	3b 85       	ldd	r19, Y+11	; 0x0b
 7e2:	4c 85       	ldd	r20, Y+12	; 0x0c
 7e4:	5d 85       	ldd	r21, Y+13	; 0x0d
 7e6:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end>
 7ea:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x1>
 7ee:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end+0x2>
 7f2:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x3>
 7f6:	0e 94 c4 05 	call	0xb88	; 0xb88 <__cmpsf2>
 7fa:	81 11       	cpse	r24, r1
 7fc:	2d cf       	rjmp	.-422    	; 0x658 <displayResult+0xc4>
					    
		    uart_puts("Somethings wrong");
		    uart_puts("\n"); 
	    }          
    }             
 7fe:	2d 96       	adiw	r28, 0x0d	; 13
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	f8 94       	cli
 804:	de bf       	out	0x3e, r29	; 62
 806:	0f be       	out	0x3f, r0	; 63
 808:	cd bf       	out	0x3d, r28	; 61
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	1f 91       	pop	r17
 810:	ff 90       	pop	r15
 812:	ef 90       	pop	r14
 814:	df 90       	pop	r13
 816:	cf 90       	pop	r12
 818:	08 95       	ret

0000081a <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows.
 * 
 */
ISR(TIMER1_OVF_vect)
{
 81a:	1f 92       	push	r1
 81c:	0f 92       	push	r0
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	0f 92       	push	r0
 822:	11 24       	eor	r1, r1
 824:	2f 93       	push	r18
 826:	3f 93       	push	r19
 828:	4f 93       	push	r20
 82a:	5f 93       	push	r21
 82c:	6f 93       	push	r22
 82e:	7f 93       	push	r23
 830:	8f 93       	push	r24
 832:	9f 93       	push	r25
 834:	af 93       	push	r26
 836:	bf 93       	push	r27
 838:	ef 93       	push	r30
 83a:	ff 93       	push	r31
    TIM2_overflow_4ms();
 83c:	e1 eb       	ldi	r30, 0xB1	; 177
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	8e 7f       	andi	r24, 0xFE	; 254
 844:	80 83       	st	Z, r24
 846:	80 81       	ld	r24, Z
 848:	86 60       	ori	r24, 0x06	; 6
 84a:	80 83       	st	Z, r24
    static uint16_t smallerDist = 0;
    
    // Display on LCD, uart
    displayResult(distFront, distBack);
 84c:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <distBack>
 850:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <distBack+0x1>
 854:	40 91 b7 01 	lds	r20, 0x01B7	; 0x8001b7 <distBack+0x2>
 858:	50 91 b8 01 	lds	r21, 0x01B8	; 0x8001b8 <distBack+0x3>
 85c:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <distFront>
 860:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <distFront+0x1>
 864:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <distFront+0x2>
 868:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <distFront+0x3>
 86c:	0e 94 ca 02 	call	0x594	; 0x594 <displayResult>
    
    if(distFront < distBack)
 870:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <distFront>
 874:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <distFront+0x1>
 878:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <distFront+0x2>
 87c:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <distFront+0x3>
 880:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <distBack>
 884:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <distBack+0x1>
 888:	40 91 b7 01 	lds	r20, 0x01B7	; 0x8001b7 <distBack+0x2>
 88c:	50 91 b8 01 	lds	r21, 0x01B8	; 0x8001b8 <distBack+0x3>
 890:	0e 94 c4 05 	call	0xb88	; 0xb88 <__cmpsf2>
 894:	88 23       	and	r24, r24
 896:	7c f4       	brge	.+30     	; 0x8b6 <__vector_13+0x9c>
    {
        smallerDist = distFront;
 898:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <distFront>
 89c:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <distFront+0x1>
 8a0:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <distFront+0x2>
 8a4:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <distFront+0x3>
 8a8:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fixunssfsi>
 8ac:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <smallerDist.2272+0x1>
 8b0:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <smallerDist.2272>
 8b4:	0e c0       	rjmp	.+28     	; 0x8d2 <__vector_13+0xb8>
    }
    else
    {
        smallerDist = distBack;
 8b6:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <distBack>
 8ba:	70 91 b6 01 	lds	r23, 0x01B6	; 0x8001b6 <distBack+0x1>
 8be:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <distBack+0x2>
 8c2:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <distBack+0x3>
 8c6:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fixunssfsi>
 8ca:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <smallerDist.2272+0x1>
 8ce:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <smallerDist.2272>
    }
            
    // Display on LEDs, 
    // change frequency of speaker tone with TIM2 prescaler
    // change frequency of disabling TIM2        
    if(smallerDist <= 15)
 8d2:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <smallerDist.2272>
 8d6:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <smallerDist.2272+0x1>
 8da:	80 31       	cpi	r24, 0x10	; 16
 8dc:	91 05       	cpc	r25, r1
 8de:	28 f5       	brcc	.+74     	; 0x92a <__stack+0x2b>
    {
        GPIO_write_high(&PORTC, LED1);
 8e0:	61 e0       	ldi	r22, 0x01	; 1
 8e2:	88 e2       	ldi	r24, 0x28	; 40
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED2);
 8ea:	62 e0       	ldi	r22, 0x02	; 2
 8ec:	88 e2       	ldi	r24, 0x28	; 40
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED3);
 8f4:	63 e0       	ldi	r22, 0x03	; 3
 8f6:	88 e2       	ldi	r24, 0x28	; 40
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED4);
 8fe:	64 e0       	ldi	r22, 0x04	; 4
 900:	88 e2       	ldi	r24, 0x28	; 40
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        
        TIM2_off = 200;
 908:	88 ec       	ldi	r24, 0xC8	; 200
 90a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <TIM2_off>
        TIM2_overflow_2ms();    
 90e:	e1 eb       	ldi	r30, 0xB1	; 177
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	8d 7f       	andi	r24, 0xFD	; 253
 916:	80 83       	st	Z, r24
 918:	80 81       	ld	r24, Z
 91a:	85 60       	ori	r24, 0x05	; 5
 91c:	80 83       	st	Z, r24
        TIM2_overflow_interrupt_enable();    
 91e:	e0 e7       	ldi	r30, 0x70	; 112
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	81 60       	ori	r24, 0x01	; 1
 926:	80 83       	st	Z, r24
 928:	89 c0       	rjmp	.+274    	; 0xa3c <__stack+0x13d>
    }
    else if(smallerDist <= 50)
 92a:	83 33       	cpi	r24, 0x33	; 51
 92c:	91 05       	cpc	r25, r1
 92e:	28 f5       	brcc	.+74     	; 0x97a <__stack+0x7b>
    {
        GPIO_write_high(&PORTC, LED1);
 930:	61 e0       	ldi	r22, 0x01	; 1
 932:	88 e2       	ldi	r24, 0x28	; 40
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED2);
 93a:	62 e0       	ldi	r22, 0x02	; 2
 93c:	88 e2       	ldi	r24, 0x28	; 40
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED3);
 944:	63 e0       	ldi	r22, 0x03	; 3
 946:	88 e2       	ldi	r24, 0x28	; 40
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTC, LED4);
 94e:	64 e0       	ldi	r22, 0x04	; 4
 950:	88 e2       	ldi	r24, 0x28	; 40
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        TIM2_off = 50;
 958:	82 e3       	ldi	r24, 0x32	; 50
 95a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <TIM2_off>
        TIM2_overflow_4ms();
 95e:	e1 eb       	ldi	r30, 0xB1	; 177
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	8e 7f       	andi	r24, 0xFE	; 254
 966:	80 83       	st	Z, r24
 968:	80 81       	ld	r24, Z
 96a:	86 60       	ori	r24, 0x06	; 6
 96c:	80 83       	st	Z, r24
        TIM2_overflow_interrupt_enable();   
 96e:	e0 e7       	ldi	r30, 0x70	; 112
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	80 81       	ld	r24, Z
 974:	81 60       	ori	r24, 0x01	; 1
 976:	80 83       	st	Z, r24
 978:	61 c0       	rjmp	.+194    	; 0xa3c <__stack+0x13d>
    }
    else if(smallerDist <= 100)
 97a:	85 36       	cpi	r24, 0x65	; 101
 97c:	91 05       	cpc	r25, r1
 97e:	28 f5       	brcc	.+74     	; 0x9ca <__stack+0xcb>
    {
        GPIO_write_high(&PORTC, LED1);
 980:	61 e0       	ldi	r22, 0x01	; 1
 982:	88 e2       	ldi	r24, 0x28	; 40
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED2);
 98a:	62 e0       	ldi	r22, 0x02	; 2
 98c:	88 e2       	ldi	r24, 0x28	; 40
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTC, LED3);
 994:	63 e0       	ldi	r22, 0x03	; 3
 996:	88 e2       	ldi	r24, 0x28	; 40
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED4);
 99e:	64 e0       	ldi	r22, 0x04	; 4
 9a0:	88 e2       	ldi	r24, 0x28	; 40
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        TIM2_off = 10;
 9a8:	8a e0       	ldi	r24, 0x0A	; 10
 9aa:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <TIM2_off>
        TIM2_overflow_4ms();
 9ae:	e1 eb       	ldi	r30, 0xB1	; 177
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	8e 7f       	andi	r24, 0xFE	; 254
 9b6:	80 83       	st	Z, r24
 9b8:	80 81       	ld	r24, Z
 9ba:	86 60       	ori	r24, 0x06	; 6
 9bc:	80 83       	st	Z, r24
        TIM2_overflow_interrupt_enable();   
 9be:	e0 e7       	ldi	r30, 0x70	; 112
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	81 60       	ori	r24, 0x01	; 1
 9c6:	80 83       	st	Z, r24
 9c8:	39 c0       	rjmp	.+114    	; 0xa3c <__stack+0x13d>
    }
    else if(smallerDist <= 125)
 9ca:	8e 37       	cpi	r24, 0x7E	; 126
 9cc:	91 05       	cpc	r25, r1
 9ce:	e8 f4       	brcc	.+58     	; 0xa0a <__stack+0x10b>
    {
        GPIO_write_high(&PORTC, LED1);
 9d0:	61 e0       	ldi	r22, 0x01	; 1
 9d2:	88 e2       	ldi	r24, 0x28	; 40
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTC, LED2);
 9da:	62 e0       	ldi	r22, 0x02	; 2
 9dc:	88 e2       	ldi	r24, 0x28	; 40
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED3);
 9e4:	63 e0       	ldi	r22, 0x03	; 3
 9e6:	88 e2       	ldi	r24, 0x28	; 40
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED4);
 9ee:	64 e0       	ldi	r22, 0x04	; 4
 9f0:	88 e2       	ldi	r24, 0x28	; 40
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        TIM2_off = 5;
 9f8:	85 e0       	ldi	r24, 0x05	; 5
 9fa:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <TIM2_off>
        TIM2_overflow_interrupt_enable();  
 9fe:	e0 e7       	ldi	r30, 0x70	; 112
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	80 81       	ld	r24, Z
 a04:	81 60       	ori	r24, 0x01	; 1
 a06:	80 83       	st	Z, r24
 a08:	19 c0       	rjmp	.+50     	; 0xa3c <__stack+0x13d>
    }
    else
    {
        GPIO_write_low(&PORTC, LED1);
 a0a:	61 e0       	ldi	r22, 0x01	; 1
 a0c:	88 e2       	ldi	r24, 0x28	; 40
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED2);
 a14:	62 e0       	ldi	r22, 0x02	; 2
 a16:	88 e2       	ldi	r24, 0x28	; 40
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED3);
 a1e:	63 e0       	ldi	r22, 0x03	; 3
 a20:	88 e2       	ldi	r24, 0x28	; 40
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED4);
 a28:	64 e0       	ldi	r22, 0x04	; 4
 a2a:	88 e2       	ldi	r24, 0x28	; 40
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        TIM2_overflow_interrupt_disable();
 a32:	e0 e7       	ldi	r30, 0x70	; 112
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	80 81       	ld	r24, Z
 a38:	8e 7f       	andi	r24, 0xFE	; 254
 a3a:	80 83       	st	Z, r24
    }
}
 a3c:	ff 91       	pop	r31
 a3e:	ef 91       	pop	r30
 a40:	bf 91       	pop	r27
 a42:	af 91       	pop	r26
 a44:	9f 91       	pop	r25
 a46:	8f 91       	pop	r24
 a48:	7f 91       	pop	r23
 a4a:	6f 91       	pop	r22
 a4c:	5f 91       	pop	r21
 a4e:	4f 91       	pop	r20
 a50:	3f 91       	pop	r19
 a52:	2f 91       	pop	r18
 a54:	0f 90       	pop	r0
 a56:	0f be       	out	0x3f, r0	; 63
 a58:	0f 90       	pop	r0
 a5a:	1f 90       	pop	r1
 a5c:	18 95       	reti

00000a5e <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 a5e:	1f 92       	push	r1
 a60:	0f 92       	push	r0
 a62:	0f b6       	in	r0, 0x3f	; 63
 a64:	0f 92       	push	r0
 a66:	11 24       	eor	r1, r1
 a68:	2f 93       	push	r18
 a6a:	8f 93       	push	r24
 a6c:	9f 93       	push	r25
 a6e:	ef 93       	push	r30
 a70:	ff 93       	push	r31
 a72:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 a76:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 a7a:	8c 71       	andi	r24, 0x1C	; 28
 a7c:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <UART_RxHead>
 a80:	ef 5f       	subi	r30, 0xFF	; 255
 a82:	ef 71       	andi	r30, 0x1F	; 31
 a84:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <UART_RxTail>
 a88:	e9 17       	cp	r30, r25
 a8a:	39 f0       	breq	.+14     	; 0xa9a <__vector_18+0x3c>
 a8c:	e0 93 bf 01 	sts	0x01BF, r30	; 0x8001bf <UART_RxHead>
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	ee 53       	subi	r30, 0x3E	; 62
 a94:	fe 4f       	sbci	r31, 0xFE	; 254
 a96:	20 83       	st	Z, r18
 a98:	01 c0       	rjmp	.+2      	; 0xa9c <__vector_18+0x3e>
 a9a:	82 e0       	ldi	r24, 0x02	; 2
 a9c:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <UART_LastRxError>
 aa0:	89 2b       	or	r24, r25
 aa2:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <UART_LastRxError>
 aa6:	ff 91       	pop	r31
 aa8:	ef 91       	pop	r30
 aaa:	9f 91       	pop	r25
 aac:	8f 91       	pop	r24
 aae:	2f 91       	pop	r18
 ab0:	0f 90       	pop	r0
 ab2:	0f be       	out	0x3f, r0	; 63
 ab4:	0f 90       	pop	r0
 ab6:	1f 90       	pop	r1
 ab8:	18 95       	reti

00000aba <__vector_19>:
 aba:	1f 92       	push	r1
 abc:	0f 92       	push	r0
 abe:	0f b6       	in	r0, 0x3f	; 63
 ac0:	0f 92       	push	r0
 ac2:	11 24       	eor	r1, r1
 ac4:	8f 93       	push	r24
 ac6:	9f 93       	push	r25
 ac8:	ef 93       	push	r30
 aca:	ff 93       	push	r31
 acc:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <UART_TxHead>
 ad0:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <UART_TxTail>
 ad4:	98 17       	cp	r25, r24
 ad6:	69 f0       	breq	.+26     	; 0xaf2 <__vector_19+0x38>
 ad8:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <UART_TxTail>
 adc:	ef 5f       	subi	r30, 0xFF	; 255
 ade:	ef 71       	andi	r30, 0x1F	; 31
 ae0:	e0 93 c0 01 	sts	0x01C0, r30	; 0x8001c0 <UART_TxTail>
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	ee 51       	subi	r30, 0x1E	; 30
 ae8:	fe 4f       	sbci	r31, 0xFE	; 254
 aea:	80 81       	ld	r24, Z
 aec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 af0:	05 c0       	rjmp	.+10     	; 0xafc <__vector_19+0x42>
 af2:	e1 ec       	ldi	r30, 0xC1	; 193
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	80 81       	ld	r24, Z
 af8:	8f 7d       	andi	r24, 0xDF	; 223
 afa:	80 83       	st	Z, r24
 afc:	ff 91       	pop	r31
 afe:	ef 91       	pop	r30
 b00:	9f 91       	pop	r25
 b02:	8f 91       	pop	r24
 b04:	0f 90       	pop	r0
 b06:	0f be       	out	0x3f, r0	; 63
 b08:	0f 90       	pop	r0
 b0a:	1f 90       	pop	r1
 b0c:	18 95       	reti

00000b0e <uart_init>:
 b0e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <UART_TxHead>
 b12:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <UART_TxTail>
 b16:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <UART_RxHead>
 b1a:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <UART_RxTail>
 b1e:	99 23       	and	r25, r25
 b20:	1c f4       	brge	.+6      	; 0xb28 <uart_init+0x1a>
 b22:	22 e0       	ldi	r18, 0x02	; 2
 b24:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 b28:	90 78       	andi	r25, 0x80	; 128
 b2a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 b2e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 b32:	88 e9       	ldi	r24, 0x98	; 152
 b34:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 b38:	86 e0       	ldi	r24, 0x06	; 6
 b3a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 b3e:	08 95       	ret

00000b40 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 b40:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <UART_TxHead>
 b44:	2f 5f       	subi	r18, 0xFF	; 255
 b46:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 b48:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <UART_TxTail>
 b4c:	29 17       	cp	r18, r25
 b4e:	e1 f3       	breq	.-8      	; 0xb48 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 b50:	e2 2f       	mov	r30, r18
 b52:	f0 e0       	ldi	r31, 0x00	; 0
 b54:	ee 51       	subi	r30, 0x1E	; 30
 b56:	fe 4f       	sbci	r31, 0xFE	; 254
 b58:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 b5a:	20 93 c1 01 	sts	0x01C1, r18	; 0x8001c1 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 b5e:	e1 ec       	ldi	r30, 0xC1	; 193
 b60:	f0 e0       	ldi	r31, 0x00	; 0
 b62:	80 81       	ld	r24, Z
 b64:	80 62       	ori	r24, 0x20	; 32
 b66:	80 83       	st	Z, r24
 b68:	08 95       	ret

00000b6a <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 b6a:	cf 93       	push	r28
 b6c:	df 93       	push	r29
 b6e:	ec 01       	movw	r28, r24
    while (*s)
 b70:	88 81       	ld	r24, Y
 b72:	88 23       	and	r24, r24
 b74:	31 f0       	breq	.+12     	; 0xb82 <uart_puts+0x18>
 b76:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 b78:	0e 94 a0 05 	call	0xb40	; 0xb40 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 b7c:	89 91       	ld	r24, Y+
 b7e:	81 11       	cpse	r24, r1
 b80:	fb cf       	rjmp	.-10     	; 0xb78 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 b82:	df 91       	pop	r29
 b84:	cf 91       	pop	r28
 b86:	08 95       	ret

00000b88 <__cmpsf2>:
 b88:	0e 94 3c 06 	call	0xc78	; 0xc78 <__fp_cmp>
 b8c:	08 f4       	brcc	.+2      	; 0xb90 <__cmpsf2+0x8>
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	08 95       	ret

00000b92 <__fixsfsi>:
 b92:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fixunssfsi>
 b96:	68 94       	set
 b98:	b1 11       	cpse	r27, r1
 b9a:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_szero>
 b9e:	08 95       	ret

00000ba0 <__fixunssfsi>:
 ba0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fp_splitA>
 ba4:	88 f0       	brcs	.+34     	; 0xbc8 <__fixunssfsi+0x28>
 ba6:	9f 57       	subi	r25, 0x7F	; 127
 ba8:	98 f0       	brcs	.+38     	; 0xbd0 <__fixunssfsi+0x30>
 baa:	b9 2f       	mov	r27, r25
 bac:	99 27       	eor	r25, r25
 bae:	b7 51       	subi	r27, 0x17	; 23
 bb0:	b0 f0       	brcs	.+44     	; 0xbde <__fixunssfsi+0x3e>
 bb2:	e1 f0       	breq	.+56     	; 0xbec <__fixunssfsi+0x4c>
 bb4:	66 0f       	add	r22, r22
 bb6:	77 1f       	adc	r23, r23
 bb8:	88 1f       	adc	r24, r24
 bba:	99 1f       	adc	r25, r25
 bbc:	1a f0       	brmi	.+6      	; 0xbc4 <__fixunssfsi+0x24>
 bbe:	ba 95       	dec	r27
 bc0:	c9 f7       	brne	.-14     	; 0xbb4 <__fixunssfsi+0x14>
 bc2:	14 c0       	rjmp	.+40     	; 0xbec <__fixunssfsi+0x4c>
 bc4:	b1 30       	cpi	r27, 0x01	; 1
 bc6:	91 f0       	breq	.+36     	; 0xbec <__fixunssfsi+0x4c>
 bc8:	0e 94 82 06 	call	0xd04	; 0xd04 <__fp_zero>
 bcc:	b1 e0       	ldi	r27, 0x01	; 1
 bce:	08 95       	ret
 bd0:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_zero>
 bd4:	67 2f       	mov	r22, r23
 bd6:	78 2f       	mov	r23, r24
 bd8:	88 27       	eor	r24, r24
 bda:	b8 5f       	subi	r27, 0xF8	; 248
 bdc:	39 f0       	breq	.+14     	; 0xbec <__fixunssfsi+0x4c>
 bde:	b9 3f       	cpi	r27, 0xF9	; 249
 be0:	cc f3       	brlt	.-14     	; 0xbd4 <__fixunssfsi+0x34>
 be2:	86 95       	lsr	r24
 be4:	77 95       	ror	r23
 be6:	67 95       	ror	r22
 be8:	b3 95       	inc	r27
 bea:	d9 f7       	brne	.-10     	; 0xbe2 <__fixunssfsi+0x42>
 bec:	3e f4       	brtc	.+14     	; 0xbfc <__fixunssfsi+0x5c>
 bee:	90 95       	com	r25
 bf0:	80 95       	com	r24
 bf2:	70 95       	com	r23
 bf4:	61 95       	neg	r22
 bf6:	7f 4f       	sbci	r23, 0xFF	; 255
 bf8:	8f 4f       	sbci	r24, 0xFF	; 255
 bfa:	9f 4f       	sbci	r25, 0xFF	; 255
 bfc:	08 95       	ret

00000bfe <__floatunsisf>:
 bfe:	e8 94       	clt
 c00:	09 c0       	rjmp	.+18     	; 0xc14 <__floatsisf+0x12>

00000c02 <__floatsisf>:
 c02:	97 fb       	bst	r25, 7
 c04:	3e f4       	brtc	.+14     	; 0xc14 <__floatsisf+0x12>
 c06:	90 95       	com	r25
 c08:	80 95       	com	r24
 c0a:	70 95       	com	r23
 c0c:	61 95       	neg	r22
 c0e:	7f 4f       	sbci	r23, 0xFF	; 255
 c10:	8f 4f       	sbci	r24, 0xFF	; 255
 c12:	9f 4f       	sbci	r25, 0xFF	; 255
 c14:	99 23       	and	r25, r25
 c16:	a9 f0       	breq	.+42     	; 0xc42 <__floatsisf+0x40>
 c18:	f9 2f       	mov	r31, r25
 c1a:	96 e9       	ldi	r25, 0x96	; 150
 c1c:	bb 27       	eor	r27, r27
 c1e:	93 95       	inc	r25
 c20:	f6 95       	lsr	r31
 c22:	87 95       	ror	r24
 c24:	77 95       	ror	r23
 c26:	67 95       	ror	r22
 c28:	b7 95       	ror	r27
 c2a:	f1 11       	cpse	r31, r1
 c2c:	f8 cf       	rjmp	.-16     	; 0xc1e <__floatsisf+0x1c>
 c2e:	fa f4       	brpl	.+62     	; 0xc6e <__floatsisf+0x6c>
 c30:	bb 0f       	add	r27, r27
 c32:	11 f4       	brne	.+4      	; 0xc38 <__floatsisf+0x36>
 c34:	60 ff       	sbrs	r22, 0
 c36:	1b c0       	rjmp	.+54     	; 0xc6e <__floatsisf+0x6c>
 c38:	6f 5f       	subi	r22, 0xFF	; 255
 c3a:	7f 4f       	sbci	r23, 0xFF	; 255
 c3c:	8f 4f       	sbci	r24, 0xFF	; 255
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	16 c0       	rjmp	.+44     	; 0xc6e <__floatsisf+0x6c>
 c42:	88 23       	and	r24, r24
 c44:	11 f0       	breq	.+4      	; 0xc4a <__floatsisf+0x48>
 c46:	96 e9       	ldi	r25, 0x96	; 150
 c48:	11 c0       	rjmp	.+34     	; 0xc6c <__floatsisf+0x6a>
 c4a:	77 23       	and	r23, r23
 c4c:	21 f0       	breq	.+8      	; 0xc56 <__floatsisf+0x54>
 c4e:	9e e8       	ldi	r25, 0x8E	; 142
 c50:	87 2f       	mov	r24, r23
 c52:	76 2f       	mov	r23, r22
 c54:	05 c0       	rjmp	.+10     	; 0xc60 <__floatsisf+0x5e>
 c56:	66 23       	and	r22, r22
 c58:	71 f0       	breq	.+28     	; 0xc76 <__floatsisf+0x74>
 c5a:	96 e8       	ldi	r25, 0x86	; 134
 c5c:	86 2f       	mov	r24, r22
 c5e:	70 e0       	ldi	r23, 0x00	; 0
 c60:	60 e0       	ldi	r22, 0x00	; 0
 c62:	2a f0       	brmi	.+10     	; 0xc6e <__floatsisf+0x6c>
 c64:	9a 95       	dec	r25
 c66:	66 0f       	add	r22, r22
 c68:	77 1f       	adc	r23, r23
 c6a:	88 1f       	adc	r24, r24
 c6c:	da f7       	brpl	.-10     	; 0xc64 <__floatsisf+0x62>
 c6e:	88 0f       	add	r24, r24
 c70:	96 95       	lsr	r25
 c72:	87 95       	ror	r24
 c74:	97 f9       	bld	r25, 7
 c76:	08 95       	ret

00000c78 <__fp_cmp>:
 c78:	99 0f       	add	r25, r25
 c7a:	00 08       	sbc	r0, r0
 c7c:	55 0f       	add	r21, r21
 c7e:	aa 0b       	sbc	r26, r26
 c80:	e0 e8       	ldi	r30, 0x80	; 128
 c82:	fe ef       	ldi	r31, 0xFE	; 254
 c84:	16 16       	cp	r1, r22
 c86:	17 06       	cpc	r1, r23
 c88:	e8 07       	cpc	r30, r24
 c8a:	f9 07       	cpc	r31, r25
 c8c:	c0 f0       	brcs	.+48     	; 0xcbe <__fp_cmp+0x46>
 c8e:	12 16       	cp	r1, r18
 c90:	13 06       	cpc	r1, r19
 c92:	e4 07       	cpc	r30, r20
 c94:	f5 07       	cpc	r31, r21
 c96:	98 f0       	brcs	.+38     	; 0xcbe <__fp_cmp+0x46>
 c98:	62 1b       	sub	r22, r18
 c9a:	73 0b       	sbc	r23, r19
 c9c:	84 0b       	sbc	r24, r20
 c9e:	95 0b       	sbc	r25, r21
 ca0:	39 f4       	brne	.+14     	; 0xcb0 <__fp_cmp+0x38>
 ca2:	0a 26       	eor	r0, r26
 ca4:	61 f0       	breq	.+24     	; 0xcbe <__fp_cmp+0x46>
 ca6:	23 2b       	or	r18, r19
 ca8:	24 2b       	or	r18, r20
 caa:	25 2b       	or	r18, r21
 cac:	21 f4       	brne	.+8      	; 0xcb6 <__fp_cmp+0x3e>
 cae:	08 95       	ret
 cb0:	0a 26       	eor	r0, r26
 cb2:	09 f4       	brne	.+2      	; 0xcb6 <__fp_cmp+0x3e>
 cb4:	a1 40       	sbci	r26, 0x01	; 1
 cb6:	a6 95       	lsr	r26
 cb8:	8f ef       	ldi	r24, 0xFF	; 255
 cba:	81 1d       	adc	r24, r1
 cbc:	81 1d       	adc	r24, r1
 cbe:	08 95       	ret

00000cc0 <__fp_split3>:
 cc0:	57 fd       	sbrc	r21, 7
 cc2:	90 58       	subi	r25, 0x80	; 128
 cc4:	44 0f       	add	r20, r20
 cc6:	55 1f       	adc	r21, r21
 cc8:	59 f0       	breq	.+22     	; 0xce0 <__fp_splitA+0x10>
 cca:	5f 3f       	cpi	r21, 0xFF	; 255
 ccc:	71 f0       	breq	.+28     	; 0xcea <__fp_splitA+0x1a>
 cce:	47 95       	ror	r20

00000cd0 <__fp_splitA>:
 cd0:	88 0f       	add	r24, r24
 cd2:	97 fb       	bst	r25, 7
 cd4:	99 1f       	adc	r25, r25
 cd6:	61 f0       	breq	.+24     	; 0xcf0 <__fp_splitA+0x20>
 cd8:	9f 3f       	cpi	r25, 0xFF	; 255
 cda:	79 f0       	breq	.+30     	; 0xcfa <__fp_splitA+0x2a>
 cdc:	87 95       	ror	r24
 cde:	08 95       	ret
 ce0:	12 16       	cp	r1, r18
 ce2:	13 06       	cpc	r1, r19
 ce4:	14 06       	cpc	r1, r20
 ce6:	55 1f       	adc	r21, r21
 ce8:	f2 cf       	rjmp	.-28     	; 0xcce <__fp_split3+0xe>
 cea:	46 95       	lsr	r20
 cec:	f1 df       	rcall	.-30     	; 0xcd0 <__fp_splitA>
 cee:	08 c0       	rjmp	.+16     	; 0xd00 <__fp_splitA+0x30>
 cf0:	16 16       	cp	r1, r22
 cf2:	17 06       	cpc	r1, r23
 cf4:	18 06       	cpc	r1, r24
 cf6:	99 1f       	adc	r25, r25
 cf8:	f1 cf       	rjmp	.-30     	; 0xcdc <__fp_splitA+0xc>
 cfa:	86 95       	lsr	r24
 cfc:	71 05       	cpc	r23, r1
 cfe:	61 05       	cpc	r22, r1
 d00:	08 94       	sec
 d02:	08 95       	ret

00000d04 <__fp_zero>:
 d04:	e8 94       	clt

00000d06 <__fp_szero>:
 d06:	bb 27       	eor	r27, r27
 d08:	66 27       	eor	r22, r22
 d0a:	77 27       	eor	r23, r23
 d0c:	cb 01       	movw	r24, r22
 d0e:	97 f9       	bld	r25, 7
 d10:	08 95       	ret

00000d12 <__gesf2>:
 d12:	0e 94 3c 06 	call	0xc78	; 0xc78 <__fp_cmp>
 d16:	08 f4       	brcc	.+2      	; 0xd1a <__gesf2+0x8>
 d18:	8f ef       	ldi	r24, 0xFF	; 255
 d1a:	08 95       	ret

00000d1c <__mulsf3>:
 d1c:	0e 94 a1 06 	call	0xd42	; 0xd42 <__mulsf3x>
 d20:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__fp_round>
 d24:	0e 94 04 07 	call	0xe08	; 0xe08 <__fp_pscA>
 d28:	38 f0       	brcs	.+14     	; 0xd38 <__mulsf3+0x1c>
 d2a:	0e 94 0b 07 	call	0xe16	; 0xe16 <__fp_pscB>
 d2e:	20 f0       	brcs	.+8      	; 0xd38 <__mulsf3+0x1c>
 d30:	95 23       	and	r25, r21
 d32:	11 f0       	breq	.+4      	; 0xd38 <__mulsf3+0x1c>
 d34:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__fp_inf>
 d38:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_nan>
 d3c:	11 24       	eor	r1, r1
 d3e:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_szero>

00000d42 <__mulsf3x>:
 d42:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_split3>
 d46:	70 f3       	brcs	.-36     	; 0xd24 <__mulsf3+0x8>

00000d48 <__mulsf3_pse>:
 d48:	95 9f       	mul	r25, r21
 d4a:	c1 f3       	breq	.-16     	; 0xd3c <__mulsf3+0x20>
 d4c:	95 0f       	add	r25, r21
 d4e:	50 e0       	ldi	r21, 0x00	; 0
 d50:	55 1f       	adc	r21, r21
 d52:	62 9f       	mul	r22, r18
 d54:	f0 01       	movw	r30, r0
 d56:	72 9f       	mul	r23, r18
 d58:	bb 27       	eor	r27, r27
 d5a:	f0 0d       	add	r31, r0
 d5c:	b1 1d       	adc	r27, r1
 d5e:	63 9f       	mul	r22, r19
 d60:	aa 27       	eor	r26, r26
 d62:	f0 0d       	add	r31, r0
 d64:	b1 1d       	adc	r27, r1
 d66:	aa 1f       	adc	r26, r26
 d68:	64 9f       	mul	r22, r20
 d6a:	66 27       	eor	r22, r22
 d6c:	b0 0d       	add	r27, r0
 d6e:	a1 1d       	adc	r26, r1
 d70:	66 1f       	adc	r22, r22
 d72:	82 9f       	mul	r24, r18
 d74:	22 27       	eor	r18, r18
 d76:	b0 0d       	add	r27, r0
 d78:	a1 1d       	adc	r26, r1
 d7a:	62 1f       	adc	r22, r18
 d7c:	73 9f       	mul	r23, r19
 d7e:	b0 0d       	add	r27, r0
 d80:	a1 1d       	adc	r26, r1
 d82:	62 1f       	adc	r22, r18
 d84:	83 9f       	mul	r24, r19
 d86:	a0 0d       	add	r26, r0
 d88:	61 1d       	adc	r22, r1
 d8a:	22 1f       	adc	r18, r18
 d8c:	74 9f       	mul	r23, r20
 d8e:	33 27       	eor	r19, r19
 d90:	a0 0d       	add	r26, r0
 d92:	61 1d       	adc	r22, r1
 d94:	23 1f       	adc	r18, r19
 d96:	84 9f       	mul	r24, r20
 d98:	60 0d       	add	r22, r0
 d9a:	21 1d       	adc	r18, r1
 d9c:	82 2f       	mov	r24, r18
 d9e:	76 2f       	mov	r23, r22
 da0:	6a 2f       	mov	r22, r26
 da2:	11 24       	eor	r1, r1
 da4:	9f 57       	subi	r25, 0x7F	; 127
 da6:	50 40       	sbci	r21, 0x00	; 0
 da8:	9a f0       	brmi	.+38     	; 0xdd0 <__mulsf3_pse+0x88>
 daa:	f1 f0       	breq	.+60     	; 0xde8 <__mulsf3_pse+0xa0>
 dac:	88 23       	and	r24, r24
 dae:	4a f0       	brmi	.+18     	; 0xdc2 <__mulsf3_pse+0x7a>
 db0:	ee 0f       	add	r30, r30
 db2:	ff 1f       	adc	r31, r31
 db4:	bb 1f       	adc	r27, r27
 db6:	66 1f       	adc	r22, r22
 db8:	77 1f       	adc	r23, r23
 dba:	88 1f       	adc	r24, r24
 dbc:	91 50       	subi	r25, 0x01	; 1
 dbe:	50 40       	sbci	r21, 0x00	; 0
 dc0:	a9 f7       	brne	.-22     	; 0xdac <__mulsf3_pse+0x64>
 dc2:	9e 3f       	cpi	r25, 0xFE	; 254
 dc4:	51 05       	cpc	r21, r1
 dc6:	80 f0       	brcs	.+32     	; 0xde8 <__mulsf3_pse+0xa0>
 dc8:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__fp_inf>
 dcc:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_szero>
 dd0:	5f 3f       	cpi	r21, 0xFF	; 255
 dd2:	e4 f3       	brlt	.-8      	; 0xdcc <__mulsf3_pse+0x84>
 dd4:	98 3e       	cpi	r25, 0xE8	; 232
 dd6:	d4 f3       	brlt	.-12     	; 0xdcc <__mulsf3_pse+0x84>
 dd8:	86 95       	lsr	r24
 dda:	77 95       	ror	r23
 ddc:	67 95       	ror	r22
 dde:	b7 95       	ror	r27
 de0:	f7 95       	ror	r31
 de2:	e7 95       	ror	r30
 de4:	9f 5f       	subi	r25, 0xFF	; 255
 de6:	c1 f7       	brne	.-16     	; 0xdd8 <__mulsf3_pse+0x90>
 de8:	fe 2b       	or	r31, r30
 dea:	88 0f       	add	r24, r24
 dec:	91 1d       	adc	r25, r1
 dee:	96 95       	lsr	r25
 df0:	87 95       	ror	r24
 df2:	97 f9       	bld	r25, 7
 df4:	08 95       	ret

00000df6 <__fp_inf>:
 df6:	97 f9       	bld	r25, 7
 df8:	9f 67       	ori	r25, 0x7F	; 127
 dfa:	80 e8       	ldi	r24, 0x80	; 128
 dfc:	70 e0       	ldi	r23, 0x00	; 0
 dfe:	60 e0       	ldi	r22, 0x00	; 0
 e00:	08 95       	ret

00000e02 <__fp_nan>:
 e02:	9f ef       	ldi	r25, 0xFF	; 255
 e04:	80 ec       	ldi	r24, 0xC0	; 192
 e06:	08 95       	ret

00000e08 <__fp_pscA>:
 e08:	00 24       	eor	r0, r0
 e0a:	0a 94       	dec	r0
 e0c:	16 16       	cp	r1, r22
 e0e:	17 06       	cpc	r1, r23
 e10:	18 06       	cpc	r1, r24
 e12:	09 06       	cpc	r0, r25
 e14:	08 95       	ret

00000e16 <__fp_pscB>:
 e16:	00 24       	eor	r0, r0
 e18:	0a 94       	dec	r0
 e1a:	12 16       	cp	r1, r18
 e1c:	13 06       	cpc	r1, r19
 e1e:	14 06       	cpc	r1, r20
 e20:	05 06       	cpc	r0, r21
 e22:	08 95       	ret

00000e24 <__fp_round>:
 e24:	09 2e       	mov	r0, r25
 e26:	03 94       	inc	r0
 e28:	00 0c       	add	r0, r0
 e2a:	11 f4       	brne	.+4      	; 0xe30 <__fp_round+0xc>
 e2c:	88 23       	and	r24, r24
 e2e:	52 f0       	brmi	.+20     	; 0xe44 <__fp_round+0x20>
 e30:	bb 0f       	add	r27, r27
 e32:	40 f4       	brcc	.+16     	; 0xe44 <__fp_round+0x20>
 e34:	bf 2b       	or	r27, r31
 e36:	11 f4       	brne	.+4      	; 0xe3c <__fp_round+0x18>
 e38:	60 ff       	sbrs	r22, 0
 e3a:	04 c0       	rjmp	.+8      	; 0xe44 <__fp_round+0x20>
 e3c:	6f 5f       	subi	r22, 0xFF	; 255
 e3e:	7f 4f       	sbci	r23, 0xFF	; 255
 e40:	8f 4f       	sbci	r24, 0xFF	; 255
 e42:	9f 4f       	sbci	r25, 0xFF	; 255
 e44:	08 95       	ret

00000e46 <__itoa_ncheck>:
 e46:	bb 27       	eor	r27, r27
 e48:	4a 30       	cpi	r20, 0x0A	; 10
 e4a:	31 f4       	brne	.+12     	; 0xe58 <__itoa_ncheck+0x12>
 e4c:	99 23       	and	r25, r25
 e4e:	22 f4       	brpl	.+8      	; 0xe58 <__itoa_ncheck+0x12>
 e50:	bd e2       	ldi	r27, 0x2D	; 45
 e52:	90 95       	com	r25
 e54:	81 95       	neg	r24
 e56:	9f 4f       	sbci	r25, 0xFF	; 255
 e58:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__utoa_common>

00000e5c <__utoa_ncheck>:
 e5c:	bb 27       	eor	r27, r27

00000e5e <__utoa_common>:
 e5e:	fb 01       	movw	r30, r22
 e60:	55 27       	eor	r21, r21
 e62:	aa 27       	eor	r26, r26
 e64:	88 0f       	add	r24, r24
 e66:	99 1f       	adc	r25, r25
 e68:	aa 1f       	adc	r26, r26
 e6a:	a4 17       	cp	r26, r20
 e6c:	10 f0       	brcs	.+4      	; 0xe72 <__utoa_common+0x14>
 e6e:	a4 1b       	sub	r26, r20
 e70:	83 95       	inc	r24
 e72:	50 51       	subi	r21, 0x10	; 16
 e74:	b9 f7       	brne	.-18     	; 0xe64 <__utoa_common+0x6>
 e76:	a0 5d       	subi	r26, 0xD0	; 208
 e78:	aa 33       	cpi	r26, 0x3A	; 58
 e7a:	08 f0       	brcs	.+2      	; 0xe7e <__utoa_common+0x20>
 e7c:	a9 5d       	subi	r26, 0xD9	; 217
 e7e:	a1 93       	st	Z+, r26
 e80:	00 97       	sbiw	r24, 0x00	; 0
 e82:	79 f7       	brne	.-34     	; 0xe62 <__utoa_common+0x4>
 e84:	b1 11       	cpse	r27, r1
 e86:	b1 93       	st	Z+, r27
 e88:	11 92       	st	Z+, r1
 e8a:	cb 01       	movw	r24, r22
 e8c:	0c 94 48 07 	jmp	0xe90	; 0xe90 <strrev>

00000e90 <strrev>:
 e90:	dc 01       	movw	r26, r24
 e92:	fc 01       	movw	r30, r24
 e94:	67 2f       	mov	r22, r23
 e96:	71 91       	ld	r23, Z+
 e98:	77 23       	and	r23, r23
 e9a:	e1 f7       	brne	.-8      	; 0xe94 <strrev+0x4>
 e9c:	32 97       	sbiw	r30, 0x02	; 2
 e9e:	04 c0       	rjmp	.+8      	; 0xea8 <strrev+0x18>
 ea0:	7c 91       	ld	r23, X
 ea2:	6d 93       	st	X+, r22
 ea4:	70 83       	st	Z, r23
 ea6:	62 91       	ld	r22, -Z
 ea8:	ae 17       	cp	r26, r30
 eaa:	bf 07       	cpc	r27, r31
 eac:	c8 f3       	brcs	.-14     	; 0xea0 <strrev+0x10>
 eae:	08 95       	ret

00000eb0 <_exit>:
 eb0:	f8 94       	cli

00000eb2 <__stop_program>:
 eb2:	ff cf       	rjmp	.-2      	; 0xeb2 <__stop_program>
