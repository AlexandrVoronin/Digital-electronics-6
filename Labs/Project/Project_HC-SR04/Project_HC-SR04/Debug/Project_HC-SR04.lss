
Project_HC-SR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00000d5c  00000df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800190  00800190  00000e80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed9  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c47  00000000  00000000  00002f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e54  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  000049cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e1  00000000  00000000  00004dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f9f  00000000  00000000  000055b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__vector_18>
  4c:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 39       	cpi	r26, 0x90	; 144
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e9       	ldi	r26, 0x90	; 144
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3e       	cpi	r26, 0xEA	; 234
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 42 01 	call	0x284	; 0x284 <main>
  9e:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 23       	and	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
  e0:	fc 01       	movw	r30, r24
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_toggle>:
 112:	fc 01       	movw	r30, r24
 114:	40 81       	ld	r20, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_toggle+0xe>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_toggle+0xa>
 124:	24 27       	eor	r18, r20
 126:	20 83       	st	Z, r18
 128:	08 95       	ret

0000012a <GPIO_read>:
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_read+0xc>
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_read+0x8>
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <toggle_e>:
 13e:	29 9a       	sbi	0x05, 1	; 5
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <toggle_e+0x4>
 146:	00 00       	nop
 148:	29 98       	cbi	0x05, 1	; 5
 14a:	08 95       	ret

0000014c <lcd_write>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	66 23       	and	r22, r22
 152:	11 f0       	breq	.+4      	; 0x158 <lcd_write+0xc>
 154:	28 9a       	sbi	0x05, 0	; 5
 156:	01 c0       	rjmp	.+2      	; 0x15a <lcd_write+0xe>
 158:	28 98       	cbi	0x05, 0	; 5
 15a:	54 9a       	sbi	0x0a, 4	; 10
 15c:	55 9a       	sbi	0x0a, 5	; 10
 15e:	56 9a       	sbi	0x0a, 6	; 10
 160:	57 9a       	sbi	0x0a, 7	; 10
 162:	5f 98       	cbi	0x0b, 7	; 11
 164:	5e 98       	cbi	0x0b, 6	; 11
 166:	5d 98       	cbi	0x0b, 5	; 11
 168:	5c 98       	cbi	0x0b, 4	; 11
 16a:	cc 23       	and	r28, r28
 16c:	0c f4       	brge	.+2      	; 0x170 <lcd_write+0x24>
 16e:	5f 9a       	sbi	0x0b, 7	; 11
 170:	c6 fd       	sbrc	r28, 6
 172:	5e 9a       	sbi	0x0b, 6	; 11
 174:	c5 fd       	sbrc	r28, 5
 176:	5d 9a       	sbi	0x0b, 5	; 11
 178:	c4 fd       	sbrc	r28, 4
 17a:	5c 9a       	sbi	0x0b, 4	; 11
 17c:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 180:	5f 98       	cbi	0x0b, 7	; 11
 182:	5e 98       	cbi	0x0b, 6	; 11
 184:	5d 98       	cbi	0x0b, 5	; 11
 186:	5c 98       	cbi	0x0b, 4	; 11
 188:	c3 fd       	sbrc	r28, 3
 18a:	5f 9a       	sbi	0x0b, 7	; 11
 18c:	c2 fd       	sbrc	r28, 2
 18e:	5e 9a       	sbi	0x0b, 6	; 11
 190:	c1 fd       	sbrc	r28, 1
 192:	5d 9a       	sbi	0x0b, 5	; 11
 194:	c0 fd       	sbrc	r28, 0
 196:	5c 9a       	sbi	0x0b, 4	; 11
 198:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 19c:	5c 9a       	sbi	0x0b, 4	; 11
 19e:	5d 9a       	sbi	0x0b, 5	; 11
 1a0:	5e 9a       	sbi	0x0b, 6	; 11
 1a2:	5f 9a       	sbi	0x0b, 7	; 11
 1a4:	87 eb       	ldi	r24, 0xB7	; 183
 1a6:	9b e0       	ldi	r25, 0x0B	; 11
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_write+0x5c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_write+0x62>
 1ae:	00 00       	nop
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <lcd_command>:
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
 1ba:	08 95       	ret

000001bc <lcd_gotoxy>:
 1bc:	61 11       	cpse	r22, r1
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <lcd_gotoxy+0xc>
 1c0:	80 58       	subi	r24, 0x80	; 128
 1c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1c6:	08 95       	ret
 1c8:	80 54       	subi	r24, 0x40	; 64
 1ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1ce:	08 95       	ret

000001d0 <lcd_clrscr>:
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1d6:	08 95       	ret

000001d8 <lcd_putc>:
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
 1de:	08 95       	ret

000001e0 <lcd_puts>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	fc 01       	movw	r30, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	29 f0       	breq	.+10     	; 0x1fa <lcd_puts+0x1a>
 1f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
 1f4:	89 91       	ld	r24, Y+
 1f6:	81 11       	cpse	r24, r1
 1f8:	fb cf       	rjmp	.-10     	; 0x1f0 <lcd_puts+0x10>
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <lcd_init>:
 200:	cf 93       	push	r28
 202:	c8 2f       	mov	r28, r24
 204:	20 9a       	sbi	0x04, 0	; 4
 206:	55 9a       	sbi	0x0a, 5	; 10
 208:	21 9a       	sbi	0x04, 1	; 4
 20a:	54 9a       	sbi	0x0a, 4	; 10
 20c:	55 9a       	sbi	0x0a, 5	; 10
 20e:	56 9a       	sbi	0x0a, 6	; 10
 210:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x16>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x1c>
 21c:	00 00       	nop
 21e:	5d 9a       	sbi	0x0b, 5	; 11
 220:	5c 9a       	sbi	0x0b, 4	; 11
 222:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 226:	8f e1       	ldi	r24, 0x1F	; 31
 228:	9e e4       	ldi	r25, 0x4E	; 78
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x2a>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_init+0x30>
 230:	00 00       	nop
 232:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x3a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x40>
 240:	00 00       	nop
 242:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x4a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x50>
 250:	00 00       	nop
 252:	5c 98       	cbi	0x0b, 4	; 11
 254:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x5c>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x62>
 262:	00 00       	nop
 264:	88 e2       	ldi	r24, 0x28	; 40
 266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 26a:	88 e0       	ldi	r24, 0x08	; 8
 26c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 270:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_clrscr>
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 27a:	8c 2f       	mov	r24, r28
 27c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <main>:

/* Function definitions ----------------------------------------------*/
int main(void)
{
    // Output pins (Trigger)
     GPIO_config_output(&DDRB, trigFront);
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	84 e2       	ldi	r24, 0x24	; 36
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTB, trigFront);
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	85 e2       	ldi	r24, 0x25	; 37
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRB, trigBack);
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	84 e2       	ldi	r24, 0x24	; 36
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTB, trigBack);
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	85 e2       	ldi	r24, 0x25	; 37
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
     // Input pins (Echo)
     GPIO_config_input_nopull(&DDRB, echoFront);
 2ac:	63 e0       	ldi	r22, 0x03	; 3
 2ae:	84 e2       	ldi	r24, 0x24	; 36
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
     GPIO_config_input_nopull(&DDRB, echoBack);
 2b6:	65 e0       	ldi	r22, 0x05	; 5
 2b8:	84 e2       	ldi	r24, 0x24	; 36
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
     
     // LEDs
     GPIO_config_output(&DDRC,LED1);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	87 e2       	ldi	r24, 0x27	; 39
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED1);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRC,LED2);
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	87 e2       	ldi	r24, 0x27	; 39
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED2);
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	88 e2       	ldi	r24, 0x28	; 40
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRC,LED3);
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	87 e2       	ldi	r24, 0x27	; 39
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED3);
 2f2:	63 e0       	ldi	r22, 0x03	; 3
 2f4:	88 e2       	ldi	r24, 0x28	; 40
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRC,LED4);
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	87 e2       	ldi	r24, 0x27	; 39
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED4);
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	88 e2       	ldi	r24, 0x28	; 40
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
     // speaker
     GPIO_config_output(&DDRC, speaker);
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	87 e2       	ldi	r24, 0x27	; 39
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC, speaker);
 31a:	65 e0       	ldi	r22, 0x05	; 5
 31c:	88 e2       	ldi	r24, 0x28	; 40
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 324:	8c e0       	ldi	r24, 0x0C	; 12
 326:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>
    lcd_gotoxy(0, 0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("Front: ");
 332:	8f e0       	ldi	r24, 0x0F	; 15
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
    lcd_gotoxy(0, 1);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts(" Back: ");
 342:	87 e1       	ldi	r24, 0x17	; 23
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>

    // Configure 8-bit Timer/Counter0
    // Enable interrupt and set the overflow prescaler to 16 us
    // Used for displaying result on LCD, uart, LEDs
    TIM0_overflow_16us();
 34a:	85 b5       	in	r24, 0x25	; 37
 34c:	89 7f       	andi	r24, 0xF9	; 249
 34e:	85 bd       	out	0x25, r24	; 37
 350:	85 b5       	in	r24, 0x25	; 37
 352:	81 60       	ori	r24, 0x01	; 1
 354:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 356:	ee e6       	ldi	r30, 0x6E	; 110
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1
    // Enable interrupt and set the overflow prescaler to 262 ms
    // Used for displaying result on LCD, uart, LEDs
    TIM1_overflow_262ms();
 360:	e1 e8       	ldi	r30, 0x81	; 129
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	8b 7f       	andi	r24, 0xFB	; 251
 368:	80 83       	st	Z, r24
 36a:	80 81       	ld	r24, Z
 36c:	83 60       	ori	r24, 0x03	; 3
 36e:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();    
 370:	ef e6       	ldi	r30, 0x6F	; 111
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	81 60       	ori	r24, 0x01	; 1
 378:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 37a:	87 e6       	ldi	r24, 0x67	; 103
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 382:	78 94       	sei
 384:	ff cf       	rjmp	.-2      	; 0x384 <main+0x100>

00000386 <__vector_16>:
/**
 * ISR starts when Timer/Counter0 overflows. 
 * 
 */
ISR(TIMER0_OVF_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
    static uint16_t number_of_overflows=0;
    static uint16_t lenFront = 0;
    static uint16_t lenBack = 0;
    static state_t state= STATE_TRIG;
    
    number_of_overflows++;
 3a8:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <number_of_overflows.2261>
 3ac:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <number_of_overflows.2261+0x1>
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <number_of_overflows.2261+0x1>
 3b6:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <number_of_overflows.2261>
    
    switch(state)
 3ba:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <state.2264>
 3be:	22 23       	and	r18, r18
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <__vector_16+0x42>
 3c2:	21 30       	cpi	r18, 0x01	; 1
 3c4:	e9 f0       	breq	.+58     	; 0x400 <__LOCK_REGION_LENGTH__>
 3c6:	88 c0       	rjmp	.+272    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
    {
        case STATE_TRIG:            
            GPIO_write_high(&PORTB, trigFront);
 3c8:	62 e0       	ldi	r22, 0x02	; 2
 3ca:	85 e2       	ldi	r24, 0x25	; 37
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, trigBack);
 3d2:	64 e0       	ldi	r22, 0x04	; 4
 3d4:	85 e2       	ldi	r24, 0x25	; 37
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 3dc:	25 e3       	ldi	r18, 0x35	; 53
 3de:	2a 95       	dec	r18
 3e0:	f1 f7       	brne	.-4      	; 0x3de <__vector_16+0x58>
 3e2:	00 00       	nop
            _delay_us(10);
            GPIO_write_low(&PORTB, trigFront);
 3e4:	62 e0       	ldi	r22, 0x02	; 2
 3e6:	85 e2       	ldi	r24, 0x25	; 37
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, trigBack);
 3ee:	64 e0       	ldi	r22, 0x04	; 4
 3f0:	85 e2       	ldi	r24, 0x25	; 37
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            
            state = STATE_ECHO_MEAS;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <state.2264>

            break;
 3fe:	6e c0       	rjmp	.+220    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
        
        case STATE_ECHO_MEAS:
            if (number_of_overflows<=3750)  // 60 ms
 400:	87 3a       	cpi	r24, 0xA7	; 167
 402:	9e 40       	sbci	r25, 0x0E	; 14
 404:	10 f5       	brcc	.+68     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
            {
                if (GPIO_read(&PINB, echoFront))
 406:	63 e0       	ldi	r22, 0x03	; 3
 408:	83 e2       	ldi	r24, 0x23	; 35
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 410:	88 23       	and	r24, r24
 412:	49 f0       	breq	.+18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
                {
                    lenFront++;
 414:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <lenFront.2262>
 418:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <lenFront.2262+0x1>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <lenFront.2262+0x1>
 422:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <lenFront.2262>
                }
                if (GPIO_read(&PINB, echoBack))
 426:	65 e0       	ldi	r22, 0x05	; 5
 428:	83 e2       	ldi	r24, 0x23	; 35
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 430:	88 23       	and	r24, r24
 432:	09 f4       	brne	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	53 c0       	rjmp	.+166    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
                {
                    lenBack++;
 436:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 43a:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__data_end+0x1>
 444:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
 448:	49 c0       	rjmp	.+146    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
                }
            }
            else
            {
                number_of_overflows = 0;
 44a:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <number_of_overflows.2261+0x1>
 44e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <number_of_overflows.2261>
                distFront = lenFront * 0.017 * 16; // 16 us
 452:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <lenFront.2262>
 456:	70 91 93 01 	lds	r23, 0x0193	; 0x800193 <lenFront.2262+0x1>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 58 05 	call	0xab0	; 0xab0 <__floatunsisf>
 462:	26 e9       	ldi	r18, 0x96	; 150
 464:	33 e4       	ldi	r19, 0x43	; 67
 466:	4b e8       	ldi	r20, 0x8B	; 139
 468:	5c e3       	ldi	r21, 0x3C	; 60
 46a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__mulsf3>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	40 e8       	ldi	r20, 0x80	; 128
 474:	51 e4       	ldi	r21, 0x41	; 65
 476:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__mulsf3>
 47a:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <distFront>
 47e:	70 93 a2 01 	sts	0x01A2, r23	; 0x8001a2 <distFront+0x1>
 482:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <distFront+0x2>
 486:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <distFront+0x3>
                distBack = lenBack * 0.017 * 16;
 48a:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <__data_end>
 48e:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <__data_end+0x1>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 58 05 	call	0xab0	; 0xab0 <__floatunsisf>
 49a:	26 e9       	ldi	r18, 0x96	; 150
 49c:	33 e4       	ldi	r19, 0x43	; 67
 49e:	4b e8       	ldi	r20, 0x8B	; 139
 4a0:	5c e3       	ldi	r21, 0x3C	; 60
 4a2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__mulsf3>
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 e8       	ldi	r20, 0x80	; 128
 4ac:	51 e4       	ldi	r21, 0x41	; 65
 4ae:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__mulsf3>
 4b2:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <distBack>
 4b6:	70 93 9e 01 	sts	0x019E, r23	; 0x80019e <distBack+0x1>
 4ba:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <distBack+0x2>
 4be:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <distBack+0x3>
                lenFront = 0;
 4c2:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <lenFront.2262+0x1>
 4c6:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <lenFront.2262>
                lenBack = 0;
 4ca:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <__data_end+0x1>
 4ce:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__data_end>
                state = STATE_TRIG;
 4d2:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <state.2264>
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
            } 
            
            break;   
            
        default:
            state=STATE_TRIG;        
 4d8:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <state.2264>
    }
}
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	bf 91       	pop	r27
 4e2:	af 91       	pop	r26
 4e4:	9f 91       	pop	r25
 4e6:	8f 91       	pop	r24
 4e8:	7f 91       	pop	r23
 4ea:	6f 91       	pop	r22
 4ec:	5f 91       	pop	r21
 4ee:	4f 91       	pop	r20
 4f0:	3f 91       	pop	r19
 4f2:	2f 91       	pop	r18
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <__vector_9>:
        TIM2_overflow_interrupt_disable();
    }
}

ISR(TIMER2_OVF_vect)
{
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
    GPIO_toggle(&PORTC, speaker);
 520:	65 e0       	ldi	r22, 0x05	; 5
 522:	88 e2       	ldi	r24, 0x28	; 40
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
    if(counter >= 10)
    {
        GPIO_toggle(&PORTC, speaker);
        counter = 0;
    }*/
}
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	0f 90       	pop	r0
 544:	0f be       	out	0x3f, r0	; 63
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <lcd_clear>:

// clears LCD
void lcd_clear(uint16_t pos)
{
    lcd_gotoxy(7, pos);
 54c:	68 2f       	mov	r22, r24
 54e:	87 e0       	ldi	r24, 0x07	; 7
 550:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("                ");   // clear all 16 symbols in a row
 554:	8f e1       	ldi	r24, 0x1F	; 31
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
 55c:	08 95       	ret

0000055e <displayResult>:
}

// displays result on LCD, uart
void displayResult(uint16_t DistanceFront,  uint16_t DistanceBack)
{    
 55e:	ef 92       	push	r14
 560:	ff 92       	push	r15
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	00 d0       	rcall	.+0      	; 0x56c <displayResult+0xe>
 56c:	00 d0       	rcall	.+0      	; 0x56e <displayResult+0x10>
 56e:	1f 92       	push	r1
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
 574:	8c 01       	movw	r16, r24
    uint16_t dist = 0;
    uint16_t pos = 0;
    char side[5]= "";
 576:	1a 82       	std	Y+2, r1	; 0x02
 578:	19 82       	std	Y+1, r1	; 0x01
 57a:	fe 01       	movw	r30, r28
 57c:	33 96       	adiw	r30, 0x03	; 3
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	df 01       	movw	r26, r30
 582:	1d 92       	st	X+, r1
 584:	8a 95       	dec	r24
 586:	e9 f7       	brne	.-6      	; 0x582 <displayResult+0x24>
    bool changed = false;
    
    // if one distance changed
     if (diffFront != DistanceFront)
 588:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <diffFront>
 58c:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <diffFront+0x1>
 590:	80 17       	cp	r24, r16
 592:	91 07       	cpc	r25, r17
 594:	09 f4       	brne	.+2      	; 0x598 <displayResult+0x3a>
 596:	8b c0       	rjmp	.+278    	; 0x6ae <displayResult+0x150>
    {	
        pos = 0;
        diffFront = DistanceFront;
 598:	10 93 9a 01 	sts	0x019A, r17	; 0x80019a <diffFront+0x1>
 59c:	00 93 99 01 	sts	0x0199, r16	; 0x800199 <diffFront>
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
 5a0:	86 e0       	ldi	r24, 0x06	; 6
 5a2:	e0 e3       	ldi	r30, 0x30	; 48
 5a4:	f1 e0       	ldi	r31, 0x01	; 1
 5a6:	de 01       	movw	r26, r28
 5a8:	11 96       	adiw	r26, 0x01	; 1
 5aa:	01 90       	ld	r0, Z+
 5ac:	0d 92       	st	X+, r0
 5ae:	8a 95       	dec	r24
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <displayResult+0x4c>
        changed = true;
    }
    if (diffBack != DistanceBack)
 5b2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <diffBack>
 5b6:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <diffBack+0x1>
 5ba:	68 17       	cp	r22, r24
 5bc:	79 07       	cpc	r23, r25
 5be:	91 f0       	breq	.+36     	; 0x5e4 <displayResult+0x86>
    {  
        pos = 1;
        diffBack = DistanceBack;
 5c0:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <diffBack+0x1>
 5c4:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <diffBack>
        dist = DistanceBack;
        strcpy(side, "Back");
 5c8:	85 e0       	ldi	r24, 0x05	; 5
 5ca:	eb e8       	ldi	r30, 0x8B	; 139
 5cc:	f1 e0       	ldi	r31, 0x01	; 1
 5ce:	de 01       	movw	r26, r28
 5d0:	11 96       	adiw	r26, 0x01	; 1
 5d2:	01 90       	ld	r0, Z+
 5d4:	0d 92       	st	X+, r0
 5d6:	8a 95       	dec	r24
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <displayResult+0x74>
    }
    if (diffBack != DistanceBack)
    {  
        pos = 1;
        diffBack = DistanceBack;
        dist = DistanceBack;
 5da:	8b 01       	movw	r16, r22
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
    {  
        pos = 1;
 5dc:	ff 24       	eor	r15, r15
 5de:	f3 94       	inc	r15
 5e0:	e1 2c       	mov	r14, r1
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <displayResult+0x8a>
        diffFront = DistanceFront;
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
 5e4:	f1 2c       	mov	r15, r1
 5e6:	e1 2c       	mov	r14, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5e8:	4a e0       	ldi	r20, 0x0A	; 10
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	71 e0       	ldi	r23, 0x01	; 1
 5ee:	c8 01       	movw	r24, r16
 5f0:	0e 94 77 06 	call	0xcee	; 0xcee <__itoa_ncheck>
    {
        changed = false;
        itoa(dist, lcd_string, 10);
    
	    // Write result on LCD screen
	    if(dist < 2)  // Distance smaller than minimum possible
 5f4:	02 30       	cpi	r16, 0x02	; 2
 5f6:	11 05       	cpc	r17, r1
 5f8:	c8 f4       	brcc	.+50     	; 0x62c <displayResult+0xce>
	    {
		    lcd_clear(pos);
 5fa:	8f 2d       	mov	r24, r15
 5fc:	9e 2d       	mov	r25, r14
 5fe:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_clear>
		    lcd_gotoxy(7, pos);                                   
 602:	6f 2d       	mov	r22, r15
 604:	87 e0       	ldi	r24, 0x07	; 7
 606:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(" < 2 cm");
 60a:	86 e3       	ldi	r24, 0x36	; 54
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
			
            uart_puts(side);		    
 612:	ce 01       	movw	r24, r28
 614:	01 96       	adiw	r24, 0x01	; 1
 616:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
		    uart_puts(" object too close.");
 61a:	8e e3       	ldi	r24, 0x3E	; 62
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
		    uart_puts("\n");   
 622:	81 e5       	ldi	r24, 0x51	; 81
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
 62a:	49 c0       	rjmp	.+146    	; 0x6be <displayResult+0x160>
	    }
	    else if(dist <= 400)
 62c:	01 39       	cpi	r16, 0x91	; 145
 62e:	11 40       	sbci	r17, 0x01	; 1
 630:	28 f5       	brcc	.+74     	; 0x67c <displayResult+0x11e>
	    {
		    lcd_clear(pos);
 632:	8f 2d       	mov	r24, r15
 634:	9e 2d       	mov	r25, r14
 636:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_clear>
		    lcd_gotoxy(7, pos);		    
 63a:	6f 2d       	mov	r22, r15
 63c:	87 e0       	ldi	r24, 0x07	; 7
 63e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(lcd_string);
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	91 e0       	ldi	r25, 0x01	; 1
 646:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
            lcd_puts(" cm");                       
 64a:	85 e6       	ldi	r24, 0x65	; 101
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
			
            uart_puts(side);		    
 652:	ce 01       	movw	r24, r28
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
		    uart_puts(" distance: ");
 65a:	83 e5       	ldi	r24, 0x53	; 83
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
		    uart_puts(lcd_string);
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
            uart_puts(" cm");
 66a:	85 e6       	ldi	r24, 0x65	; 101
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
		    uart_puts("\n");    
 672:	81 e5       	ldi	r24, 0x51	; 81
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
 67a:	21 c0       	rjmp	.+66     	; 0x6be <displayResult+0x160>
	    }
	    else if(dist > 400)   // Distance greater than maximum possible
	    {
		    lcd_clear(pos);
 67c:	8f 2d       	mov	r24, r15
 67e:	9e 2d       	mov	r25, r14
 680:	0e 94 a6 02 	call	0x54c	; 0x54c <lcd_clear>
		    lcd_gotoxy(0, pos);
 684:	6f 2d       	mov	r22, r15
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(" > 400 cm");
 68c:	8f e5       	ldi	r24, 0x5F	; 95
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
					    
            uart_puts(side);
 694:	ce 01       	movw	r24, r28
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
		    uart_puts(" distance is greater than 400 cm.");
 69c:	89 e6       	ldi	r24, 0x69	; 105
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
		    uart_puts("\n"); 
 6a4:	81 e5       	ldi	r24, 0x51	; 81
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_puts>
					    
		    uart_puts("Somethings wrong");
		    uart_puts("\n"); 
	    }          
    }             
 6ac:	08 c0       	rjmp	.+16     	; 0x6be <displayResult+0x160>
        diffFront = DistanceFront;
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
 6ae:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <diffBack>
 6b2:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <diffBack+0x1>
 6b6:	68 17       	cp	r22, r24
 6b8:	79 07       	cpc	r23, r25
 6ba:	09 f0       	breq	.+2      	; 0x6be <displayResult+0x160>
 6bc:	81 cf       	rjmp	.-254    	; 0x5c0 <displayResult+0x62>
					    
		    uart_puts("Somethings wrong");
		    uart_puts("\n"); 
	    }          
    }             
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	08 95       	ret

000006d6 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows.
 * 
 */
ISR(TIMER1_OVF_vect)
{
 6d6:	1f 92       	push	r1
 6d8:	0f 92       	push	r0
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	0f 92       	push	r0
 6de:	11 24       	eor	r1, r1
 6e0:	8f 92       	push	r8
 6e2:	9f 92       	push	r9
 6e4:	af 92       	push	r10
 6e6:	bf 92       	push	r11
 6e8:	cf 92       	push	r12
 6ea:	df 92       	push	r13
 6ec:	ef 92       	push	r14
 6ee:	ff 92       	push	r15
 6f0:	2f 93       	push	r18
 6f2:	3f 93       	push	r19
 6f4:	4f 93       	push	r20
 6f6:	5f 93       	push	r21
 6f8:	6f 93       	push	r22
 6fa:	7f 93       	push	r23
 6fc:	8f 93       	push	r24
 6fe:	9f 93       	push	r25
 700:	af 93       	push	r26
 702:	bf 93       	push	r27
 704:	ef 93       	push	r30
 706:	ff 93       	push	r31
    GPIO_toggle(&PORTC, speaker);
 708:	65 e0       	ldi	r22, 0x05	; 5
 70a:	88 e2       	ldi	r24, 0x28	; 40
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
    // Display on LCD, uart
    displayResult(distFront, distBack);
 712:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <distBack>
 716:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <distBack+0x1>
 71a:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <distBack+0x2>
 71e:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <distBack+0x3>
 722:	0e 94 29 05 	call	0xa52	; 0xa52 <__fixunssfsi>
 726:	6b 01       	movw	r12, r22
 728:	7c 01       	movw	r14, r24
 72a:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <distFront>
 72e:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <distFront+0x1>
 732:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <distFront+0x2>
 736:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <distFront+0x3>
 73a:	0e 94 29 05 	call	0xa52	; 0xa52 <__fixunssfsi>
 73e:	dc 01       	movw	r26, r24
 740:	cb 01       	movw	r24, r22
 742:	b6 01       	movw	r22, r12
 744:	0e 94 af 02 	call	0x55e	; 0x55e <displayResult>
    
    if(distFront < distBack)
 748:	80 90 a1 01 	lds	r8, 0x01A1	; 0x8001a1 <distFront>
 74c:	90 90 a2 01 	lds	r9, 0x01A2	; 0x8001a2 <distFront+0x1>
 750:	a0 90 a3 01 	lds	r10, 0x01A3	; 0x8001a3 <distFront+0x2>
 754:	b0 90 a4 01 	lds	r11, 0x01A4	; 0x8001a4 <distFront+0x3>
 758:	c0 90 9d 01 	lds	r12, 0x019D	; 0x80019d <distBack>
 75c:	d0 90 9e 01 	lds	r13, 0x019E	; 0x80019e <distBack+0x1>
 760:	e0 90 9f 01 	lds	r14, 0x019F	; 0x80019f <distBack+0x2>
 764:	f0 90 a0 01 	lds	r15, 0x01A0	; 0x8001a0 <distBack+0x3>
 768:	a7 01       	movw	r20, r14
 76a:	96 01       	movw	r18, r12
 76c:	c5 01       	movw	r24, r10
 76e:	b4 01       	movw	r22, r8
 770:	0e 94 24 05 	call	0xa48	; 0xa48 <__cmpsf2>
 774:	88 23       	and	r24, r24
 776:	4c f4       	brge	.+18     	; 0x78a <__vector_13+0xb4>
    {
        smallerDist = distFront;
 778:	c5 01       	movw	r24, r10
 77a:	b4 01       	movw	r22, r8
 77c:	0e 94 29 05 	call	0xa52	; 0xa52 <__fixunssfsi>
 780:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <smallerDist+0x1>
 784:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <smallerDist>
 788:	08 c0       	rjmp	.+16     	; 0x79a <__vector_13+0xc4>
    }
    else
    {
        smallerDist = distBack;
 78a:	c7 01       	movw	r24, r14
 78c:	b6 01       	movw	r22, r12
 78e:	0e 94 29 05 	call	0xa52	; 0xa52 <__fixunssfsi>
 792:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <smallerDist+0x1>
 796:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <smallerDist>
    }
            
    // Display on LEDs, change frequency of speaker tone with TIM2 prescaler        
    if(smallerDist <= 50)
 79a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <smallerDist>
 79e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <smallerDist+0x1>
 7a2:	83 33       	cpi	r24, 0x33	; 51
 7a4:	91 05       	cpc	r25, r1
 7a6:	10 f5       	brcc	.+68     	; 0x7ec <__vector_13+0x116>
    {
        GPIO_write_high(&PORTC, LED1);
 7a8:	61 e0       	ldi	r22, 0x01	; 1
 7aa:	88 e2       	ldi	r24, 0x28	; 40
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED2);
 7b2:	62 e0       	ldi	r22, 0x02	; 2
 7b4:	88 e2       	ldi	r24, 0x28	; 40
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED3);
 7bc:	63 e0       	ldi	r22, 0x03	; 3
 7be:	88 e2       	ldi	r24, 0x28	; 40
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED4);
 7c6:	64 e0       	ldi	r22, 0x04	; 4
 7c8:	88 e2       	ldi	r24, 0x28	; 40
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        
        TIM2_overflow_1ms();    
 7d0:	e1 eb       	ldi	r30, 0xB1	; 177
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	8c 7f       	andi	r24, 0xFC	; 252
 7d8:	80 83       	st	Z, r24
 7da:	80 81       	ld	r24, Z
 7dc:	84 60       	ori	r24, 0x04	; 4
 7de:	80 83       	st	Z, r24
        TIM2_overflow_interrupt_enable();    
 7e0:	e0 e7       	ldi	r30, 0x70	; 112
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	81 60       	ori	r24, 0x01	; 1
 7e8:	80 83       	st	Z, r24
 7ea:	80 c0       	rjmp	.+256    	; 0x8ec <__vector_13+0x216>
    }
    else if(smallerDist <= 75)
 7ec:	8c 34       	cpi	r24, 0x4C	; 76
 7ee:	91 05       	cpc	r25, r1
 7f0:	10 f5       	brcc	.+68     	; 0x836 <__vector_13+0x160>
    {
        GPIO_write_high(&PORTC, LED1);
 7f2:	61 e0       	ldi	r22, 0x01	; 1
 7f4:	88 e2       	ldi	r24, 0x28	; 40
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED2);
 7fc:	62 e0       	ldi	r22, 0x02	; 2
 7fe:	88 e2       	ldi	r24, 0x28	; 40
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED3);
 806:	63 e0       	ldi	r22, 0x03	; 3
 808:	88 e2       	ldi	r24, 0x28	; 40
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTC, LED4);
 810:	64 e0       	ldi	r22, 0x04	; 4
 812:	88 e2       	ldi	r24, 0x28	; 40
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        TIM2_overflow_2ms();
 81a:	e1 eb       	ldi	r30, 0xB1	; 177
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	80 81       	ld	r24, Z
 820:	8d 7f       	andi	r24, 0xFD	; 253
 822:	80 83       	st	Z, r24
 824:	80 81       	ld	r24, Z
 826:	85 60       	ori	r24, 0x05	; 5
 828:	80 83       	st	Z, r24
        TIM2_overflow_interrupt_enable();   
 82a:	e0 e7       	ldi	r30, 0x70	; 112
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	81 60       	ori	r24, 0x01	; 1
 832:	80 83       	st	Z, r24
 834:	5b c0       	rjmp	.+182    	; 0x8ec <__vector_13+0x216>
    }
    else if(smallerDist <= 100)
 836:	85 36       	cpi	r24, 0x65	; 101
 838:	91 05       	cpc	r25, r1
 83a:	10 f5       	brcc	.+68     	; 0x880 <__vector_13+0x1aa>
    {
        GPIO_write_high(&PORTC, LED1);
 83c:	61 e0       	ldi	r22, 0x01	; 1
 83e:	88 e2       	ldi	r24, 0x28	; 40
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED2);
 846:	62 e0       	ldi	r22, 0x02	; 2
 848:	88 e2       	ldi	r24, 0x28	; 40
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTC, LED3);
 850:	63 e0       	ldi	r22, 0x03	; 3
 852:	88 e2       	ldi	r24, 0x28	; 40
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED4);
 85a:	64 e0       	ldi	r22, 0x04	; 4
 85c:	88 e2       	ldi	r24, 0x28	; 40
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        TIM2_overflow_4ms();
 864:	e1 eb       	ldi	r30, 0xB1	; 177
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	8e 7f       	andi	r24, 0xFE	; 254
 86c:	80 83       	st	Z, r24
 86e:	80 81       	ld	r24, Z
 870:	86 60       	ori	r24, 0x06	; 6
 872:	80 83       	st	Z, r24
        TIM2_overflow_interrupt_enable();   
 874:	e0 e7       	ldi	r30, 0x70	; 112
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	81 60       	ori	r24, 0x01	; 1
 87c:	80 83       	st	Z, r24
 87e:	36 c0       	rjmp	.+108    	; 0x8ec <__vector_13+0x216>
    }
    else if(smallerDist <= 125)
 880:	8e 37       	cpi	r24, 0x7E	; 126
 882:	91 05       	cpc	r25, r1
 884:	d0 f4       	brcc	.+52     	; 0x8ba <__vector_13+0x1e4>
    {
        GPIO_write_high(&PORTC, LED1);
 886:	61 e0       	ldi	r22, 0x01	; 1
 888:	88 e2       	ldi	r24, 0x28	; 40
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTC, LED2);
 890:	62 e0       	ldi	r22, 0x02	; 2
 892:	88 e2       	ldi	r24, 0x28	; 40
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED3);
 89a:	63 e0       	ldi	r22, 0x03	; 3
 89c:	88 e2       	ldi	r24, 0x28	; 40
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED4);
 8a4:	64 e0       	ldi	r22, 0x04	; 4
 8a6:	88 e2       	ldi	r24, 0x28	; 40
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        /*TIM2_overflow_16ms(); // too low freq.
        TIM2_overflow_interrupt_enable(); */ 
        TIM2_overflow_interrupt_disable(); 
 8ae:	e0 e7       	ldi	r30, 0x70	; 112
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	8e 7f       	andi	r24, 0xFE	; 254
 8b6:	80 83       	st	Z, r24
 8b8:	19 c0       	rjmp	.+50     	; 0x8ec <__vector_13+0x216>
    }
    else
    {
        GPIO_write_low(&PORTC, LED1);
 8ba:	61 e0       	ldi	r22, 0x01	; 1
 8bc:	88 e2       	ldi	r24, 0x28	; 40
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED2);
 8c4:	62 e0       	ldi	r22, 0x02	; 2
 8c6:	88 e2       	ldi	r24, 0x28	; 40
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED3);
 8ce:	63 e0       	ldi	r22, 0x03	; 3
 8d0:	88 e2       	ldi	r24, 0x28	; 40
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED4);
 8d8:	64 e0       	ldi	r22, 0x04	; 4
 8da:	88 e2       	ldi	r24, 0x28	; 40
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        TIM2_overflow_interrupt_disable();
 8e2:	e0 e7       	ldi	r30, 0x70	; 112
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	8e 7f       	andi	r24, 0xFE	; 254
 8ea:	80 83       	st	Z, r24
    }
}
 8ec:	ff 91       	pop	r31
 8ee:	ef 91       	pop	r30
 8f0:	bf 91       	pop	r27
 8f2:	af 91       	pop	r26
 8f4:	9f 91       	pop	r25
 8f6:	8f 91       	pop	r24
 8f8:	7f 91       	pop	r23
 8fa:	6f 91       	pop	r22
 8fc:	5f 91       	pop	r21
 8fe:	4f 91       	pop	r20
 900:	3f 91       	pop	r19
 902:	2f 91       	pop	r18
 904:	ff 90       	pop	r15
 906:	ef 90       	pop	r14
 908:	df 90       	pop	r13
 90a:	cf 90       	pop	r12
 90c:	bf 90       	pop	r11
 90e:	af 90       	pop	r10
 910:	9f 90       	pop	r9
 912:	8f 90       	pop	r8
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	1f 90       	pop	r1
 91c:	18 95       	reti

0000091e <__vector_18>:
 91e:	1f 92       	push	r1
 920:	0f 92       	push	r0
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	0f 92       	push	r0
 926:	11 24       	eor	r1, r1
 928:	2f 93       	push	r18
 92a:	8f 93       	push	r24
 92c:	9f 93       	push	r25
 92e:	ef 93       	push	r30
 930:	ff 93       	push	r31
 932:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 936:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 93a:	8c 71       	andi	r24, 0x1C	; 28
 93c:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <UART_RxHead>
 940:	ef 5f       	subi	r30, 0xFF	; 255
 942:	ef 71       	andi	r30, 0x1F	; 31
 944:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <UART_RxTail>
 948:	e9 17       	cp	r30, r25
 94a:	39 f0       	breq	.+14     	; 0x95a <__vector_18+0x3c>
 94c:	e0 93 a7 01 	sts	0x01A7, r30	; 0x8001a7 <UART_RxHead>
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	e6 55       	subi	r30, 0x56	; 86
 954:	fe 4f       	sbci	r31, 0xFE	; 254
 956:	20 83       	st	Z, r18
 958:	01 c0       	rjmp	.+2      	; 0x95c <__vector_18+0x3e>
 95a:	82 e0       	ldi	r24, 0x02	; 2
 95c:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <UART_LastRxError>
 960:	89 2b       	or	r24, r25
 962:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <UART_LastRxError>
 966:	ff 91       	pop	r31
 968:	ef 91       	pop	r30
 96a:	9f 91       	pop	r25
 96c:	8f 91       	pop	r24
 96e:	2f 91       	pop	r18
 970:	0f 90       	pop	r0
 972:	0f be       	out	0x3f, r0	; 63
 974:	0f 90       	pop	r0
 976:	1f 90       	pop	r1
 978:	18 95       	reti

0000097a <__vector_19>:
 97a:	1f 92       	push	r1
 97c:	0f 92       	push	r0
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	0f 92       	push	r0
 982:	11 24       	eor	r1, r1
 984:	8f 93       	push	r24
 986:	9f 93       	push	r25
 988:	ef 93       	push	r30
 98a:	ff 93       	push	r31
 98c:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <UART_TxHead>
 990:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <UART_TxTail>
 994:	98 17       	cp	r25, r24
 996:	69 f0       	breq	.+26     	; 0x9b2 <__vector_19+0x38>
 998:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <UART_TxTail>
 99c:	ef 5f       	subi	r30, 0xFF	; 255
 99e:	ef 71       	andi	r30, 0x1F	; 31
 9a0:	e0 93 a8 01 	sts	0x01A8, r30	; 0x8001a8 <UART_TxTail>
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	e6 53       	subi	r30, 0x36	; 54
 9a8:	fe 4f       	sbci	r31, 0xFE	; 254
 9aa:	80 81       	ld	r24, Z
 9ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 9b0:	05 c0       	rjmp	.+10     	; 0x9bc <__vector_19+0x42>
 9b2:	e1 ec       	ldi	r30, 0xC1	; 193
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	80 81       	ld	r24, Z
 9b8:	8f 7d       	andi	r24, 0xDF	; 223
 9ba:	80 83       	st	Z, r24
 9bc:	ff 91       	pop	r31
 9be:	ef 91       	pop	r30
 9c0:	9f 91       	pop	r25
 9c2:	8f 91       	pop	r24
 9c4:	0f 90       	pop	r0
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	0f 90       	pop	r0
 9ca:	1f 90       	pop	r1
 9cc:	18 95       	reti

000009ce <uart_init>:
 9ce:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <UART_TxHead>
 9d2:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <UART_TxTail>
 9d6:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <UART_RxHead>
 9da:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <UART_RxTail>
 9de:	99 23       	and	r25, r25
 9e0:	1c f4       	brge	.+6      	; 0x9e8 <uart_init+0x1a>
 9e2:	22 e0       	ldi	r18, 0x02	; 2
 9e4:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 9e8:	90 78       	andi	r25, 0x80	; 128
 9ea:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 9ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 9f2:	88 e9       	ldi	r24, 0x98	; 152
 9f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 9f8:	86 e0       	ldi	r24, 0x06	; 6
 9fa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 9fe:	08 95       	ret

00000a00 <uart_putc>:
 a00:	20 91 a9 01 	lds	r18, 0x01A9	; 0x8001a9 <UART_TxHead>
 a04:	2f 5f       	subi	r18, 0xFF	; 255
 a06:	2f 71       	andi	r18, 0x1F	; 31
 a08:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <UART_TxTail>
 a0c:	29 17       	cp	r18, r25
 a0e:	e1 f3       	breq	.-8      	; 0xa08 <uart_putc+0x8>
 a10:	e2 2f       	mov	r30, r18
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	e6 53       	subi	r30, 0x36	; 54
 a16:	fe 4f       	sbci	r31, 0xFE	; 254
 a18:	80 83       	st	Z, r24
 a1a:	20 93 a9 01 	sts	0x01A9, r18	; 0x8001a9 <UART_TxHead>
 a1e:	e1 ec       	ldi	r30, 0xC1	; 193
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	80 81       	ld	r24, Z
 a24:	80 62       	ori	r24, 0x20	; 32
 a26:	80 83       	st	Z, r24
 a28:	08 95       	ret

00000a2a <uart_puts>:
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	ec 01       	movw	r28, r24
 a30:	88 81       	ld	r24, Y
 a32:	88 23       	and	r24, r24
 a34:	31 f0       	breq	.+12     	; 0xa42 <uart_puts+0x18>
 a36:	21 96       	adiw	r28, 0x01	; 1
 a38:	0e 94 00 05 	call	0xa00	; 0xa00 <uart_putc>
 a3c:	89 91       	ld	r24, Y+
 a3e:	81 11       	cpse	r24, r1
 a40:	fb cf       	rjmp	.-10     	; 0xa38 <uart_puts+0xe>
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	08 95       	ret

00000a48 <__cmpsf2>:
 a48:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fp_cmp>
 a4c:	08 f4       	brcc	.+2      	; 0xa50 <__cmpsf2+0x8>
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	08 95       	ret

00000a52 <__fixunssfsi>:
 a52:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_splitA>
 a56:	88 f0       	brcs	.+34     	; 0xa7a <__fixunssfsi+0x28>
 a58:	9f 57       	subi	r25, 0x7F	; 127
 a5a:	98 f0       	brcs	.+38     	; 0xa82 <__fixunssfsi+0x30>
 a5c:	b9 2f       	mov	r27, r25
 a5e:	99 27       	eor	r25, r25
 a60:	b7 51       	subi	r27, 0x17	; 23
 a62:	b0 f0       	brcs	.+44     	; 0xa90 <__fixunssfsi+0x3e>
 a64:	e1 f0       	breq	.+56     	; 0xa9e <__fixunssfsi+0x4c>
 a66:	66 0f       	add	r22, r22
 a68:	77 1f       	adc	r23, r23
 a6a:	88 1f       	adc	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	1a f0       	brmi	.+6      	; 0xa76 <__fixunssfsi+0x24>
 a70:	ba 95       	dec	r27
 a72:	c9 f7       	brne	.-14     	; 0xa66 <__fixunssfsi+0x14>
 a74:	14 c0       	rjmp	.+40     	; 0xa9e <__fixunssfsi+0x4c>
 a76:	b1 30       	cpi	r27, 0x01	; 1
 a78:	91 f0       	breq	.+36     	; 0xa9e <__fixunssfsi+0x4c>
 a7a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_zero>
 a7e:	b1 e0       	ldi	r27, 0x01	; 1
 a80:	08 95       	ret
 a82:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_zero>
 a86:	67 2f       	mov	r22, r23
 a88:	78 2f       	mov	r23, r24
 a8a:	88 27       	eor	r24, r24
 a8c:	b8 5f       	subi	r27, 0xF8	; 248
 a8e:	39 f0       	breq	.+14     	; 0xa9e <__fixunssfsi+0x4c>
 a90:	b9 3f       	cpi	r27, 0xF9	; 249
 a92:	cc f3       	brlt	.-14     	; 0xa86 <__fixunssfsi+0x34>
 a94:	86 95       	lsr	r24
 a96:	77 95       	ror	r23
 a98:	67 95       	ror	r22
 a9a:	b3 95       	inc	r27
 a9c:	d9 f7       	brne	.-10     	; 0xa94 <__fixunssfsi+0x42>
 a9e:	3e f4       	brtc	.+14     	; 0xaae <__fixunssfsi+0x5c>
 aa0:	90 95       	com	r25
 aa2:	80 95       	com	r24
 aa4:	70 95       	com	r23
 aa6:	61 95       	neg	r22
 aa8:	7f 4f       	sbci	r23, 0xFF	; 255
 aaa:	8f 4f       	sbci	r24, 0xFF	; 255
 aac:	9f 4f       	sbci	r25, 0xFF	; 255
 aae:	08 95       	ret

00000ab0 <__floatunsisf>:
 ab0:	e8 94       	clt
 ab2:	09 c0       	rjmp	.+18     	; 0xac6 <__floatsisf+0x12>

00000ab4 <__floatsisf>:
 ab4:	97 fb       	bst	r25, 7
 ab6:	3e f4       	brtc	.+14     	; 0xac6 <__floatsisf+0x12>
 ab8:	90 95       	com	r25
 aba:	80 95       	com	r24
 abc:	70 95       	com	r23
 abe:	61 95       	neg	r22
 ac0:	7f 4f       	sbci	r23, 0xFF	; 255
 ac2:	8f 4f       	sbci	r24, 0xFF	; 255
 ac4:	9f 4f       	sbci	r25, 0xFF	; 255
 ac6:	99 23       	and	r25, r25
 ac8:	a9 f0       	breq	.+42     	; 0xaf4 <__floatsisf+0x40>
 aca:	f9 2f       	mov	r31, r25
 acc:	96 e9       	ldi	r25, 0x96	; 150
 ace:	bb 27       	eor	r27, r27
 ad0:	93 95       	inc	r25
 ad2:	f6 95       	lsr	r31
 ad4:	87 95       	ror	r24
 ad6:	77 95       	ror	r23
 ad8:	67 95       	ror	r22
 ada:	b7 95       	ror	r27
 adc:	f1 11       	cpse	r31, r1
 ade:	f8 cf       	rjmp	.-16     	; 0xad0 <__floatsisf+0x1c>
 ae0:	fa f4       	brpl	.+62     	; 0xb20 <__floatsisf+0x6c>
 ae2:	bb 0f       	add	r27, r27
 ae4:	11 f4       	brne	.+4      	; 0xaea <__floatsisf+0x36>
 ae6:	60 ff       	sbrs	r22, 0
 ae8:	1b c0       	rjmp	.+54     	; 0xb20 <__floatsisf+0x6c>
 aea:	6f 5f       	subi	r22, 0xFF	; 255
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	8f 4f       	sbci	r24, 0xFF	; 255
 af0:	9f 4f       	sbci	r25, 0xFF	; 255
 af2:	16 c0       	rjmp	.+44     	; 0xb20 <__floatsisf+0x6c>
 af4:	88 23       	and	r24, r24
 af6:	11 f0       	breq	.+4      	; 0xafc <__floatsisf+0x48>
 af8:	96 e9       	ldi	r25, 0x96	; 150
 afa:	11 c0       	rjmp	.+34     	; 0xb1e <__floatsisf+0x6a>
 afc:	77 23       	and	r23, r23
 afe:	21 f0       	breq	.+8      	; 0xb08 <__floatsisf+0x54>
 b00:	9e e8       	ldi	r25, 0x8E	; 142
 b02:	87 2f       	mov	r24, r23
 b04:	76 2f       	mov	r23, r22
 b06:	05 c0       	rjmp	.+10     	; 0xb12 <__floatsisf+0x5e>
 b08:	66 23       	and	r22, r22
 b0a:	71 f0       	breq	.+28     	; 0xb28 <__floatsisf+0x74>
 b0c:	96 e8       	ldi	r25, 0x86	; 134
 b0e:	86 2f       	mov	r24, r22
 b10:	70 e0       	ldi	r23, 0x00	; 0
 b12:	60 e0       	ldi	r22, 0x00	; 0
 b14:	2a f0       	brmi	.+10     	; 0xb20 <__floatsisf+0x6c>
 b16:	9a 95       	dec	r25
 b18:	66 0f       	add	r22, r22
 b1a:	77 1f       	adc	r23, r23
 b1c:	88 1f       	adc	r24, r24
 b1e:	da f7       	brpl	.-10     	; 0xb16 <__floatsisf+0x62>
 b20:	88 0f       	add	r24, r24
 b22:	96 95       	lsr	r25
 b24:	87 95       	ror	r24
 b26:	97 f9       	bld	r25, 7
 b28:	08 95       	ret

00000b2a <__fp_cmp>:
 b2a:	99 0f       	add	r25, r25
 b2c:	00 08       	sbc	r0, r0
 b2e:	55 0f       	add	r21, r21
 b30:	aa 0b       	sbc	r26, r26
 b32:	e0 e8       	ldi	r30, 0x80	; 128
 b34:	fe ef       	ldi	r31, 0xFE	; 254
 b36:	16 16       	cp	r1, r22
 b38:	17 06       	cpc	r1, r23
 b3a:	e8 07       	cpc	r30, r24
 b3c:	f9 07       	cpc	r31, r25
 b3e:	c0 f0       	brcs	.+48     	; 0xb70 <__fp_cmp+0x46>
 b40:	12 16       	cp	r1, r18
 b42:	13 06       	cpc	r1, r19
 b44:	e4 07       	cpc	r30, r20
 b46:	f5 07       	cpc	r31, r21
 b48:	98 f0       	brcs	.+38     	; 0xb70 <__fp_cmp+0x46>
 b4a:	62 1b       	sub	r22, r18
 b4c:	73 0b       	sbc	r23, r19
 b4e:	84 0b       	sbc	r24, r20
 b50:	95 0b       	sbc	r25, r21
 b52:	39 f4       	brne	.+14     	; 0xb62 <__fp_cmp+0x38>
 b54:	0a 26       	eor	r0, r26
 b56:	61 f0       	breq	.+24     	; 0xb70 <__fp_cmp+0x46>
 b58:	23 2b       	or	r18, r19
 b5a:	24 2b       	or	r18, r20
 b5c:	25 2b       	or	r18, r21
 b5e:	21 f4       	brne	.+8      	; 0xb68 <__fp_cmp+0x3e>
 b60:	08 95       	ret
 b62:	0a 26       	eor	r0, r26
 b64:	09 f4       	brne	.+2      	; 0xb68 <__fp_cmp+0x3e>
 b66:	a1 40       	sbci	r26, 0x01	; 1
 b68:	a6 95       	lsr	r26
 b6a:	8f ef       	ldi	r24, 0xFF	; 255
 b6c:	81 1d       	adc	r24, r1
 b6e:	81 1d       	adc	r24, r1
 b70:	08 95       	ret

00000b72 <__fp_split3>:
 b72:	57 fd       	sbrc	r21, 7
 b74:	90 58       	subi	r25, 0x80	; 128
 b76:	44 0f       	add	r20, r20
 b78:	55 1f       	adc	r21, r21
 b7a:	59 f0       	breq	.+22     	; 0xb92 <__fp_splitA+0x10>
 b7c:	5f 3f       	cpi	r21, 0xFF	; 255
 b7e:	71 f0       	breq	.+28     	; 0xb9c <__fp_splitA+0x1a>
 b80:	47 95       	ror	r20

00000b82 <__fp_splitA>:
 b82:	88 0f       	add	r24, r24
 b84:	97 fb       	bst	r25, 7
 b86:	99 1f       	adc	r25, r25
 b88:	61 f0       	breq	.+24     	; 0xba2 <__fp_splitA+0x20>
 b8a:	9f 3f       	cpi	r25, 0xFF	; 255
 b8c:	79 f0       	breq	.+30     	; 0xbac <__fp_splitA+0x2a>
 b8e:	87 95       	ror	r24
 b90:	08 95       	ret
 b92:	12 16       	cp	r1, r18
 b94:	13 06       	cpc	r1, r19
 b96:	14 06       	cpc	r1, r20
 b98:	55 1f       	adc	r21, r21
 b9a:	f2 cf       	rjmp	.-28     	; 0xb80 <__fp_split3+0xe>
 b9c:	46 95       	lsr	r20
 b9e:	f1 df       	rcall	.-30     	; 0xb82 <__fp_splitA>
 ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <__fp_splitA+0x30>
 ba2:	16 16       	cp	r1, r22
 ba4:	17 06       	cpc	r1, r23
 ba6:	18 06       	cpc	r1, r24
 ba8:	99 1f       	adc	r25, r25
 baa:	f1 cf       	rjmp	.-30     	; 0xb8e <__fp_splitA+0xc>
 bac:	86 95       	lsr	r24
 bae:	71 05       	cpc	r23, r1
 bb0:	61 05       	cpc	r22, r1
 bb2:	08 94       	sec
 bb4:	08 95       	ret

00000bb6 <__fp_zero>:
 bb6:	e8 94       	clt

00000bb8 <__fp_szero>:
 bb8:	bb 27       	eor	r27, r27
 bba:	66 27       	eor	r22, r22
 bbc:	77 27       	eor	r23, r23
 bbe:	cb 01       	movw	r24, r22
 bc0:	97 f9       	bld	r25, 7
 bc2:	08 95       	ret

00000bc4 <__mulsf3>:
 bc4:	0e 94 f5 05 	call	0xbea	; 0xbea <__mulsf3x>
 bc8:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_round>
 bcc:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fp_pscA>
 bd0:	38 f0       	brcs	.+14     	; 0xbe0 <__mulsf3+0x1c>
 bd2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__fp_pscB>
 bd6:	20 f0       	brcs	.+8      	; 0xbe0 <__mulsf3+0x1c>
 bd8:	95 23       	and	r25, r21
 bda:	11 f0       	breq	.+4      	; 0xbe0 <__mulsf3+0x1c>
 bdc:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_inf>
 be0:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_nan>
 be4:	11 24       	eor	r1, r1
 be6:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_szero>

00000bea <__mulsf3x>:
 bea:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fp_split3>
 bee:	70 f3       	brcs	.-36     	; 0xbcc <__mulsf3+0x8>

00000bf0 <__mulsf3_pse>:
 bf0:	95 9f       	mul	r25, r21
 bf2:	c1 f3       	breq	.-16     	; 0xbe4 <__mulsf3+0x20>
 bf4:	95 0f       	add	r25, r21
 bf6:	50 e0       	ldi	r21, 0x00	; 0
 bf8:	55 1f       	adc	r21, r21
 bfa:	62 9f       	mul	r22, r18
 bfc:	f0 01       	movw	r30, r0
 bfe:	72 9f       	mul	r23, r18
 c00:	bb 27       	eor	r27, r27
 c02:	f0 0d       	add	r31, r0
 c04:	b1 1d       	adc	r27, r1
 c06:	63 9f       	mul	r22, r19
 c08:	aa 27       	eor	r26, r26
 c0a:	f0 0d       	add	r31, r0
 c0c:	b1 1d       	adc	r27, r1
 c0e:	aa 1f       	adc	r26, r26
 c10:	64 9f       	mul	r22, r20
 c12:	66 27       	eor	r22, r22
 c14:	b0 0d       	add	r27, r0
 c16:	a1 1d       	adc	r26, r1
 c18:	66 1f       	adc	r22, r22
 c1a:	82 9f       	mul	r24, r18
 c1c:	22 27       	eor	r18, r18
 c1e:	b0 0d       	add	r27, r0
 c20:	a1 1d       	adc	r26, r1
 c22:	62 1f       	adc	r22, r18
 c24:	73 9f       	mul	r23, r19
 c26:	b0 0d       	add	r27, r0
 c28:	a1 1d       	adc	r26, r1
 c2a:	62 1f       	adc	r22, r18
 c2c:	83 9f       	mul	r24, r19
 c2e:	a0 0d       	add	r26, r0
 c30:	61 1d       	adc	r22, r1
 c32:	22 1f       	adc	r18, r18
 c34:	74 9f       	mul	r23, r20
 c36:	33 27       	eor	r19, r19
 c38:	a0 0d       	add	r26, r0
 c3a:	61 1d       	adc	r22, r1
 c3c:	23 1f       	adc	r18, r19
 c3e:	84 9f       	mul	r24, r20
 c40:	60 0d       	add	r22, r0
 c42:	21 1d       	adc	r18, r1
 c44:	82 2f       	mov	r24, r18
 c46:	76 2f       	mov	r23, r22
 c48:	6a 2f       	mov	r22, r26
 c4a:	11 24       	eor	r1, r1
 c4c:	9f 57       	subi	r25, 0x7F	; 127
 c4e:	50 40       	sbci	r21, 0x00	; 0
 c50:	9a f0       	brmi	.+38     	; 0xc78 <__mulsf3_pse+0x88>
 c52:	f1 f0       	breq	.+60     	; 0xc90 <__mulsf3_pse+0xa0>
 c54:	88 23       	and	r24, r24
 c56:	4a f0       	brmi	.+18     	; 0xc6a <__mulsf3_pse+0x7a>
 c58:	ee 0f       	add	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	bb 1f       	adc	r27, r27
 c5e:	66 1f       	adc	r22, r22
 c60:	77 1f       	adc	r23, r23
 c62:	88 1f       	adc	r24, r24
 c64:	91 50       	subi	r25, 0x01	; 1
 c66:	50 40       	sbci	r21, 0x00	; 0
 c68:	a9 f7       	brne	.-22     	; 0xc54 <__mulsf3_pse+0x64>
 c6a:	9e 3f       	cpi	r25, 0xFE	; 254
 c6c:	51 05       	cpc	r21, r1
 c6e:	80 f0       	brcs	.+32     	; 0xc90 <__mulsf3_pse+0xa0>
 c70:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_inf>
 c74:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_szero>
 c78:	5f 3f       	cpi	r21, 0xFF	; 255
 c7a:	e4 f3       	brlt	.-8      	; 0xc74 <__mulsf3_pse+0x84>
 c7c:	98 3e       	cpi	r25, 0xE8	; 232
 c7e:	d4 f3       	brlt	.-12     	; 0xc74 <__mulsf3_pse+0x84>
 c80:	86 95       	lsr	r24
 c82:	77 95       	ror	r23
 c84:	67 95       	ror	r22
 c86:	b7 95       	ror	r27
 c88:	f7 95       	ror	r31
 c8a:	e7 95       	ror	r30
 c8c:	9f 5f       	subi	r25, 0xFF	; 255
 c8e:	c1 f7       	brne	.-16     	; 0xc80 <__mulsf3_pse+0x90>
 c90:	fe 2b       	or	r31, r30
 c92:	88 0f       	add	r24, r24
 c94:	91 1d       	adc	r25, r1
 c96:	96 95       	lsr	r25
 c98:	87 95       	ror	r24
 c9a:	97 f9       	bld	r25, 7
 c9c:	08 95       	ret

00000c9e <__fp_inf>:
 c9e:	97 f9       	bld	r25, 7
 ca0:	9f 67       	ori	r25, 0x7F	; 127
 ca2:	80 e8       	ldi	r24, 0x80	; 128
 ca4:	70 e0       	ldi	r23, 0x00	; 0
 ca6:	60 e0       	ldi	r22, 0x00	; 0
 ca8:	08 95       	ret

00000caa <__fp_nan>:
 caa:	9f ef       	ldi	r25, 0xFF	; 255
 cac:	80 ec       	ldi	r24, 0xC0	; 192
 cae:	08 95       	ret

00000cb0 <__fp_pscA>:
 cb0:	00 24       	eor	r0, r0
 cb2:	0a 94       	dec	r0
 cb4:	16 16       	cp	r1, r22
 cb6:	17 06       	cpc	r1, r23
 cb8:	18 06       	cpc	r1, r24
 cba:	09 06       	cpc	r0, r25
 cbc:	08 95       	ret

00000cbe <__fp_pscB>:
 cbe:	00 24       	eor	r0, r0
 cc0:	0a 94       	dec	r0
 cc2:	12 16       	cp	r1, r18
 cc4:	13 06       	cpc	r1, r19
 cc6:	14 06       	cpc	r1, r20
 cc8:	05 06       	cpc	r0, r21
 cca:	08 95       	ret

00000ccc <__fp_round>:
 ccc:	09 2e       	mov	r0, r25
 cce:	03 94       	inc	r0
 cd0:	00 0c       	add	r0, r0
 cd2:	11 f4       	brne	.+4      	; 0xcd8 <__fp_round+0xc>
 cd4:	88 23       	and	r24, r24
 cd6:	52 f0       	brmi	.+20     	; 0xcec <__fp_round+0x20>
 cd8:	bb 0f       	add	r27, r27
 cda:	40 f4       	brcc	.+16     	; 0xcec <__fp_round+0x20>
 cdc:	bf 2b       	or	r27, r31
 cde:	11 f4       	brne	.+4      	; 0xce4 <__fp_round+0x18>
 ce0:	60 ff       	sbrs	r22, 0
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <__fp_round+0x20>
 ce4:	6f 5f       	subi	r22, 0xFF	; 255
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
 ce8:	8f 4f       	sbci	r24, 0xFF	; 255
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	08 95       	ret

00000cee <__itoa_ncheck>:
 cee:	bb 27       	eor	r27, r27
 cf0:	4a 30       	cpi	r20, 0x0A	; 10
 cf2:	31 f4       	brne	.+12     	; 0xd00 <__itoa_ncheck+0x12>
 cf4:	99 23       	and	r25, r25
 cf6:	22 f4       	brpl	.+8      	; 0xd00 <__itoa_ncheck+0x12>
 cf8:	bd e2       	ldi	r27, 0x2D	; 45
 cfa:	90 95       	com	r25
 cfc:	81 95       	neg	r24
 cfe:	9f 4f       	sbci	r25, 0xFF	; 255
 d00:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__utoa_common>

00000d04 <__utoa_ncheck>:
 d04:	bb 27       	eor	r27, r27

00000d06 <__utoa_common>:
 d06:	fb 01       	movw	r30, r22
 d08:	55 27       	eor	r21, r21
 d0a:	aa 27       	eor	r26, r26
 d0c:	88 0f       	add	r24, r24
 d0e:	99 1f       	adc	r25, r25
 d10:	aa 1f       	adc	r26, r26
 d12:	a4 17       	cp	r26, r20
 d14:	10 f0       	brcs	.+4      	; 0xd1a <__utoa_common+0x14>
 d16:	a4 1b       	sub	r26, r20
 d18:	83 95       	inc	r24
 d1a:	50 51       	subi	r21, 0x10	; 16
 d1c:	b9 f7       	brne	.-18     	; 0xd0c <__utoa_common+0x6>
 d1e:	a0 5d       	subi	r26, 0xD0	; 208
 d20:	aa 33       	cpi	r26, 0x3A	; 58
 d22:	08 f0       	brcs	.+2      	; 0xd26 <__utoa_common+0x20>
 d24:	a9 5d       	subi	r26, 0xD9	; 217
 d26:	a1 93       	st	Z+, r26
 d28:	00 97       	sbiw	r24, 0x00	; 0
 d2a:	79 f7       	brne	.-34     	; 0xd0a <__utoa_common+0x4>
 d2c:	b1 11       	cpse	r27, r1
 d2e:	b1 93       	st	Z+, r27
 d30:	11 92       	st	Z+, r1
 d32:	cb 01       	movw	r24, r22
 d34:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <strrev>

00000d38 <strrev>:
 d38:	dc 01       	movw	r26, r24
 d3a:	fc 01       	movw	r30, r24
 d3c:	67 2f       	mov	r22, r23
 d3e:	71 91       	ld	r23, Z+
 d40:	77 23       	and	r23, r23
 d42:	e1 f7       	brne	.-8      	; 0xd3c <strrev+0x4>
 d44:	32 97       	sbiw	r30, 0x02	; 2
 d46:	04 c0       	rjmp	.+8      	; 0xd50 <strrev+0x18>
 d48:	7c 91       	ld	r23, X
 d4a:	6d 93       	st	X+, r22
 d4c:	70 83       	st	Z, r23
 d4e:	62 91       	ld	r22, -Z
 d50:	ae 17       	cp	r26, r30
 d52:	bf 07       	cpc	r27, r31
 d54:	c8 f3       	brcs	.-14     	; 0xd48 <strrev+0x10>
 d56:	08 95       	ret

00000d58 <_exit>:
 d58:	f8 94       	cli

00000d5a <__stop_program>:
 d5a:	ff cf       	rjmp	.-2      	; 0xd5a <__stop_program>
