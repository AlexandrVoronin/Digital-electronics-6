
Project_HC-SR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00000ec6  00000f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  00800190  00800190  00000fea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001feb  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c47  00000000  00000000  000031af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f32  00000000  00000000  00003df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  00004d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000833  00000000  00000000  00005130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f9f  00000000  00000000  00005963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006902  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_18>
  4c:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 39       	cpi	r26, 0x90	; 144
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e9       	ldi	r26, 0x90	; 144
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 3e       	cpi	r26, 0xED	; 237
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 42 01 	call	0x284	; 0x284 <main>
  9e:	0c 94 61 07 	jmp	0xec2	; 0xec2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 23       	and	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
  e0:	fc 01       	movw	r30, r24
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_toggle>:
 112:	fc 01       	movw	r30, r24
 114:	40 81       	ld	r20, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_toggle+0xe>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_toggle+0xa>
 124:	24 27       	eor	r18, r20
 126:	20 83       	st	Z, r18
 128:	08 95       	ret

0000012a <GPIO_read>:
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_read+0xc>
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_read+0x8>
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <toggle_e>:
 13e:	29 9a       	sbi	0x05, 1	; 5
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <toggle_e+0x4>
 146:	00 00       	nop
 148:	29 98       	cbi	0x05, 1	; 5
 14a:	08 95       	ret

0000014c <lcd_write>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	66 23       	and	r22, r22
 152:	11 f0       	breq	.+4      	; 0x158 <lcd_write+0xc>
 154:	28 9a       	sbi	0x05, 0	; 5
 156:	01 c0       	rjmp	.+2      	; 0x15a <lcd_write+0xe>
 158:	28 98       	cbi	0x05, 0	; 5
 15a:	54 9a       	sbi	0x0a, 4	; 10
 15c:	55 9a       	sbi	0x0a, 5	; 10
 15e:	56 9a       	sbi	0x0a, 6	; 10
 160:	57 9a       	sbi	0x0a, 7	; 10
 162:	5f 98       	cbi	0x0b, 7	; 11
 164:	5e 98       	cbi	0x0b, 6	; 11
 166:	5d 98       	cbi	0x0b, 5	; 11
 168:	5c 98       	cbi	0x0b, 4	; 11
 16a:	cc 23       	and	r28, r28
 16c:	0c f4       	brge	.+2      	; 0x170 <lcd_write+0x24>
 16e:	5f 9a       	sbi	0x0b, 7	; 11
 170:	c6 fd       	sbrc	r28, 6
 172:	5e 9a       	sbi	0x0b, 6	; 11
 174:	c5 fd       	sbrc	r28, 5
 176:	5d 9a       	sbi	0x0b, 5	; 11
 178:	c4 fd       	sbrc	r28, 4
 17a:	5c 9a       	sbi	0x0b, 4	; 11
 17c:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 180:	5f 98       	cbi	0x0b, 7	; 11
 182:	5e 98       	cbi	0x0b, 6	; 11
 184:	5d 98       	cbi	0x0b, 5	; 11
 186:	5c 98       	cbi	0x0b, 4	; 11
 188:	c3 fd       	sbrc	r28, 3
 18a:	5f 9a       	sbi	0x0b, 7	; 11
 18c:	c2 fd       	sbrc	r28, 2
 18e:	5e 9a       	sbi	0x0b, 6	; 11
 190:	c1 fd       	sbrc	r28, 1
 192:	5d 9a       	sbi	0x0b, 5	; 11
 194:	c0 fd       	sbrc	r28, 0
 196:	5c 9a       	sbi	0x0b, 4	; 11
 198:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 19c:	5c 9a       	sbi	0x0b, 4	; 11
 19e:	5d 9a       	sbi	0x0b, 5	; 11
 1a0:	5e 9a       	sbi	0x0b, 6	; 11
 1a2:	5f 9a       	sbi	0x0b, 7	; 11
 1a4:	87 eb       	ldi	r24, 0xB7	; 183
 1a6:	9b e0       	ldi	r25, 0x0B	; 11
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_write+0x5c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_write+0x62>
 1ae:	00 00       	nop
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <lcd_command>:
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
 1ba:	08 95       	ret

000001bc <lcd_gotoxy>:
 1bc:	61 11       	cpse	r22, r1
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <lcd_gotoxy+0xc>
 1c0:	80 58       	subi	r24, 0x80	; 128
 1c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1c6:	08 95       	ret
 1c8:	80 54       	subi	r24, 0x40	; 64
 1ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1ce:	08 95       	ret

000001d0 <lcd_clrscr>:
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1d6:	08 95       	ret

000001d8 <lcd_putc>:
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
 1de:	08 95       	ret

000001e0 <lcd_puts>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	fc 01       	movw	r30, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	29 f0       	breq	.+10     	; 0x1fa <lcd_puts+0x1a>
 1f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
 1f4:	89 91       	ld	r24, Y+
 1f6:	81 11       	cpse	r24, r1
 1f8:	fb cf       	rjmp	.-10     	; 0x1f0 <lcd_puts+0x10>
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <lcd_init>:
 200:	cf 93       	push	r28
 202:	c8 2f       	mov	r28, r24
 204:	20 9a       	sbi	0x04, 0	; 4
 206:	55 9a       	sbi	0x0a, 5	; 10
 208:	21 9a       	sbi	0x04, 1	; 4
 20a:	54 9a       	sbi	0x0a, 4	; 10
 20c:	55 9a       	sbi	0x0a, 5	; 10
 20e:	56 9a       	sbi	0x0a, 6	; 10
 210:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x16>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x1c>
 21c:	00 00       	nop
 21e:	5d 9a       	sbi	0x0b, 5	; 11
 220:	5c 9a       	sbi	0x0b, 4	; 11
 222:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 226:	8f e1       	ldi	r24, 0x1F	; 31
 228:	9e e4       	ldi	r25, 0x4E	; 78
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x2a>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_init+0x30>
 230:	00 00       	nop
 232:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x3a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x40>
 240:	00 00       	nop
 242:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x4a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x50>
 250:	00 00       	nop
 252:	5c 98       	cbi	0x0b, 4	; 11
 254:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x5c>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x62>
 262:	00 00       	nop
 264:	88 e2       	ldi	r24, 0x28	; 40
 266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 26a:	88 e0       	ldi	r24, 0x08	; 8
 26c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 270:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_clrscr>
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 27a:	8c 2f       	mov	r24, r28
 27c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <main>:

/* Function definitions ----------------------------------------------*/
int main(void)
{
    // Output pins (Trigger)
     GPIO_config_output(&DDRB, trigFront);
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	84 e2       	ldi	r24, 0x24	; 36
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTB, trigFront);
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	85 e2       	ldi	r24, 0x25	; 37
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRB, trigBack);
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	84 e2       	ldi	r24, 0x24	; 36
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTB, trigBack);
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	85 e2       	ldi	r24, 0x25	; 37
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
     // Input pins (Echo)
     GPIO_config_input_nopull(&DDRB, echoFront);
 2ac:	63 e0       	ldi	r22, 0x03	; 3
 2ae:	84 e2       	ldi	r24, 0x24	; 36
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
     GPIO_config_input_nopull(&DDRB, echoBack);
 2b6:	65 e0       	ldi	r22, 0x05	; 5
 2b8:	84 e2       	ldi	r24, 0x24	; 36
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
     
     // LEDs
     GPIO_config_output(&DDRC,LED1);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	87 e2       	ldi	r24, 0x27	; 39
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED1);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRC,LED2);
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	87 e2       	ldi	r24, 0x27	; 39
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED2);
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	88 e2       	ldi	r24, 0x28	; 40
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRC,LED3);
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	87 e2       	ldi	r24, 0x27	; 39
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED3);
 2f2:	63 e0       	ldi	r22, 0x03	; 3
 2f4:	88 e2       	ldi	r24, 0x28	; 40
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     GPIO_config_output(&DDRC,LED4);
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	87 e2       	ldi	r24, 0x27	; 39
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC,LED4);
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	88 e2       	ldi	r24, 0x28	; 40
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
     // speaker
     GPIO_config_output(&DDRC, speaker);
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	87 e2       	ldi	r24, 0x27	; 39
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
     GPIO_write_low(&PORTC, speaker);
 31a:	65 e0       	ldi	r22, 0x05	; 5
 31c:	88 e2       	ldi	r24, 0x28	; 40
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 324:	8c e0       	ldi	r24, 0x0C	; 12
 326:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>
    lcd_gotoxy(0, 0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("Front: ");
 332:	8f e0       	ldi	r24, 0x0F	; 15
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
    lcd_gotoxy(0, 1);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts(" Back: ");
 342:	87 e1       	ldi	r24, 0x17	; 23
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>

    // Configure 8-bit Timer/Counter0
    // Enable interrupt and set the overflow prescaler to 16 us
    // Used for displaying result on LCD, uart, LEDs
    TIM0_overflow_16us();
 34a:	85 b5       	in	r24, 0x25	; 37
 34c:	89 7f       	andi	r24, 0xF9	; 249
 34e:	85 bd       	out	0x25, r24	; 37
 350:	85 b5       	in	r24, 0x25	; 37
 352:	81 60       	ori	r24, 0x01	; 1
 354:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 356:	ee e6       	ldi	r30, 0x6E	; 110
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1
    // Enable interrupt and set the overflow prescaler to 262 ms
    // Used for displaying result on LCD, uart, LEDs
    TIM1_overflow_262ms();
 360:	e1 e8       	ldi	r30, 0x81	; 129
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	8b 7f       	andi	r24, 0xFB	; 251
 368:	80 83       	st	Z, r24
 36a:	80 81       	ld	r24, Z
 36c:	83 60       	ori	r24, 0x03	; 3
 36e:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();    
 370:	ef e6       	ldi	r30, 0x6F	; 111
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	81 60       	ori	r24, 0x01	; 1
 378:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 37a:	87 e6       	ldi	r24, 0x67	; 103
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 9c 05 	call	0xb38	; 0xb38 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 382:	78 94       	sei
 384:	ff cf       	rjmp	.-2      	; 0x384 <main+0x100>

00000386 <__vector_16>:
/**
 * ISR starts when Timer/Counter0 overflows. 
 * 
 */
ISR(TIMER0_OVF_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
    static uint16_t number_of_overflows=0;
    static uint16_t lenFront = 0;
    static uint16_t lenBack = 0;
    static state_t state= STATE_TRIG;
    
    number_of_overflows++;
 3a8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <number_of_overflows.2261>
 3ac:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <number_of_overflows.2261+0x1>
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <number_of_overflows.2261+0x1>
 3b6:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <number_of_overflows.2261>
    
    switch(state)
 3ba:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <state.2264>
 3be:	22 23       	and	r18, r18
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <__vector_16+0x42>
 3c2:	21 30       	cpi	r18, 0x01	; 1
 3c4:	e9 f0       	breq	.+58     	; 0x400 <__LOCK_REGION_LENGTH__>
 3c6:	88 c0       	rjmp	.+272    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
    {
        case STATE_TRIG:            
            GPIO_write_high(&PORTB, trigFront);
 3c8:	62 e0       	ldi	r22, 0x02	; 2
 3ca:	85 e2       	ldi	r24, 0x25	; 37
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, trigBack);
 3d2:	64 e0       	ldi	r22, 0x04	; 4
 3d4:	85 e2       	ldi	r24, 0x25	; 37
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 3dc:	25 e3       	ldi	r18, 0x35	; 53
 3de:	2a 95       	dec	r18
 3e0:	f1 f7       	brne	.-4      	; 0x3de <__vector_16+0x58>
 3e2:	00 00       	nop
            _delay_us(10);
            GPIO_write_low(&PORTB, trigFront);
 3e4:	62 e0       	ldi	r22, 0x02	; 2
 3e6:	85 e2       	ldi	r24, 0x25	; 37
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, trigBack);
 3ee:	64 e0       	ldi	r22, 0x04	; 4
 3f0:	85 e2       	ldi	r24, 0x25	; 37
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            
            state = STATE_ECHO_MEAS;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <state.2264>

            break;
 3fe:	6e c0       	rjmp	.+220    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
        
        case STATE_ECHO_MEAS:
            if (number_of_overflows<=3750)  // 60 ms
 400:	87 3a       	cpi	r24, 0xA7	; 167
 402:	9e 40       	sbci	r25, 0x0E	; 14
 404:	10 f5       	brcc	.+68     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
            {
                if (GPIO_read(&PINB, echoFront))
 406:	63 e0       	ldi	r22, 0x03	; 3
 408:	83 e2       	ldi	r24, 0x23	; 35
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 410:	88 23       	and	r24, r24
 412:	49 f0       	breq	.+18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
                {
                    lenFront++;
 414:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <lenFront.2262>
 418:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <lenFront.2262+0x1>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <lenFront.2262+0x1>
 422:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <lenFront.2262>
                }
                if (GPIO_read(&PINB, echoBack))
 426:	65 e0       	ldi	r22, 0x05	; 5
 428:	83 e2       	ldi	r24, 0x23	; 35
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 430:	88 23       	and	r24, r24
 432:	09 f4       	brne	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	53 c0       	rjmp	.+166    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
                {
                    lenBack++;
 436:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <lenBack.2263>
 43a:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <lenBack.2263+0x1>
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <lenBack.2263+0x1>
 444:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <lenBack.2263>
 448:	49 c0       	rjmp	.+146    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
                }
            }
            else
            {
                number_of_overflows = 0;
 44a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <number_of_overflows.2261+0x1>
 44e:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <number_of_overflows.2261>
                distFront = lenFront * 0.017 * 16; // 16 us
 452:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <lenFront.2262>
 456:	70 91 96 01 	lds	r23, 0x0196	; 0x800196 <lenFront.2262+0x1>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 462:	26 e9       	ldi	r18, 0x96	; 150
 464:	33 e4       	ldi	r19, 0x43	; 67
 466:	4b e8       	ldi	r20, 0x8B	; 139
 468:	5c e3       	ldi	r21, 0x3C	; 60
 46a:	0e 94 97 06 	call	0xd2e	; 0xd2e <__mulsf3>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	40 e8       	ldi	r20, 0x80	; 128
 474:	51 e4       	ldi	r21, 0x41	; 65
 476:	0e 94 97 06 	call	0xd2e	; 0xd2e <__mulsf3>
 47a:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <distFront>
 47e:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <distFront+0x1>
 482:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <distFront+0x2>
 486:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <distFront+0x3>
                distBack = lenBack * 0.017 * 16;
 48a:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <lenBack.2263>
 48e:	70 91 94 01 	lds	r23, 0x0194	; 0x800194 <lenBack.2263+0x1>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 49a:	26 e9       	ldi	r18, 0x96	; 150
 49c:	33 e4       	ldi	r19, 0x43	; 67
 49e:	4b e8       	ldi	r20, 0x8B	; 139
 4a0:	5c e3       	ldi	r21, 0x3C	; 60
 4a2:	0e 94 97 06 	call	0xd2e	; 0xd2e <__mulsf3>
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 e8       	ldi	r20, 0x80	; 128
 4ac:	51 e4       	ldi	r21, 0x41	; 65
 4ae:	0e 94 97 06 	call	0xd2e	; 0xd2e <__mulsf3>
 4b2:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <distBack>
 4b6:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <distBack+0x1>
 4ba:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <distBack+0x2>
 4be:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <distBack+0x3>
                lenFront = 0;
 4c2:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <lenFront.2262+0x1>
 4c6:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <lenFront.2262>
                lenBack = 0;
 4ca:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <lenBack.2263+0x1>
 4ce:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <lenBack.2263>
                state = STATE_TRIG;
 4d2:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <state.2264>
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
            } 
            
            break;   
            
        default:
            state=STATE_TRIG;        
 4d8:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <state.2264>
    }
}
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	bf 91       	pop	r27
 4e2:	af 91       	pop	r26
 4e4:	9f 91       	pop	r25
 4e6:	8f 91       	pop	r24
 4e8:	7f 91       	pop	r23
 4ea:	6f 91       	pop	r22
 4ec:	5f 91       	pop	r21
 4ee:	4f 91       	pop	r20
 4f0:	3f 91       	pop	r19
 4f2:	2f 91       	pop	r18
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <__vector_9>:
        TIM2_overflow_interrupt_disable();
    }
}

ISR(TIMER2_OVF_vect)
{
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
    GPIO_toggle(&PORTC, speaker);
 520:	65 e0       	ldi	r22, 0x05	; 5
 522:	88 e2       	ldi	r24, 0x28	; 40
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
    static uint8_t counter = 0;
	static uint16_t counterpulse= 0;
    counter++;
 52a:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <counter.2279>
 52e:	2f 5f       	subi	r18, 0xFF	; 255
 530:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <counter.2279>
	counterpulse++;
 534:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 538:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__data_end+0x1>
 542:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
	
	if (counterpulse<=500)
 546:	85 3f       	cpi	r24, 0xF5	; 245
 548:	31 e0       	ldi	r19, 0x01	; 1
 54a:	93 07       	cpc	r25, r19
 54c:	08 f0       	brcs	.+2      	; 0x550 <__vector_9+0x52>
 54e:	4d c0       	rjmp	.+154    	; 0x5ea <__vector_9+0xec>
	{
		if(counter >= 30)
 550:	2e 31       	cpi	r18, 0x1E	; 30
 552:	08 f4       	brcc	.+2      	; 0x556 <__vector_9+0x58>
 554:	9f c0       	rjmp	.+318    	; 0x694 <__vector_9+0x196>
		{
			if (smallerDist<=20)
 556:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <smallerDist>
 55a:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <smallerDist+0x1>
 55e:	85 31       	cpi	r24, 0x15	; 21
 560:	91 05       	cpc	r25, r1
 562:	80 f4       	brcc	.+32     	; 0x584 <__vector_9+0x86>
			{
				TIM2_overflow_1ms();
 564:	e1 eb       	ldi	r30, 0xB1	; 177
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	8c 7f       	andi	r24, 0xFC	; 252
 56c:	80 83       	st	Z, r24
 56e:	80 81       	ld	r24, Z
 570:	84 60       	ori	r24, 0x04	; 4
 572:	80 83       	st	Z, r24
				GPIO_toggle(&PORTC, speaker);
 574:	65 e0       	ldi	r22, 0x05	; 5
 576:	88 e2       	ldi	r24, 0x28	; 40
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
				counter = 0;
 57e:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <counter.2279>
 582:	88 c0       	rjmp	.+272    	; 0x694 <__vector_9+0x196>
			}
			else if (smallerDist<=50)
 584:	83 33       	cpi	r24, 0x33	; 51
 586:	91 05       	cpc	r25, r1
 588:	80 f4       	brcc	.+32     	; 0x5aa <__vector_9+0xac>
			{
				TIM2_overflow_4ms();
 58a:	e1 eb       	ldi	r30, 0xB1	; 177
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	8e 7f       	andi	r24, 0xFE	; 254
 592:	80 83       	st	Z, r24
 594:	80 81       	ld	r24, Z
 596:	86 60       	ori	r24, 0x06	; 6
 598:	80 83       	st	Z, r24
				GPIO_toggle(&PORTC, speaker);
 59a:	65 e0       	ldi	r22, 0x05	; 5
 59c:	88 e2       	ldi	r24, 0x28	; 40
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
				counter = 0;
 5a4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <counter.2279>
 5a8:	75 c0       	rjmp	.+234    	; 0x694 <__vector_9+0x196>
			}
			else if (smallerDist<=150)
 5aa:	87 39       	cpi	r24, 0x97	; 151
 5ac:	91 05       	cpc	r25, r1
 5ae:	68 f4       	brcc	.+26     	; 0x5ca <__vector_9+0xcc>
			{
				TIM2_overflow_16ms();
 5b0:	e1 eb       	ldi	r30, 0xB1	; 177
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	87 60       	ori	r24, 0x07	; 7
 5b8:	80 83       	st	Z, r24
				GPIO_toggle(&PORTC, speaker);
 5ba:	65 e0       	ldi	r22, 0x05	; 5
 5bc:	88 e2       	ldi	r24, 0x28	; 40
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
				counter = 0;
 5c4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <counter.2279>
 5c8:	65 c0       	rjmp	.+202    	; 0x694 <__vector_9+0x196>
			}
			else
			{
				TIM2_overflow_1ms();
 5ca:	e1 eb       	ldi	r30, 0xB1	; 177
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	8c 7f       	andi	r24, 0xFC	; 252
 5d2:	80 83       	st	Z, r24
 5d4:	80 81       	ld	r24, Z
 5d6:	84 60       	ori	r24, 0x04	; 4
 5d8:	80 83       	st	Z, r24
				GPIO_write_low(&PORTC,speaker);
 5da:	65 e0       	ldi	r22, 0x05	; 5
 5dc:	88 e2       	ldi	r24, 0x28	; 40
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
				counter=0;	
 5e4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <counter.2279>
 5e8:	55 c0       	rjmp	.+170    	; 0x694 <__vector_9+0x196>
			}
		}
	}
	else if (counterpulse<= 1000)
 5ea:	89 3e       	cpi	r24, 0xE9	; 233
 5ec:	93 40       	sbci	r25, 0x03	; 3
 5ee:	08 f0       	brcs	.+2      	; 0x5f2 <__vector_9+0xf4>
 5f0:	4d c0       	rjmp	.+154    	; 0x68c <__vector_9+0x18e>
	{
			if(counter >= 30)
 5f2:	2e 31       	cpi	r18, 0x1E	; 30
 5f4:	08 f4       	brcc	.+2      	; 0x5f8 <__vector_9+0xfa>
 5f6:	4e c0       	rjmp	.+156    	; 0x694 <__vector_9+0x196>
			{
				if (smallerDist<=20)
 5f8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <smallerDist>
 5fc:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <smallerDist+0x1>
 600:	85 31       	cpi	r24, 0x15	; 21
 602:	91 05       	cpc	r25, r1
 604:	80 f4       	brcc	.+32     	; 0x626 <__vector_9+0x128>
				{
					TIM2_overflow_1ms();
 606:	e1 eb       	ldi	r30, 0xB1	; 177
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	8c 7f       	andi	r24, 0xFC	; 252
 60e:	80 83       	st	Z, r24
 610:	80 81       	ld	r24, Z
 612:	84 60       	ori	r24, 0x04	; 4
 614:	80 83       	st	Z, r24
					GPIO_write_low(&PORTC, speaker);
 616:	65 e0       	ldi	r22, 0x05	; 5
 618:	88 e2       	ldi	r24, 0x28	; 40
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
					counter = 0;
 620:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <counter.2279>
 624:	37 c0       	rjmp	.+110    	; 0x694 <__vector_9+0x196>
				}
				else if (smallerDist<=50)
 626:	83 33       	cpi	r24, 0x33	; 51
 628:	91 05       	cpc	r25, r1
 62a:	80 f4       	brcc	.+32     	; 0x64c <__vector_9+0x14e>
				{
					TIM2_overflow_4ms();
 62c:	e1 eb       	ldi	r30, 0xB1	; 177
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	8e 7f       	andi	r24, 0xFE	; 254
 634:	80 83       	st	Z, r24
 636:	80 81       	ld	r24, Z
 638:	86 60       	ori	r24, 0x06	; 6
 63a:	80 83       	st	Z, r24
					GPIO_write_low(&PORTC, speaker);
 63c:	65 e0       	ldi	r22, 0x05	; 5
 63e:	88 e2       	ldi	r24, 0x28	; 40
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
					counter = 0;
 646:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <counter.2279>
 64a:	24 c0       	rjmp	.+72     	; 0x694 <__vector_9+0x196>
				}
				else if (smallerDist<=150)
 64c:	87 39       	cpi	r24, 0x97	; 151
 64e:	91 05       	cpc	r25, r1
 650:	68 f4       	brcc	.+26     	; 0x66c <__vector_9+0x16e>
				{
					TIM2_overflow_16ms();
 652:	e1 eb       	ldi	r30, 0xB1	; 177
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	87 60       	ori	r24, 0x07	; 7
 65a:	80 83       	st	Z, r24
					GPIO_write_low(&PORTC, speaker);
 65c:	65 e0       	ldi	r22, 0x05	; 5
 65e:	88 e2       	ldi	r24, 0x28	; 40
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
					counter = 0;
 666:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <counter.2279>
 66a:	14 c0       	rjmp	.+40     	; 0x694 <__vector_9+0x196>
				}
				else
				{
					TIM2_overflow_1ms();
 66c:	e1 eb       	ldi	r30, 0xB1	; 177
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	8c 7f       	andi	r24, 0xFC	; 252
 674:	80 83       	st	Z, r24
 676:	80 81       	ld	r24, Z
 678:	84 60       	ori	r24, 0x04	; 4
 67a:	80 83       	st	Z, r24
					GPIO_write_low(&PORTC,speaker);
 67c:	65 e0       	ldi	r22, 0x05	; 5
 67e:	88 e2       	ldi	r24, 0x28	; 40
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
					counter=0;
 686:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <counter.2279>
 68a:	04 c0       	rjmp	.+8      	; 0x694 <__vector_9+0x196>
				}
			}
	}
	else
	{
		counterpulse=0;
 68c:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <__data_end+0x1>
 690:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__data_end>
	}
}
 694:	ff 91       	pop	r31
 696:	ef 91       	pop	r30
 698:	bf 91       	pop	r27
 69a:	af 91       	pop	r26
 69c:	9f 91       	pop	r25
 69e:	8f 91       	pop	r24
 6a0:	7f 91       	pop	r23
 6a2:	6f 91       	pop	r22
 6a4:	5f 91       	pop	r21
 6a6:	4f 91       	pop	r20
 6a8:	3f 91       	pop	r19
 6aa:	2f 91       	pop	r18
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <lcd_clear>:

// clears LCD
void lcd_clear(uint16_t pos)
{
    lcd_gotoxy(7, pos);
 6b6:	68 2f       	mov	r22, r24
 6b8:	87 e0       	ldi	r24, 0x07	; 7
 6ba:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("                ");   // clear all 16 symbols in a row
 6be:	8f e1       	ldi	r24, 0x1F	; 31
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
 6c6:	08 95       	ret

000006c8 <displayResult>:
}

// displays result on LCD, uart
void displayResult(uint16_t DistanceFront,  uint16_t DistanceBack)
{    
 6c8:	ef 92       	push	r14
 6ca:	ff 92       	push	r15
 6cc:	0f 93       	push	r16
 6ce:	1f 93       	push	r17
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <displayResult+0xe>
 6d6:	00 d0       	rcall	.+0      	; 0x6d8 <displayResult+0x10>
 6d8:	1f 92       	push	r1
 6da:	cd b7       	in	r28, 0x3d	; 61
 6dc:	de b7       	in	r29, 0x3e	; 62
 6de:	8c 01       	movw	r16, r24
    uint16_t dist = 0;
    uint16_t pos = 0;
    char side[5]= "";
 6e0:	1a 82       	std	Y+2, r1	; 0x02
 6e2:	19 82       	std	Y+1, r1	; 0x01
 6e4:	fe 01       	movw	r30, r28
 6e6:	33 96       	adiw	r30, 0x03	; 3
 6e8:	83 e0       	ldi	r24, 0x03	; 3
 6ea:	df 01       	movw	r26, r30
 6ec:	1d 92       	st	X+, r1
 6ee:	8a 95       	dec	r24
 6f0:	e9 f7       	brne	.-6      	; 0x6ec <displayResult+0x24>
    bool changed = false;
    
    // if one distance changed
     if (diffFront != DistanceFront)
 6f2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <diffFront>
 6f6:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <diffFront+0x1>
 6fa:	80 17       	cp	r24, r16
 6fc:	91 07       	cpc	r25, r17
 6fe:	09 f4       	brne	.+2      	; 0x702 <displayResult+0x3a>
 700:	8b c0       	rjmp	.+278    	; 0x818 <displayResult+0x150>
    {	
        pos = 0;
        diffFront = DistanceFront;
 702:	10 93 9d 01 	sts	0x019D, r17	; 0x80019d <diffFront+0x1>
 706:	00 93 9c 01 	sts	0x019C, r16	; 0x80019c <diffFront>
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
 70a:	86 e0       	ldi	r24, 0x06	; 6
 70c:	e0 e3       	ldi	r30, 0x30	; 48
 70e:	f1 e0       	ldi	r31, 0x01	; 1
 710:	de 01       	movw	r26, r28
 712:	11 96       	adiw	r26, 0x01	; 1
 714:	01 90       	ld	r0, Z+
 716:	0d 92       	st	X+, r0
 718:	8a 95       	dec	r24
 71a:	e1 f7       	brne	.-8      	; 0x714 <displayResult+0x4c>
        changed = true;
    }
    if (diffBack != DistanceBack)
 71c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <diffBack>
 720:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <diffBack+0x1>
 724:	68 17       	cp	r22, r24
 726:	79 07       	cpc	r23, r25
 728:	91 f0       	breq	.+36     	; 0x74e <displayResult+0x86>
    {  
        pos = 1;
        diffBack = DistanceBack;
 72a:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <diffBack+0x1>
 72e:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <diffBack>
        dist = DistanceBack;
        strcpy(side, "Back");
 732:	85 e0       	ldi	r24, 0x05	; 5
 734:	eb e8       	ldi	r30, 0x8B	; 139
 736:	f1 e0       	ldi	r31, 0x01	; 1
 738:	de 01       	movw	r26, r28
 73a:	11 96       	adiw	r26, 0x01	; 1
 73c:	01 90       	ld	r0, Z+
 73e:	0d 92       	st	X+, r0
 740:	8a 95       	dec	r24
 742:	e1 f7       	brne	.-8      	; 0x73c <displayResult+0x74>
    }
    if (diffBack != DistanceBack)
    {  
        pos = 1;
        diffBack = DistanceBack;
        dist = DistanceBack;
 744:	8b 01       	movw	r16, r22
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
    {  
        pos = 1;
 746:	ff 24       	eor	r15, r15
 748:	f3 94       	inc	r15
 74a:	e1 2c       	mov	r14, r1
 74c:	02 c0       	rjmp	.+4      	; 0x752 <displayResult+0x8a>
        diffFront = DistanceFront;
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
 74e:	f1 2c       	mov	r15, r1
 750:	e1 2c       	mov	r14, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 752:	4a e0       	ldi	r20, 0x0A	; 10
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	71 e0       	ldi	r23, 0x01	; 1
 758:	c8 01       	movw	r24, r16
 75a:	0e 94 2c 07 	call	0xe58	; 0xe58 <__itoa_ncheck>
    {
        changed = false;
        itoa(dist, lcd_string, 10);
    
	    // Write result on LCD screen
	    if(dist < 2)  // Distance smaller than minimum possible
 75e:	02 30       	cpi	r16, 0x02	; 2
 760:	11 05       	cpc	r17, r1
 762:	c8 f4       	brcc	.+50     	; 0x796 <displayResult+0xce>
	    {
		    lcd_clear(pos);
 764:	8f 2d       	mov	r24, r15
 766:	9e 2d       	mov	r25, r14
 768:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <lcd_clear>
		    lcd_gotoxy(7, pos);                                   
 76c:	6f 2d       	mov	r22, r15
 76e:	87 e0       	ldi	r24, 0x07	; 7
 770:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(" < 2 cm");
 774:	86 e3       	ldi	r24, 0x36	; 54
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
			
            uart_puts(side);		    
 77c:	ce 01       	movw	r24, r28
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
		    uart_puts(" object too close.");
 784:	8e e3       	ldi	r24, 0x3E	; 62
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
		    uart_puts("\n");   
 78c:	81 e5       	ldi	r24, 0x51	; 81
 78e:	91 e0       	ldi	r25, 0x01	; 1
 790:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
 794:	49 c0       	rjmp	.+146    	; 0x828 <displayResult+0x160>
	    }
	    else if(dist <= 400)
 796:	01 39       	cpi	r16, 0x91	; 145
 798:	11 40       	sbci	r17, 0x01	; 1
 79a:	28 f5       	brcc	.+74     	; 0x7e6 <displayResult+0x11e>
	    {
		    lcd_clear(pos);
 79c:	8f 2d       	mov	r24, r15
 79e:	9e 2d       	mov	r25, r14
 7a0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <lcd_clear>
		    lcd_gotoxy(7, pos);		    
 7a4:	6f 2d       	mov	r22, r15
 7a6:	87 e0       	ldi	r24, 0x07	; 7
 7a8:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(lcd_string);
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	91 e0       	ldi	r25, 0x01	; 1
 7b0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
            lcd_puts(" cm");                       
 7b4:	85 e6       	ldi	r24, 0x65	; 101
 7b6:	91 e0       	ldi	r25, 0x01	; 1
 7b8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
			
            uart_puts(side);		    
 7bc:	ce 01       	movw	r24, r28
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
		    uart_puts(" distance: ");
 7c4:	83 e5       	ldi	r24, 0x53	; 83
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
		    uart_puts(lcd_string);
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
            uart_puts(" cm");
 7d4:	85 e6       	ldi	r24, 0x65	; 101
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
		    uart_puts("\n");    
 7dc:	81 e5       	ldi	r24, 0x51	; 81
 7de:	91 e0       	ldi	r25, 0x01	; 1
 7e0:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
 7e4:	21 c0       	rjmp	.+66     	; 0x828 <displayResult+0x160>
	    }
	    else if(dist > 400)   // Distance greater than maximum possible
	    {
		    lcd_clear(pos);
 7e6:	8f 2d       	mov	r24, r15
 7e8:	9e 2d       	mov	r25, r14
 7ea:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <lcd_clear>
		    lcd_gotoxy(0, pos);
 7ee:	6f 2d       	mov	r22, r15
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(" > 400 cm");
 7f6:	8f e5       	ldi	r24, 0x5F	; 95
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
					    
            uart_puts(side);
 7fe:	ce 01       	movw	r24, r28
 800:	01 96       	adiw	r24, 0x01	; 1
 802:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
		    uart_puts(" distance is greater than 400 cm.");
 806:	89 e6       	ldi	r24, 0x69	; 105
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
		    uart_puts("\n"); 
 80e:	81 e5       	ldi	r24, 0x51	; 81
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_puts>
					    
		    uart_puts("Somethings wrong");
		    uart_puts("\n"); 
	    }          
    }             
 816:	08 c0       	rjmp	.+16     	; 0x828 <displayResult+0x160>
        diffFront = DistanceFront;
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
 818:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <diffBack>
 81c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <diffBack+0x1>
 820:	68 17       	cp	r22, r24
 822:	79 07       	cpc	r23, r25
 824:	09 f0       	breq	.+2      	; 0x828 <displayResult+0x160>
 826:	81 cf       	rjmp	.-254    	; 0x72a <displayResult+0x62>
					    
		    uart_puts("Somethings wrong");
		    uart_puts("\n"); 
	    }          
    }             
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	1f 91       	pop	r17
 838:	0f 91       	pop	r16
 83a:	ff 90       	pop	r15
 83c:	ef 90       	pop	r14
 83e:	08 95       	ret

00000840 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows.
 * 
 */
ISR(TIMER1_OVF_vect)
{
 840:	1f 92       	push	r1
 842:	0f 92       	push	r0
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	0f 92       	push	r0
 848:	11 24       	eor	r1, r1
 84a:	8f 92       	push	r8
 84c:	9f 92       	push	r9
 84e:	af 92       	push	r10
 850:	bf 92       	push	r11
 852:	cf 92       	push	r12
 854:	df 92       	push	r13
 856:	ef 92       	push	r14
 858:	ff 92       	push	r15
 85a:	2f 93       	push	r18
 85c:	3f 93       	push	r19
 85e:	4f 93       	push	r20
 860:	5f 93       	push	r21
 862:	6f 93       	push	r22
 864:	7f 93       	push	r23
 866:	8f 93       	push	r24
 868:	9f 93       	push	r25
 86a:	af 93       	push	r26
 86c:	bf 93       	push	r27
 86e:	ef 93       	push	r30
 870:	ff 93       	push	r31
    GPIO_toggle(&PORTC, speaker);
 872:	65 e0       	ldi	r22, 0x05	; 5
 874:	88 e2       	ldi	r24, 0x28	; 40
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
    // Display on LCD, uart
    displayResult(distFront, distBack);
 87c:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <distBack>
 880:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <distBack+0x1>
 884:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <distBack+0x2>
 888:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <distBack+0x3>
 88c:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 890:	6b 01       	movw	r12, r22
 892:	7c 01       	movw	r14, r24
 894:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <distFront>
 898:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <distFront+0x1>
 89c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <distFront+0x2>
 8a0:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <distFront+0x3>
 8a4:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 8a8:	dc 01       	movw	r26, r24
 8aa:	cb 01       	movw	r24, r22
 8ac:	b6 01       	movw	r22, r12
 8ae:	0e 94 64 03 	call	0x6c8	; 0x6c8 <displayResult>
    
    if(distFront < distBack)
 8b2:	80 90 a4 01 	lds	r8, 0x01A4	; 0x8001a4 <distFront>
 8b6:	90 90 a5 01 	lds	r9, 0x01A5	; 0x8001a5 <distFront+0x1>
 8ba:	a0 90 a6 01 	lds	r10, 0x01A6	; 0x8001a6 <distFront+0x2>
 8be:	b0 90 a7 01 	lds	r11, 0x01A7	; 0x8001a7 <distFront+0x3>
 8c2:	c0 90 a0 01 	lds	r12, 0x01A0	; 0x8001a0 <distBack>
 8c6:	d0 90 a1 01 	lds	r13, 0x01A1	; 0x8001a1 <distBack+0x1>
 8ca:	e0 90 a2 01 	lds	r14, 0x01A2	; 0x8001a2 <distBack+0x2>
 8ce:	f0 90 a3 01 	lds	r15, 0x01A3	; 0x8001a3 <distBack+0x3>
 8d2:	a7 01       	movw	r20, r14
 8d4:	96 01       	movw	r18, r12
 8d6:	c5 01       	movw	r24, r10
 8d8:	b4 01       	movw	r22, r8
 8da:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__cmpsf2>
 8de:	88 23       	and	r24, r24
 8e0:	4c f4       	brge	.+18     	; 0x8f4 <__vector_13+0xb4>
    {
        smallerDist = distFront;
 8e2:	c5 01       	movw	r24, r10
 8e4:	b4 01       	movw	r22, r8
 8e6:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 8ea:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <smallerDist+0x1>
 8ee:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <smallerDist>
 8f2:	08 c0       	rjmp	.+16     	; 0x904 <__stack+0x5>
    }
    else
    {
        smallerDist = distBack;
 8f4:	c7 01       	movw	r24, r14
 8f6:	b6 01       	movw	r22, r12
 8f8:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 8fc:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <smallerDist+0x1>
 900:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <smallerDist>
    }
            
    // Display on LEDs, change frequency of speaker tone with TIM2 prescaler        
    if(smallerDist <= 50)
 904:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <smallerDist>
 908:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <smallerDist+0x1>
 90c:	83 33       	cpi	r24, 0x33	; 51
 90e:	91 05       	cpc	r25, r1
 910:	10 f5       	brcc	.+68     	; 0x956 <__stack+0x57>
    {
        GPIO_write_high(&PORTC, LED1);
 912:	61 e0       	ldi	r22, 0x01	; 1
 914:	88 e2       	ldi	r24, 0x28	; 40
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED2);
 91c:	62 e0       	ldi	r22, 0x02	; 2
 91e:	88 e2       	ldi	r24, 0x28	; 40
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED3);
 926:	63 e0       	ldi	r22, 0x03	; 3
 928:	88 e2       	ldi	r24, 0x28	; 40
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED4);
 930:	64 e0       	ldi	r22, 0x04	; 4
 932:	88 e2       	ldi	r24, 0x28	; 40
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        
        TIM2_overflow_1ms();    
 93a:	e1 eb       	ldi	r30, 0xB1	; 177
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	8c 7f       	andi	r24, 0xFC	; 252
 942:	80 83       	st	Z, r24
 944:	80 81       	ld	r24, Z
 946:	84 60       	ori	r24, 0x04	; 4
 948:	80 83       	st	Z, r24
        TIM2_overflow_interrupt_enable();    
 94a:	e0 e7       	ldi	r30, 0x70	; 112
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	81 60       	ori	r24, 0x01	; 1
 952:	80 83       	st	Z, r24
 954:	80 c0       	rjmp	.+256    	; 0xa56 <__stack+0x157>
    }
    else if(smallerDist <= 75)
 956:	8c 34       	cpi	r24, 0x4C	; 76
 958:	91 05       	cpc	r25, r1
 95a:	10 f5       	brcc	.+68     	; 0x9a0 <__stack+0xa1>
    {
        GPIO_write_high(&PORTC, LED1);
 95c:	61 e0       	ldi	r22, 0x01	; 1
 95e:	88 e2       	ldi	r24, 0x28	; 40
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED2);
 966:	62 e0       	ldi	r22, 0x02	; 2
 968:	88 e2       	ldi	r24, 0x28	; 40
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED3);
 970:	63 e0       	ldi	r22, 0x03	; 3
 972:	88 e2       	ldi	r24, 0x28	; 40
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTC, LED4);
 97a:	64 e0       	ldi	r22, 0x04	; 4
 97c:	88 e2       	ldi	r24, 0x28	; 40
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        TIM2_overflow_2ms();
 984:	e1 eb       	ldi	r30, 0xB1	; 177
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	80 81       	ld	r24, Z
 98a:	8d 7f       	andi	r24, 0xFD	; 253
 98c:	80 83       	st	Z, r24
 98e:	80 81       	ld	r24, Z
 990:	85 60       	ori	r24, 0x05	; 5
 992:	80 83       	st	Z, r24
        TIM2_overflow_interrupt_enable();   
 994:	e0 e7       	ldi	r30, 0x70	; 112
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	81 60       	ori	r24, 0x01	; 1
 99c:	80 83       	st	Z, r24
 99e:	5b c0       	rjmp	.+182    	; 0xa56 <__stack+0x157>
    }
    else if(smallerDist <= 100)
 9a0:	85 36       	cpi	r24, 0x65	; 101
 9a2:	91 05       	cpc	r25, r1
 9a4:	10 f5       	brcc	.+68     	; 0x9ea <__stack+0xeb>
    {
        GPIO_write_high(&PORTC, LED1);
 9a6:	61 e0       	ldi	r22, 0x01	; 1
 9a8:	88 e2       	ldi	r24, 0x28	; 40
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTC, LED2);
 9b0:	62 e0       	ldi	r22, 0x02	; 2
 9b2:	88 e2       	ldi	r24, 0x28	; 40
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTC, LED3);
 9ba:	63 e0       	ldi	r22, 0x03	; 3
 9bc:	88 e2       	ldi	r24, 0x28	; 40
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED4);
 9c4:	64 e0       	ldi	r22, 0x04	; 4
 9c6:	88 e2       	ldi	r24, 0x28	; 40
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        TIM2_overflow_4ms();
 9ce:	e1 eb       	ldi	r30, 0xB1	; 177
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	8e 7f       	andi	r24, 0xFE	; 254
 9d6:	80 83       	st	Z, r24
 9d8:	80 81       	ld	r24, Z
 9da:	86 60       	ori	r24, 0x06	; 6
 9dc:	80 83       	st	Z, r24
        TIM2_overflow_interrupt_enable();   
 9de:	e0 e7       	ldi	r30, 0x70	; 112
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	81 60       	ori	r24, 0x01	; 1
 9e6:	80 83       	st	Z, r24
 9e8:	36 c0       	rjmp	.+108    	; 0xa56 <__stack+0x157>
    }
    else if(smallerDist <= 125)
 9ea:	8e 37       	cpi	r24, 0x7E	; 126
 9ec:	91 05       	cpc	r25, r1
 9ee:	d0 f4       	brcc	.+52     	; 0xa24 <__stack+0x125>
    {
        GPIO_write_high(&PORTC, LED1);
 9f0:	61 e0       	ldi	r22, 0x01	; 1
 9f2:	88 e2       	ldi	r24, 0x28	; 40
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTC, LED2);
 9fa:	62 e0       	ldi	r22, 0x02	; 2
 9fc:	88 e2       	ldi	r24, 0x28	; 40
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED3);
 a04:	63 e0       	ldi	r22, 0x03	; 3
 a06:	88 e2       	ldi	r24, 0x28	; 40
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED4);
 a0e:	64 e0       	ldi	r22, 0x04	; 4
 a10:	88 e2       	ldi	r24, 0x28	; 40
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        /*TIM2_overflow_16ms(); // too low freq.
        TIM2_overflow_interrupt_enable(); */ 
        TIM2_overflow_interrupt_disable(); 
 a18:	e0 e7       	ldi	r30, 0x70	; 112
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	8e 7f       	andi	r24, 0xFE	; 254
 a20:	80 83       	st	Z, r24
 a22:	19 c0       	rjmp	.+50     	; 0xa56 <__stack+0x157>
    }
    else
    {
        GPIO_write_low(&PORTC, LED1);
 a24:	61 e0       	ldi	r22, 0x01	; 1
 a26:	88 e2       	ldi	r24, 0x28	; 40
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED2);
 a2e:	62 e0       	ldi	r22, 0x02	; 2
 a30:	88 e2       	ldi	r24, 0x28	; 40
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED3);
 a38:	63 e0       	ldi	r22, 0x03	; 3
 a3a:	88 e2       	ldi	r24, 0x28	; 40
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTC, LED4);
 a42:	64 e0       	ldi	r22, 0x04	; 4
 a44:	88 e2       	ldi	r24, 0x28	; 40
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
        TIM2_overflow_interrupt_disable();
 a4c:	e0 e7       	ldi	r30, 0x70	; 112
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	80 81       	ld	r24, Z
 a52:	8e 7f       	andi	r24, 0xFE	; 254
 a54:	80 83       	st	Z, r24
    }
}
 a56:	ff 91       	pop	r31
 a58:	ef 91       	pop	r30
 a5a:	bf 91       	pop	r27
 a5c:	af 91       	pop	r26
 a5e:	9f 91       	pop	r25
 a60:	8f 91       	pop	r24
 a62:	7f 91       	pop	r23
 a64:	6f 91       	pop	r22
 a66:	5f 91       	pop	r21
 a68:	4f 91       	pop	r20
 a6a:	3f 91       	pop	r19
 a6c:	2f 91       	pop	r18
 a6e:	ff 90       	pop	r15
 a70:	ef 90       	pop	r14
 a72:	df 90       	pop	r13
 a74:	cf 90       	pop	r12
 a76:	bf 90       	pop	r11
 a78:	af 90       	pop	r10
 a7a:	9f 90       	pop	r9
 a7c:	8f 90       	pop	r8
 a7e:	0f 90       	pop	r0
 a80:	0f be       	out	0x3f, r0	; 63
 a82:	0f 90       	pop	r0
 a84:	1f 90       	pop	r1
 a86:	18 95       	reti

00000a88 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 a88:	1f 92       	push	r1
 a8a:	0f 92       	push	r0
 a8c:	0f b6       	in	r0, 0x3f	; 63
 a8e:	0f 92       	push	r0
 a90:	11 24       	eor	r1, r1
 a92:	2f 93       	push	r18
 a94:	8f 93       	push	r24
 a96:	9f 93       	push	r25
 a98:	ef 93       	push	r30
 a9a:	ff 93       	push	r31
 a9c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 aa0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 aa4:	8c 71       	andi	r24, 0x1C	; 28
 aa6:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <UART_RxHead>
 aaa:	ef 5f       	subi	r30, 0xFF	; 255
 aac:	ef 71       	andi	r30, 0x1F	; 31
 aae:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <UART_RxTail>
 ab2:	e9 17       	cp	r30, r25
 ab4:	39 f0       	breq	.+14     	; 0xac4 <__vector_18+0x3c>
 ab6:	e0 93 aa 01 	sts	0x01AA, r30	; 0x8001aa <UART_RxHead>
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	e3 55       	subi	r30, 0x53	; 83
 abe:	fe 4f       	sbci	r31, 0xFE	; 254
 ac0:	20 83       	st	Z, r18
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <__vector_18+0x3e>
 ac4:	82 e0       	ldi	r24, 0x02	; 2
 ac6:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <UART_LastRxError>
 aca:	89 2b       	or	r24, r25
 acc:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <UART_LastRxError>
 ad0:	ff 91       	pop	r31
 ad2:	ef 91       	pop	r30
 ad4:	9f 91       	pop	r25
 ad6:	8f 91       	pop	r24
 ad8:	2f 91       	pop	r18
 ada:	0f 90       	pop	r0
 adc:	0f be       	out	0x3f, r0	; 63
 ade:	0f 90       	pop	r0
 ae0:	1f 90       	pop	r1
 ae2:	18 95       	reti

00000ae4 <__vector_19>:
 ae4:	1f 92       	push	r1
 ae6:	0f 92       	push	r0
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	0f 92       	push	r0
 aec:	11 24       	eor	r1, r1
 aee:	8f 93       	push	r24
 af0:	9f 93       	push	r25
 af2:	ef 93       	push	r30
 af4:	ff 93       	push	r31
 af6:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <UART_TxHead>
 afa:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <UART_TxTail>
 afe:	98 17       	cp	r25, r24
 b00:	69 f0       	breq	.+26     	; 0xb1c <__vector_19+0x38>
 b02:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <UART_TxTail>
 b06:	ef 5f       	subi	r30, 0xFF	; 255
 b08:	ef 71       	andi	r30, 0x1F	; 31
 b0a:	e0 93 ab 01 	sts	0x01AB, r30	; 0x8001ab <UART_TxTail>
 b0e:	f0 e0       	ldi	r31, 0x00	; 0
 b10:	e3 53       	subi	r30, 0x33	; 51
 b12:	fe 4f       	sbci	r31, 0xFE	; 254
 b14:	80 81       	ld	r24, Z
 b16:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 b1a:	05 c0       	rjmp	.+10     	; 0xb26 <__vector_19+0x42>
 b1c:	e1 ec       	ldi	r30, 0xC1	; 193
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	80 81       	ld	r24, Z
 b22:	8f 7d       	andi	r24, 0xDF	; 223
 b24:	80 83       	st	Z, r24
 b26:	ff 91       	pop	r31
 b28:	ef 91       	pop	r30
 b2a:	9f 91       	pop	r25
 b2c:	8f 91       	pop	r24
 b2e:	0f 90       	pop	r0
 b30:	0f be       	out	0x3f, r0	; 63
 b32:	0f 90       	pop	r0
 b34:	1f 90       	pop	r1
 b36:	18 95       	reti

00000b38 <uart_init>:
 b38:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <UART_TxHead>
 b3c:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <UART_TxTail>
 b40:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <UART_RxHead>
 b44:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <UART_RxTail>
 b48:	99 23       	and	r25, r25
 b4a:	1c f4       	brge	.+6      	; 0xb52 <uart_init+0x1a>
 b4c:	22 e0       	ldi	r18, 0x02	; 2
 b4e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 b52:	90 78       	andi	r25, 0x80	; 128
 b54:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 b58:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 b5c:	88 e9       	ldi	r24, 0x98	; 152
 b5e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 b62:	86 e0       	ldi	r24, 0x06	; 6
 b64:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 b68:	08 95       	ret

00000b6a <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 b6a:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <UART_TxHead>
 b6e:	2f 5f       	subi	r18, 0xFF	; 255
 b70:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 b72:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <UART_TxTail>
 b76:	29 17       	cp	r18, r25
 b78:	e1 f3       	breq	.-8      	; 0xb72 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 b7a:	e2 2f       	mov	r30, r18
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	e3 53       	subi	r30, 0x33	; 51
 b80:	fe 4f       	sbci	r31, 0xFE	; 254
 b82:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 b84:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 b88:	e1 ec       	ldi	r30, 0xC1	; 193
 b8a:	f0 e0       	ldi	r31, 0x00	; 0
 b8c:	80 81       	ld	r24, Z
 b8e:	80 62       	ori	r24, 0x20	; 32
 b90:	80 83       	st	Z, r24
 b92:	08 95       	ret

00000b94 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 b94:	cf 93       	push	r28
 b96:	df 93       	push	r29
 b98:	ec 01       	movw	r28, r24
    while (*s)
 b9a:	88 81       	ld	r24, Y
 b9c:	88 23       	and	r24, r24
 b9e:	31 f0       	breq	.+12     	; 0xbac <uart_puts+0x18>
 ba0:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 ba2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 ba6:	89 91       	ld	r24, Y+
 ba8:	81 11       	cpse	r24, r1
 baa:	fb cf       	rjmp	.-10     	; 0xba2 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 bac:	df 91       	pop	r29
 bae:	cf 91       	pop	r28
 bb0:	08 95       	ret

00000bb2 <__cmpsf2>:
 bb2:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fp_cmp>
 bb6:	08 f4       	brcc	.+2      	; 0xbba <__cmpsf2+0x8>
 bb8:	81 e0       	ldi	r24, 0x01	; 1
 bba:	08 95       	ret

00000bbc <__fixunssfsi>:
 bbc:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_splitA>
 bc0:	88 f0       	brcs	.+34     	; 0xbe4 <__fixunssfsi+0x28>
 bc2:	9f 57       	subi	r25, 0x7F	; 127
 bc4:	98 f0       	brcs	.+38     	; 0xbec <__fixunssfsi+0x30>
 bc6:	b9 2f       	mov	r27, r25
 bc8:	99 27       	eor	r25, r25
 bca:	b7 51       	subi	r27, 0x17	; 23
 bcc:	b0 f0       	brcs	.+44     	; 0xbfa <__fixunssfsi+0x3e>
 bce:	e1 f0       	breq	.+56     	; 0xc08 <__fixunssfsi+0x4c>
 bd0:	66 0f       	add	r22, r22
 bd2:	77 1f       	adc	r23, r23
 bd4:	88 1f       	adc	r24, r24
 bd6:	99 1f       	adc	r25, r25
 bd8:	1a f0       	brmi	.+6      	; 0xbe0 <__fixunssfsi+0x24>
 bda:	ba 95       	dec	r27
 bdc:	c9 f7       	brne	.-14     	; 0xbd0 <__fixunssfsi+0x14>
 bde:	14 c0       	rjmp	.+40     	; 0xc08 <__fixunssfsi+0x4c>
 be0:	b1 30       	cpi	r27, 0x01	; 1
 be2:	91 f0       	breq	.+36     	; 0xc08 <__fixunssfsi+0x4c>
 be4:	0e 94 90 06 	call	0xd20	; 0xd20 <__fp_zero>
 be8:	b1 e0       	ldi	r27, 0x01	; 1
 bea:	08 95       	ret
 bec:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_zero>
 bf0:	67 2f       	mov	r22, r23
 bf2:	78 2f       	mov	r23, r24
 bf4:	88 27       	eor	r24, r24
 bf6:	b8 5f       	subi	r27, 0xF8	; 248
 bf8:	39 f0       	breq	.+14     	; 0xc08 <__fixunssfsi+0x4c>
 bfa:	b9 3f       	cpi	r27, 0xF9	; 249
 bfc:	cc f3       	brlt	.-14     	; 0xbf0 <__fixunssfsi+0x34>
 bfe:	86 95       	lsr	r24
 c00:	77 95       	ror	r23
 c02:	67 95       	ror	r22
 c04:	b3 95       	inc	r27
 c06:	d9 f7       	brne	.-10     	; 0xbfe <__fixunssfsi+0x42>
 c08:	3e f4       	brtc	.+14     	; 0xc18 <__fixunssfsi+0x5c>
 c0a:	90 95       	com	r25
 c0c:	80 95       	com	r24
 c0e:	70 95       	com	r23
 c10:	61 95       	neg	r22
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	8f 4f       	sbci	r24, 0xFF	; 255
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	08 95       	ret

00000c1a <__floatunsisf>:
 c1a:	e8 94       	clt
 c1c:	09 c0       	rjmp	.+18     	; 0xc30 <__floatsisf+0x12>

00000c1e <__floatsisf>:
 c1e:	97 fb       	bst	r25, 7
 c20:	3e f4       	brtc	.+14     	; 0xc30 <__floatsisf+0x12>
 c22:	90 95       	com	r25
 c24:	80 95       	com	r24
 c26:	70 95       	com	r23
 c28:	61 95       	neg	r22
 c2a:	7f 4f       	sbci	r23, 0xFF	; 255
 c2c:	8f 4f       	sbci	r24, 0xFF	; 255
 c2e:	9f 4f       	sbci	r25, 0xFF	; 255
 c30:	99 23       	and	r25, r25
 c32:	a9 f0       	breq	.+42     	; 0xc5e <__floatsisf+0x40>
 c34:	f9 2f       	mov	r31, r25
 c36:	96 e9       	ldi	r25, 0x96	; 150
 c38:	bb 27       	eor	r27, r27
 c3a:	93 95       	inc	r25
 c3c:	f6 95       	lsr	r31
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b7 95       	ror	r27
 c46:	f1 11       	cpse	r31, r1
 c48:	f8 cf       	rjmp	.-16     	; 0xc3a <__floatsisf+0x1c>
 c4a:	fa f4       	brpl	.+62     	; 0xc8a <__floatsisf+0x6c>
 c4c:	bb 0f       	add	r27, r27
 c4e:	11 f4       	brne	.+4      	; 0xc54 <__floatsisf+0x36>
 c50:	60 ff       	sbrs	r22, 0
 c52:	1b c0       	rjmp	.+54     	; 0xc8a <__floatsisf+0x6c>
 c54:	6f 5f       	subi	r22, 0xFF	; 255
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	16 c0       	rjmp	.+44     	; 0xc8a <__floatsisf+0x6c>
 c5e:	88 23       	and	r24, r24
 c60:	11 f0       	breq	.+4      	; 0xc66 <__floatsisf+0x48>
 c62:	96 e9       	ldi	r25, 0x96	; 150
 c64:	11 c0       	rjmp	.+34     	; 0xc88 <__floatsisf+0x6a>
 c66:	77 23       	and	r23, r23
 c68:	21 f0       	breq	.+8      	; 0xc72 <__floatsisf+0x54>
 c6a:	9e e8       	ldi	r25, 0x8E	; 142
 c6c:	87 2f       	mov	r24, r23
 c6e:	76 2f       	mov	r23, r22
 c70:	05 c0       	rjmp	.+10     	; 0xc7c <__floatsisf+0x5e>
 c72:	66 23       	and	r22, r22
 c74:	71 f0       	breq	.+28     	; 0xc92 <__floatsisf+0x74>
 c76:	96 e8       	ldi	r25, 0x86	; 134
 c78:	86 2f       	mov	r24, r22
 c7a:	70 e0       	ldi	r23, 0x00	; 0
 c7c:	60 e0       	ldi	r22, 0x00	; 0
 c7e:	2a f0       	brmi	.+10     	; 0xc8a <__floatsisf+0x6c>
 c80:	9a 95       	dec	r25
 c82:	66 0f       	add	r22, r22
 c84:	77 1f       	adc	r23, r23
 c86:	88 1f       	adc	r24, r24
 c88:	da f7       	brpl	.-10     	; 0xc80 <__floatsisf+0x62>
 c8a:	88 0f       	add	r24, r24
 c8c:	96 95       	lsr	r25
 c8e:	87 95       	ror	r24
 c90:	97 f9       	bld	r25, 7
 c92:	08 95       	ret

00000c94 <__fp_cmp>:
 c94:	99 0f       	add	r25, r25
 c96:	00 08       	sbc	r0, r0
 c98:	55 0f       	add	r21, r21
 c9a:	aa 0b       	sbc	r26, r26
 c9c:	e0 e8       	ldi	r30, 0x80	; 128
 c9e:	fe ef       	ldi	r31, 0xFE	; 254
 ca0:	16 16       	cp	r1, r22
 ca2:	17 06       	cpc	r1, r23
 ca4:	e8 07       	cpc	r30, r24
 ca6:	f9 07       	cpc	r31, r25
 ca8:	c0 f0       	brcs	.+48     	; 0xcda <__fp_cmp+0x46>
 caa:	12 16       	cp	r1, r18
 cac:	13 06       	cpc	r1, r19
 cae:	e4 07       	cpc	r30, r20
 cb0:	f5 07       	cpc	r31, r21
 cb2:	98 f0       	brcs	.+38     	; 0xcda <__fp_cmp+0x46>
 cb4:	62 1b       	sub	r22, r18
 cb6:	73 0b       	sbc	r23, r19
 cb8:	84 0b       	sbc	r24, r20
 cba:	95 0b       	sbc	r25, r21
 cbc:	39 f4       	brne	.+14     	; 0xccc <__fp_cmp+0x38>
 cbe:	0a 26       	eor	r0, r26
 cc0:	61 f0       	breq	.+24     	; 0xcda <__fp_cmp+0x46>
 cc2:	23 2b       	or	r18, r19
 cc4:	24 2b       	or	r18, r20
 cc6:	25 2b       	or	r18, r21
 cc8:	21 f4       	brne	.+8      	; 0xcd2 <__fp_cmp+0x3e>
 cca:	08 95       	ret
 ccc:	0a 26       	eor	r0, r26
 cce:	09 f4       	brne	.+2      	; 0xcd2 <__fp_cmp+0x3e>
 cd0:	a1 40       	sbci	r26, 0x01	; 1
 cd2:	a6 95       	lsr	r26
 cd4:	8f ef       	ldi	r24, 0xFF	; 255
 cd6:	81 1d       	adc	r24, r1
 cd8:	81 1d       	adc	r24, r1
 cda:	08 95       	ret

00000cdc <__fp_split3>:
 cdc:	57 fd       	sbrc	r21, 7
 cde:	90 58       	subi	r25, 0x80	; 128
 ce0:	44 0f       	add	r20, r20
 ce2:	55 1f       	adc	r21, r21
 ce4:	59 f0       	breq	.+22     	; 0xcfc <__fp_splitA+0x10>
 ce6:	5f 3f       	cpi	r21, 0xFF	; 255
 ce8:	71 f0       	breq	.+28     	; 0xd06 <__fp_splitA+0x1a>
 cea:	47 95       	ror	r20

00000cec <__fp_splitA>:
 cec:	88 0f       	add	r24, r24
 cee:	97 fb       	bst	r25, 7
 cf0:	99 1f       	adc	r25, r25
 cf2:	61 f0       	breq	.+24     	; 0xd0c <__fp_splitA+0x20>
 cf4:	9f 3f       	cpi	r25, 0xFF	; 255
 cf6:	79 f0       	breq	.+30     	; 0xd16 <__fp_splitA+0x2a>
 cf8:	87 95       	ror	r24
 cfa:	08 95       	ret
 cfc:	12 16       	cp	r1, r18
 cfe:	13 06       	cpc	r1, r19
 d00:	14 06       	cpc	r1, r20
 d02:	55 1f       	adc	r21, r21
 d04:	f2 cf       	rjmp	.-28     	; 0xcea <__fp_split3+0xe>
 d06:	46 95       	lsr	r20
 d08:	f1 df       	rcall	.-30     	; 0xcec <__fp_splitA>
 d0a:	08 c0       	rjmp	.+16     	; 0xd1c <__fp_splitA+0x30>
 d0c:	16 16       	cp	r1, r22
 d0e:	17 06       	cpc	r1, r23
 d10:	18 06       	cpc	r1, r24
 d12:	99 1f       	adc	r25, r25
 d14:	f1 cf       	rjmp	.-30     	; 0xcf8 <__fp_splitA+0xc>
 d16:	86 95       	lsr	r24
 d18:	71 05       	cpc	r23, r1
 d1a:	61 05       	cpc	r22, r1
 d1c:	08 94       	sec
 d1e:	08 95       	ret

00000d20 <__fp_zero>:
 d20:	e8 94       	clt

00000d22 <__fp_szero>:
 d22:	bb 27       	eor	r27, r27
 d24:	66 27       	eor	r22, r22
 d26:	77 27       	eor	r23, r23
 d28:	cb 01       	movw	r24, r22
 d2a:	97 f9       	bld	r25, 7
 d2c:	08 95       	ret

00000d2e <__mulsf3>:
 d2e:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3x>
 d32:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_round>
 d36:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_pscA>
 d3a:	38 f0       	brcs	.+14     	; 0xd4a <__mulsf3+0x1c>
 d3c:	0e 94 14 07 	call	0xe28	; 0xe28 <__fp_pscB>
 d40:	20 f0       	brcs	.+8      	; 0xd4a <__mulsf3+0x1c>
 d42:	95 23       	and	r25, r21
 d44:	11 f0       	breq	.+4      	; 0xd4a <__mulsf3+0x1c>
 d46:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__fp_inf>
 d4a:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_nan>
 d4e:	11 24       	eor	r1, r1
 d50:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_szero>

00000d54 <__mulsf3x>:
 d54:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__fp_split3>
 d58:	70 f3       	brcs	.-36     	; 0xd36 <__mulsf3+0x8>

00000d5a <__mulsf3_pse>:
 d5a:	95 9f       	mul	r25, r21
 d5c:	c1 f3       	breq	.-16     	; 0xd4e <__mulsf3+0x20>
 d5e:	95 0f       	add	r25, r21
 d60:	50 e0       	ldi	r21, 0x00	; 0
 d62:	55 1f       	adc	r21, r21
 d64:	62 9f       	mul	r22, r18
 d66:	f0 01       	movw	r30, r0
 d68:	72 9f       	mul	r23, r18
 d6a:	bb 27       	eor	r27, r27
 d6c:	f0 0d       	add	r31, r0
 d6e:	b1 1d       	adc	r27, r1
 d70:	63 9f       	mul	r22, r19
 d72:	aa 27       	eor	r26, r26
 d74:	f0 0d       	add	r31, r0
 d76:	b1 1d       	adc	r27, r1
 d78:	aa 1f       	adc	r26, r26
 d7a:	64 9f       	mul	r22, r20
 d7c:	66 27       	eor	r22, r22
 d7e:	b0 0d       	add	r27, r0
 d80:	a1 1d       	adc	r26, r1
 d82:	66 1f       	adc	r22, r22
 d84:	82 9f       	mul	r24, r18
 d86:	22 27       	eor	r18, r18
 d88:	b0 0d       	add	r27, r0
 d8a:	a1 1d       	adc	r26, r1
 d8c:	62 1f       	adc	r22, r18
 d8e:	73 9f       	mul	r23, r19
 d90:	b0 0d       	add	r27, r0
 d92:	a1 1d       	adc	r26, r1
 d94:	62 1f       	adc	r22, r18
 d96:	83 9f       	mul	r24, r19
 d98:	a0 0d       	add	r26, r0
 d9a:	61 1d       	adc	r22, r1
 d9c:	22 1f       	adc	r18, r18
 d9e:	74 9f       	mul	r23, r20
 da0:	33 27       	eor	r19, r19
 da2:	a0 0d       	add	r26, r0
 da4:	61 1d       	adc	r22, r1
 da6:	23 1f       	adc	r18, r19
 da8:	84 9f       	mul	r24, r20
 daa:	60 0d       	add	r22, r0
 dac:	21 1d       	adc	r18, r1
 dae:	82 2f       	mov	r24, r18
 db0:	76 2f       	mov	r23, r22
 db2:	6a 2f       	mov	r22, r26
 db4:	11 24       	eor	r1, r1
 db6:	9f 57       	subi	r25, 0x7F	; 127
 db8:	50 40       	sbci	r21, 0x00	; 0
 dba:	9a f0       	brmi	.+38     	; 0xde2 <__mulsf3_pse+0x88>
 dbc:	f1 f0       	breq	.+60     	; 0xdfa <__mulsf3_pse+0xa0>
 dbe:	88 23       	and	r24, r24
 dc0:	4a f0       	brmi	.+18     	; 0xdd4 <__mulsf3_pse+0x7a>
 dc2:	ee 0f       	add	r30, r30
 dc4:	ff 1f       	adc	r31, r31
 dc6:	bb 1f       	adc	r27, r27
 dc8:	66 1f       	adc	r22, r22
 dca:	77 1f       	adc	r23, r23
 dcc:	88 1f       	adc	r24, r24
 dce:	91 50       	subi	r25, 0x01	; 1
 dd0:	50 40       	sbci	r21, 0x00	; 0
 dd2:	a9 f7       	brne	.-22     	; 0xdbe <__mulsf3_pse+0x64>
 dd4:	9e 3f       	cpi	r25, 0xFE	; 254
 dd6:	51 05       	cpc	r21, r1
 dd8:	80 f0       	brcs	.+32     	; 0xdfa <__mulsf3_pse+0xa0>
 dda:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__fp_inf>
 dde:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_szero>
 de2:	5f 3f       	cpi	r21, 0xFF	; 255
 de4:	e4 f3       	brlt	.-8      	; 0xdde <__mulsf3_pse+0x84>
 de6:	98 3e       	cpi	r25, 0xE8	; 232
 de8:	d4 f3       	brlt	.-12     	; 0xdde <__mulsf3_pse+0x84>
 dea:	86 95       	lsr	r24
 dec:	77 95       	ror	r23
 dee:	67 95       	ror	r22
 df0:	b7 95       	ror	r27
 df2:	f7 95       	ror	r31
 df4:	e7 95       	ror	r30
 df6:	9f 5f       	subi	r25, 0xFF	; 255
 df8:	c1 f7       	brne	.-16     	; 0xdea <__mulsf3_pse+0x90>
 dfa:	fe 2b       	or	r31, r30
 dfc:	88 0f       	add	r24, r24
 dfe:	91 1d       	adc	r25, r1
 e00:	96 95       	lsr	r25
 e02:	87 95       	ror	r24
 e04:	97 f9       	bld	r25, 7
 e06:	08 95       	ret

00000e08 <__fp_inf>:
 e08:	97 f9       	bld	r25, 7
 e0a:	9f 67       	ori	r25, 0x7F	; 127
 e0c:	80 e8       	ldi	r24, 0x80	; 128
 e0e:	70 e0       	ldi	r23, 0x00	; 0
 e10:	60 e0       	ldi	r22, 0x00	; 0
 e12:	08 95       	ret

00000e14 <__fp_nan>:
 e14:	9f ef       	ldi	r25, 0xFF	; 255
 e16:	80 ec       	ldi	r24, 0xC0	; 192
 e18:	08 95       	ret

00000e1a <__fp_pscA>:
 e1a:	00 24       	eor	r0, r0
 e1c:	0a 94       	dec	r0
 e1e:	16 16       	cp	r1, r22
 e20:	17 06       	cpc	r1, r23
 e22:	18 06       	cpc	r1, r24
 e24:	09 06       	cpc	r0, r25
 e26:	08 95       	ret

00000e28 <__fp_pscB>:
 e28:	00 24       	eor	r0, r0
 e2a:	0a 94       	dec	r0
 e2c:	12 16       	cp	r1, r18
 e2e:	13 06       	cpc	r1, r19
 e30:	14 06       	cpc	r1, r20
 e32:	05 06       	cpc	r0, r21
 e34:	08 95       	ret

00000e36 <__fp_round>:
 e36:	09 2e       	mov	r0, r25
 e38:	03 94       	inc	r0
 e3a:	00 0c       	add	r0, r0
 e3c:	11 f4       	brne	.+4      	; 0xe42 <__fp_round+0xc>
 e3e:	88 23       	and	r24, r24
 e40:	52 f0       	brmi	.+20     	; 0xe56 <__fp_round+0x20>
 e42:	bb 0f       	add	r27, r27
 e44:	40 f4       	brcc	.+16     	; 0xe56 <__fp_round+0x20>
 e46:	bf 2b       	or	r27, r31
 e48:	11 f4       	brne	.+4      	; 0xe4e <__fp_round+0x18>
 e4a:	60 ff       	sbrs	r22, 0
 e4c:	04 c0       	rjmp	.+8      	; 0xe56 <__fp_round+0x20>
 e4e:	6f 5f       	subi	r22, 0xFF	; 255
 e50:	7f 4f       	sbci	r23, 0xFF	; 255
 e52:	8f 4f       	sbci	r24, 0xFF	; 255
 e54:	9f 4f       	sbci	r25, 0xFF	; 255
 e56:	08 95       	ret

00000e58 <__itoa_ncheck>:
 e58:	bb 27       	eor	r27, r27
 e5a:	4a 30       	cpi	r20, 0x0A	; 10
 e5c:	31 f4       	brne	.+12     	; 0xe6a <__itoa_ncheck+0x12>
 e5e:	99 23       	and	r25, r25
 e60:	22 f4       	brpl	.+8      	; 0xe6a <__itoa_ncheck+0x12>
 e62:	bd e2       	ldi	r27, 0x2D	; 45
 e64:	90 95       	com	r25
 e66:	81 95       	neg	r24
 e68:	9f 4f       	sbci	r25, 0xFF	; 255
 e6a:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__utoa_common>

00000e6e <__utoa_ncheck>:
 e6e:	bb 27       	eor	r27, r27

00000e70 <__utoa_common>:
 e70:	fb 01       	movw	r30, r22
 e72:	55 27       	eor	r21, r21
 e74:	aa 27       	eor	r26, r26
 e76:	88 0f       	add	r24, r24
 e78:	99 1f       	adc	r25, r25
 e7a:	aa 1f       	adc	r26, r26
 e7c:	a4 17       	cp	r26, r20
 e7e:	10 f0       	brcs	.+4      	; 0xe84 <__utoa_common+0x14>
 e80:	a4 1b       	sub	r26, r20
 e82:	83 95       	inc	r24
 e84:	50 51       	subi	r21, 0x10	; 16
 e86:	b9 f7       	brne	.-18     	; 0xe76 <__utoa_common+0x6>
 e88:	a0 5d       	subi	r26, 0xD0	; 208
 e8a:	aa 33       	cpi	r26, 0x3A	; 58
 e8c:	08 f0       	brcs	.+2      	; 0xe90 <__utoa_common+0x20>
 e8e:	a9 5d       	subi	r26, 0xD9	; 217
 e90:	a1 93       	st	Z+, r26
 e92:	00 97       	sbiw	r24, 0x00	; 0
 e94:	79 f7       	brne	.-34     	; 0xe74 <__utoa_common+0x4>
 e96:	b1 11       	cpse	r27, r1
 e98:	b1 93       	st	Z+, r27
 e9a:	11 92       	st	Z+, r1
 e9c:	cb 01       	movw	r24, r22
 e9e:	0c 94 51 07 	jmp	0xea2	; 0xea2 <strrev>

00000ea2 <strrev>:
 ea2:	dc 01       	movw	r26, r24
 ea4:	fc 01       	movw	r30, r24
 ea6:	67 2f       	mov	r22, r23
 ea8:	71 91       	ld	r23, Z+
 eaa:	77 23       	and	r23, r23
 eac:	e1 f7       	brne	.-8      	; 0xea6 <strrev+0x4>
 eae:	32 97       	sbiw	r30, 0x02	; 2
 eb0:	04 c0       	rjmp	.+8      	; 0xeba <strrev+0x18>
 eb2:	7c 91       	ld	r23, X
 eb4:	6d 93       	st	X+, r22
 eb6:	70 83       	st	Z, r23
 eb8:	62 91       	ld	r22, -Z
 eba:	ae 17       	cp	r26, r30
 ebc:	bf 07       	cpc	r27, r31
 ebe:	c8 f3       	brcs	.-14     	; 0xeb2 <strrev+0x10>
 ec0:	08 95       	ret

00000ec2 <_exit>:
 ec2:	f8 94       	cli

00000ec4 <__stop_program>:
 ec4:	ff cf       	rjmp	.-2      	; 0xec4 <__stop_program>
