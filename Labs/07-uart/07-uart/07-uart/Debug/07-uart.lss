
07-uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000bf8  00000c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  0080014c  0080014c  00000cd8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b8  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aef  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b18  00000000  00000000  0000311b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00003c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005af  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cab  00000000  00000000  0000449f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000514a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__vector_18>
  4c:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 39       	cpi	r26, 0x97	; 151
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_gotoxy>:
 124:	61 11       	cpse	r22, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <lcd_gotoxy+0xc>
 128:	80 58       	subi	r24, 0x80	; 128
 12a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 12e:	08 95       	ret
 130:	80 54       	subi	r24, 0x40	; 64
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret

00000138 <lcd_clrscr>:
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_putc>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 146:	08 95       	ret

00000148 <lcd_puts>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <lcd_puts+0x1a>
 158:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <lcd_puts+0x10>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 16c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 170:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 172:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 174:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 176:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 178:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	99 ef       	ldi	r25, 0xF9	; 249
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x1c>
 184:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 186:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 188:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x30>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x40>
 1a8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x4a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x50>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ba:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x5c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x62>
 1ca:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1d8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <main>:
 * Main function where the program execution begins. Use Timer/Counter1
 * and start ADC conversion four times per second. Send value to LCD
 * and UART.
 */
int main(void)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	2a 97       	sbiw	r28, 0x0a	; 10
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 200:	42 e0       	ldi	r20, 0x02	; 2
 202:	8e 01       	movw	r16, r28
 204:	0f 5f       	subi	r16, 0xFF	; 255
 206:	1f 4f       	sbci	r17, 0xFF	; 255
 208:	b8 01       	movw	r22, r16
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__itoa_ncheck>
    char parity_string[10];
    itoa(0, parity_string, 2);
    printf(parity_string);
 212:	1f 93       	push	r17
 214:	0f 93       	push	r16
 216:	0e 94 0c 03 	call	0x618	; 0x618 <printf>
    
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 21a:	8c e0       	ldi	r24, 0x0C	; 12
 21c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_init>
    lcd_gotoxy(1, 0);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("value:");
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(3, 1);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("key:");
 238:	87 e0       	ldi	r24, 0x07	; 7
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
 240:	ec e7       	ldi	r30, 0x7C	; 124
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	80 64       	ori	r24, 0x40	; 64
 248:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
 24a:	80 81       	ld	r24, Z
 24c:	8f 77       	andi	r24, 0x7F	; 127
 24e:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
 250:	80 81       	ld	r24, Z
 252:	80 7f       	andi	r24, 0xF0	; 240
 254:	80 83       	st	Z, r24
           
    // Enable ADC module
    ADCSRA |= (1 << ADEN);
 256:	ea e7       	ldi	r30, 0x7A	; 122
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	80 83       	st	Z, r24

    // Enable conversion complete interrupt
    ADCSRA |= (1 << ADIE);
 260:	80 81       	ld	r24, Z
 262:	88 60       	ori	r24, 0x08	; 8
 264:	80 83       	st	Z, r24

    // Set clock prescaler to 128
    ADCSRA |= ((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
 266:	80 81       	ld	r24, Z
 268:	87 60       	ori	r24, 0x07	; 7
 26a:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
    TIM1_overflow_1s();
 26c:	e1 e8       	ldi	r30, 0x81	; 129
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	8c 7f       	andi	r24, 0xFC	; 252
 274:	80 83       	st	Z, r24
 276:	80 81       	ld	r24, Z
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 27c:	ef e6       	ldi	r30, 0x6F	; 111
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	81 60       	ori	r24, 0x01	; 1
 284:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 286:	87 e6       	ldi	r24, 0x67	; 103
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 aa 02 	call	0x554	; 0x554 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 28e:	78 94       	sei
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	ff cf       	rjmp	.-2      	; 0x294 <main+0xa8>

00000296 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	8f 93       	push	r24
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
    // Start ADC conversion
    ADCSRA |= (1 << ADSC);
 2a6:	ea e7       	ldi	r30, 0x7A	; 122
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	80 64       	ori	r24, 0x40	; 64
 2ae:	80 83       	st	Z, r24
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	8f 91       	pop	r24
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <__vector_21>:
/**
 * ISR starts when ADC complets the convertion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	2f 97       	sbiw	r28, 0x0f	; 15
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	cd bf       	out	0x3d, r28	; 61
    uint16_t value;
    char lcd_string[5];
    
    value = ADC;
 2f4:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2f8:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 2fc:	4a e0       	ldi	r20, 0x0A	; 10
 2fe:	be 01       	movw	r22, r28
 300:	6f 5f       	subi	r22, 0xFF	; 255
 302:	7f 4f       	sbci	r23, 0xFF	; 255
 304:	c8 01       	movw	r24, r16
 306:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__itoa_ncheck>
    
    // Print in decimal on LCD
    itoa(value, lcd_string, 10);
    lcd_gotoxy(8, 0);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	88 e0       	ldi	r24, 0x08	; 8
 30e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("      ");
 312:	8c e0       	ldi	r24, 0x0C	; 12
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8, 0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	88 e0       	ldi	r24, 0x08	; 8
 31e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts(lcd_string);
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    
    // Send to uart in decimal
    if (value < 700)    // max value is 650
 32a:	0c 3b       	cpi	r16, 0xBC	; 188
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	18 07       	cpc	r17, r24
 330:	60 f4       	brcc	.+24     	; 0x34a <__vector_21+0x8a>
    {
        uart_puts("ADC value in decimal: ");
 332:	83 e1       	ldi	r24, 0x13	; 19
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uart_puts>
        uart_puts(lcd_string);
 33a:	ce 01       	movw	r24, r28
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uart_puts>
        uart_puts("\n");    // \n ... o radek dale; \r ... na zacatek radku
 342:	8a e2       	ldi	r24, 0x2A	; 42
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uart_puts>
 34a:	40 e1       	ldi	r20, 0x10	; 16
 34c:	be 01       	movw	r22, r28
 34e:	6f 5f       	subi	r22, 0xFF	; 255
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	c8 01       	movw	r24, r16
 354:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__itoa_ncheck>
    }
        
    // Print in hexa on LCD 
    itoa(value, lcd_string, 16);
    lcd_gotoxy(13, 0);
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	8d e0       	ldi	r24, 0x0D	; 13
 35c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("      ");
 360:	8c e0       	ldi	r24, 0x0C	; 12
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(13, 0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	8d e0       	ldi	r24, 0x0D	; 13
 36c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts(lcd_string);
 370:	ce 01       	movw	r24, r28
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    
    // Print pressed key on LCD
    lcd_gotoxy(8, 1);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	88 e0       	ldi	r24, 0x08	; 8
 37c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("      ");
 380:	8c e0       	ldi	r24, 0x0C	; 12
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    if(value >= 1016)    //hodnota ADC se muze lisit -> nutny rozsah
 388:	08 3f       	cpi	r16, 0xF8	; 248
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	18 07       	cpc	r17, r24
 38e:	48 f0       	brcs	.+18     	; 0x3a2 <__vector_21+0xe2>
    {
        lcd_gotoxy(8, 1);
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
        lcd_puts("None");
 398:	8c e2       	ldi	r24, 0x2C	; 44
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3a0:	3a c0       	rjmp	.+116    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    }
    else if(value >= 630)
 3a2:	06 37       	cpi	r16, 0x76	; 118
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	18 07       	cpc	r17, r24
 3a8:	48 f0       	brcs	.+18     	; 0x3bc <__vector_21+0xfc>
    {
        lcd_gotoxy(8, 1);
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	88 e0       	ldi	r24, 0x08	; 8
 3ae:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
        lcd_puts("Select");
 3b2:	81 e3       	ldi	r24, 0x31	; 49
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3ba:	2d c0       	rjmp	.+90     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    }
    else if(value >= 390)
 3bc:	06 38       	cpi	r16, 0x86	; 134
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	18 07       	cpc	r17, r24
 3c2:	48 f0       	brcs	.+18     	; 0x3d6 <__vector_21+0x116>
    {
        lcd_gotoxy(8, 1);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	88 e0       	ldi	r24, 0x08	; 8
 3c8:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
        lcd_puts("Left");
 3cc:	88 e3       	ldi	r24, 0x38	; 56
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3d4:	20 c0       	rjmp	.+64     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    }
    else if(value >= 230)
 3d6:	06 3e       	cpi	r16, 0xE6	; 230
 3d8:	11 05       	cpc	r17, r1
 3da:	48 f0       	brcs	.+18     	; 0x3ee <__vector_21+0x12e>
    {
        lcd_gotoxy(8, 1);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	88 e0       	ldi	r24, 0x08	; 8
 3e0:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
        lcd_puts("Down");
 3e4:	8d e3       	ldi	r24, 0x3D	; 61
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3ec:	14 c0       	rjmp	.+40     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    }
    else if(value >= 90)
 3ee:	0a 35       	cpi	r16, 0x5A	; 90
 3f0:	11 05       	cpc	r17, r1
 3f2:	48 f0       	brcs	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    {
        lcd_gotoxy(8, 1);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	88 e0       	ldi	r24, 0x08	; 8
 3f8:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
        lcd_puts("Up");
 3fc:	82 e4       	ldi	r24, 0x42	; 66
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 404:	08 c0       	rjmp	.+16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    }
    else
    {
        lcd_gotoxy(8, 1);
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	88 e0       	ldi	r24, 0x08	; 8
 40a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
        lcd_puts("Right");
 40e:	85 e4       	ldi	r24, 0x45	; 69
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 416:	42 e0       	ldi	r20, 0x02	; 2
 418:	be 01       	movw	r22, r28
 41a:	6a 5f       	subi	r22, 0xFA	; 250
 41c:	7f 4f       	sbci	r23, 0xFF	; 255
 41e:	c8 01       	movw	r24, r16
 420:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__itoa_ncheck>
 424:	fe 01       	movw	r30, r28
 426:	36 96       	adiw	r30, 0x06	; 6
 428:	9e 01       	movw	r18, r28
 42a:	20 5f       	subi	r18, 0xF0	; 240
 42c:	3f 4f       	sbci	r19, 0xFF	; 255
    }
    
    // Print parity bit to LCD ... set to E (even)
    char parity_string[10];
    itoa(value, parity_string, 2);
    uint8_t counter = 0;
 42e:	10 e0       	ldi	r17, 0x00	; 0
    
    for(int i = 0; i < 10; i++)
    {
        if(parity_string[i] == '1')
 430:	81 91       	ld	r24, Z+
 432:	81 33       	cpi	r24, 0x31	; 49
 434:	09 f4       	brne	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
        {
            counter++;
 436:	1f 5f       	subi	r17, 0xFF	; 255
    // Print parity bit to LCD ... set to E (even)
    char parity_string[10];
    itoa(value, parity_string, 2);
    uint8_t counter = 0;
    
    for(int i = 0; i < 10; i++)
 438:	e2 17       	cp	r30, r18
 43a:	f3 07       	cpc	r31, r19
 43c:	c9 f7       	brne	.-14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        {
            counter++;
        }
    }
    
    lcd_gotoxy(15, 1);
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	8f e0       	ldi	r24, 0x0F	; 15
 442:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_putc(' ');
 446:	80 e2       	ldi	r24, 0x20	; 32
 448:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
    
    if((counter % 2) == 0)
 44c:	10 fd       	sbrc	r17, 0
 44e:	08 c0       	rjmp	.+16     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
    {
        lcd_gotoxy(15, 1);
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	8f e0       	ldi	r24, 0x0F	; 15
 454:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
        lcd_putc('0');
 458:	80 e3       	ldi	r24, 0x30	; 48
 45a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 45e:	07 c0       	rjmp	.+14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
    }
    else
    {
        lcd_gotoxy(15, 1);
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	8f e0       	ldi	r24, 0x0F	; 15
 464:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
        lcd_putc('1');
 468:	81 e3       	ldi	r24, 0x31	; 49
 46a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
    }
 
    counter = 0;
 46e:	2f 96       	adiw	r28, 0x0f	; 15
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	bf 91       	pop	r27
 484:	af 91       	pop	r26
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	7f 91       	pop	r23
 48c:	6f 91       	pop	r22
 48e:	5f 91       	pop	r21
 490:	4f 91       	pop	r20
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	1f 91       	pop	r17
 498:	0f 91       	pop	r16
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 4a4:	1f 92       	push	r1
 4a6:	0f 92       	push	r0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	0f 92       	push	r0
 4ac:	11 24       	eor	r1, r1
 4ae:	2f 93       	push	r18
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
 4b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 4bc:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 4c0:	8c 71       	andi	r24, 0x1C	; 28
 4c2:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <UART_RxHead>
 4c6:	ef 5f       	subi	r30, 0xFF	; 255
 4c8:	ef 71       	andi	r30, 0x1F	; 31
 4ca:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <UART_RxTail>
 4ce:	e9 17       	cp	r30, r25
 4d0:	39 f0       	breq	.+14     	; 0x4e0 <__vector_18+0x3c>
 4d2:	e0 93 4e 01 	sts	0x014E, r30	; 0x80014e <UART_RxHead>
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	ef 5a       	subi	r30, 0xAF	; 175
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	20 83       	st	Z, r18
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <__vector_18+0x3e>
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <__data_end>
 4e6:	89 2b       	or	r24, r25
 4e8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	9f 91       	pop	r25
 4f2:	8f 91       	pop	r24
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <__vector_19>:
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31
 512:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <UART_TxHead>
 516:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <UART_TxTail>
 51a:	98 17       	cp	r25, r24
 51c:	69 f0       	breq	.+26     	; 0x538 <__vector_19+0x38>
 51e:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <UART_TxTail>
 522:	ef 5f       	subi	r30, 0xFF	; 255
 524:	ef 71       	andi	r30, 0x1F	; 31
 526:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <UART_TxTail>
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	ef 58       	subi	r30, 0x8F	; 143
 52e:	fe 4f       	sbci	r31, 0xFE	; 254
 530:	80 81       	ld	r24, Z
 532:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 536:	05 c0       	rjmp	.+10     	; 0x542 <__vector_19+0x42>
 538:	e1 ec       	ldi	r30, 0xC1	; 193
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	8f 7d       	andi	r24, 0xDF	; 223
 540:	80 83       	st	Z, r24
 542:	ff 91       	pop	r31
 544:	ef 91       	pop	r30
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <uart_init>:
 554:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <UART_TxHead>
 558:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <UART_TxTail>
 55c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <UART_RxHead>
 560:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <UART_RxTail>
 564:	99 23       	and	r25, r25
 566:	1c f4       	brge	.+6      	; 0x56e <uart_init+0x1a>
 568:	22 e0       	ldi	r18, 0x02	; 2
 56a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 56e:	90 78       	andi	r25, 0x80	; 128
 570:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 574:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 578:	88 e9       	ldi	r24, 0x98	; 152
 57a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 57e:	86 e0       	ldi	r24, 0x06	; 6
 580:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 584:	08 95       	ret

00000586 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 586:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <UART_TxHead>
 58a:	2f 5f       	subi	r18, 0xFF	; 255
 58c:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 58e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <UART_TxTail>
 592:	29 17       	cp	r18, r25
 594:	e1 f3       	breq	.-8      	; 0x58e <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 596:	e2 2f       	mov	r30, r18
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	ef 58       	subi	r30, 0x8F	; 143
 59c:	fe 4f       	sbci	r31, 0xFE	; 254
 59e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 5a0:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 5a4:	e1 ec       	ldi	r30, 0xC1	; 193
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	80 62       	ori	r24, 0x20	; 32
 5ac:	80 83       	st	Z, r24
 5ae:	08 95       	ret

000005b0 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	ec 01       	movw	r28, r24
    while (*s)
 5b6:	88 81       	ld	r24, Y
 5b8:	88 23       	and	r24, r24
 5ba:	31 f0       	breq	.+12     	; 0x5c8 <uart_puts+0x18>
 5bc:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 5be:	0e 94 c3 02 	call	0x586	; 0x586 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 5c2:	89 91       	ld	r24, Y+
 5c4:	81 11       	cpse	r24, r1
 5c6:	fb cf       	rjmp	.-10     	; 0x5be <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <__itoa_ncheck>:
 5ce:	bb 27       	eor	r27, r27
 5d0:	4a 30       	cpi	r20, 0x0A	; 10
 5d2:	31 f4       	brne	.+12     	; 0x5e0 <__itoa_ncheck+0x12>
 5d4:	99 23       	and	r25, r25
 5d6:	22 f4       	brpl	.+8      	; 0x5e0 <__itoa_ncheck+0x12>
 5d8:	bd e2       	ldi	r27, 0x2D	; 45
 5da:	90 95       	com	r25
 5dc:	81 95       	neg	r24
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__utoa_common>

000005e4 <__utoa_ncheck>:
 5e4:	bb 27       	eor	r27, r27

000005e6 <__utoa_common>:
 5e6:	fb 01       	movw	r30, r22
 5e8:	55 27       	eor	r21, r21
 5ea:	aa 27       	eor	r26, r26
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	aa 1f       	adc	r26, r26
 5f2:	a4 17       	cp	r26, r20
 5f4:	10 f0       	brcs	.+4      	; 0x5fa <__utoa_common+0x14>
 5f6:	a4 1b       	sub	r26, r20
 5f8:	83 95       	inc	r24
 5fa:	50 51       	subi	r21, 0x10	; 16
 5fc:	b9 f7       	brne	.-18     	; 0x5ec <__utoa_common+0x6>
 5fe:	a0 5d       	subi	r26, 0xD0	; 208
 600:	aa 33       	cpi	r26, 0x3A	; 58
 602:	08 f0       	brcs	.+2      	; 0x606 <__utoa_common+0x20>
 604:	a9 5d       	subi	r26, 0xD9	; 217
 606:	a1 93       	st	Z+, r26
 608:	00 97       	sbiw	r24, 0x00	; 0
 60a:	79 f7       	brne	.-34     	; 0x5ea <__utoa_common+0x4>
 60c:	b1 11       	cpse	r27, r1
 60e:	b1 93       	st	Z+, r27
 610:	11 92       	st	Z+, r1
 612:	cb 01       	movw	r24, r22
 614:	0c 94 19 05 	jmp	0xa32	; 0xa32 <strrev>

00000618 <printf>:
 618:	a0 e0       	ldi	r26, 0x00	; 0
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	e2 e1       	ldi	r30, 0x12	; 18
 61e:	f3 e0       	ldi	r31, 0x03	; 3
 620:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__prologue_saves__+0x20>
 624:	ae 01       	movw	r20, r28
 626:	4b 5f       	subi	r20, 0xFB	; 251
 628:	5f 4f       	sbci	r21, 0xFF	; 255
 62a:	fa 01       	movw	r30, r20
 62c:	61 91       	ld	r22, Z+
 62e:	71 91       	ld	r23, Z+
 630:	af 01       	movw	r20, r30
 632:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <__iob+0x2>
 636:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <__iob+0x3>
 63a:	0e 94 22 03 	call	0x644	; 0x644 <vfprintf>
 63e:	e2 e0       	ldi	r30, 0x02	; 2
 640:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__epilogue_restores__+0x20>

00000644 <vfprintf>:
 644:	ab e0       	ldi	r26, 0x0B	; 11
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	e8 e2       	ldi	r30, 0x28	; 40
 64a:	f3 e0       	ldi	r31, 0x03	; 3
 64c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__prologue_saves__>
 650:	6c 01       	movw	r12, r24
 652:	7b 01       	movw	r14, r22
 654:	8a 01       	movw	r16, r20
 656:	fc 01       	movw	r30, r24
 658:	17 82       	std	Z+7, r1	; 0x07
 65a:	16 82       	std	Z+6, r1	; 0x06
 65c:	83 81       	ldd	r24, Z+3	; 0x03
 65e:	81 ff       	sbrs	r24, 1
 660:	cc c1       	rjmp	.+920    	; 0x9fa <__stack+0xfb>
 662:	ce 01       	movw	r24, r28
 664:	01 96       	adiw	r24, 0x01	; 1
 666:	3c 01       	movw	r6, r24
 668:	f6 01       	movw	r30, r12
 66a:	93 81       	ldd	r25, Z+3	; 0x03
 66c:	f7 01       	movw	r30, r14
 66e:	93 fd       	sbrc	r25, 3
 670:	85 91       	lpm	r24, Z+
 672:	93 ff       	sbrs	r25, 3
 674:	81 91       	ld	r24, Z+
 676:	7f 01       	movw	r14, r30
 678:	88 23       	and	r24, r24
 67a:	09 f4       	brne	.+2      	; 0x67e <vfprintf+0x3a>
 67c:	ba c1       	rjmp	.+884    	; 0x9f2 <__stack+0xf3>
 67e:	85 32       	cpi	r24, 0x25	; 37
 680:	39 f4       	brne	.+14     	; 0x690 <vfprintf+0x4c>
 682:	93 fd       	sbrc	r25, 3
 684:	85 91       	lpm	r24, Z+
 686:	93 ff       	sbrs	r25, 3
 688:	81 91       	ld	r24, Z+
 68a:	7f 01       	movw	r14, r30
 68c:	85 32       	cpi	r24, 0x25	; 37
 68e:	29 f4       	brne	.+10     	; 0x69a <vfprintf+0x56>
 690:	b6 01       	movw	r22, r12
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 698:	e7 cf       	rjmp	.-50     	; 0x668 <vfprintf+0x24>
 69a:	91 2c       	mov	r9, r1
 69c:	21 2c       	mov	r2, r1
 69e:	31 2c       	mov	r3, r1
 6a0:	ff e1       	ldi	r31, 0x1F	; 31
 6a2:	f3 15       	cp	r31, r3
 6a4:	d8 f0       	brcs	.+54     	; 0x6dc <vfprintf+0x98>
 6a6:	8b 32       	cpi	r24, 0x2B	; 43
 6a8:	79 f0       	breq	.+30     	; 0x6c8 <vfprintf+0x84>
 6aa:	38 f4       	brcc	.+14     	; 0x6ba <vfprintf+0x76>
 6ac:	80 32       	cpi	r24, 0x20	; 32
 6ae:	79 f0       	breq	.+30     	; 0x6ce <vfprintf+0x8a>
 6b0:	83 32       	cpi	r24, 0x23	; 35
 6b2:	a1 f4       	brne	.+40     	; 0x6dc <vfprintf+0x98>
 6b4:	23 2d       	mov	r18, r3
 6b6:	20 61       	ori	r18, 0x10	; 16
 6b8:	1d c0       	rjmp	.+58     	; 0x6f4 <vfprintf+0xb0>
 6ba:	8d 32       	cpi	r24, 0x2D	; 45
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <vfprintf+0x92>
 6be:	80 33       	cpi	r24, 0x30	; 48
 6c0:	69 f4       	brne	.+26     	; 0x6dc <vfprintf+0x98>
 6c2:	23 2d       	mov	r18, r3
 6c4:	21 60       	ori	r18, 0x01	; 1
 6c6:	16 c0       	rjmp	.+44     	; 0x6f4 <vfprintf+0xb0>
 6c8:	83 2d       	mov	r24, r3
 6ca:	82 60       	ori	r24, 0x02	; 2
 6cc:	38 2e       	mov	r3, r24
 6ce:	e3 2d       	mov	r30, r3
 6d0:	e4 60       	ori	r30, 0x04	; 4
 6d2:	3e 2e       	mov	r3, r30
 6d4:	2a c0       	rjmp	.+84     	; 0x72a <vfprintf+0xe6>
 6d6:	f3 2d       	mov	r31, r3
 6d8:	f8 60       	ori	r31, 0x08	; 8
 6da:	1d c0       	rjmp	.+58     	; 0x716 <vfprintf+0xd2>
 6dc:	37 fc       	sbrc	r3, 7
 6de:	2d c0       	rjmp	.+90     	; 0x73a <vfprintf+0xf6>
 6e0:	20 ed       	ldi	r18, 0xD0	; 208
 6e2:	28 0f       	add	r18, r24
 6e4:	2a 30       	cpi	r18, 0x0A	; 10
 6e6:	40 f0       	brcs	.+16     	; 0x6f8 <vfprintf+0xb4>
 6e8:	8e 32       	cpi	r24, 0x2E	; 46
 6ea:	b9 f4       	brne	.+46     	; 0x71a <vfprintf+0xd6>
 6ec:	36 fc       	sbrc	r3, 6
 6ee:	81 c1       	rjmp	.+770    	; 0x9f2 <__stack+0xf3>
 6f0:	23 2d       	mov	r18, r3
 6f2:	20 64       	ori	r18, 0x40	; 64
 6f4:	32 2e       	mov	r3, r18
 6f6:	19 c0       	rjmp	.+50     	; 0x72a <vfprintf+0xe6>
 6f8:	36 fe       	sbrs	r3, 6
 6fa:	06 c0       	rjmp	.+12     	; 0x708 <vfprintf+0xc4>
 6fc:	8a e0       	ldi	r24, 0x0A	; 10
 6fe:	98 9e       	mul	r9, r24
 700:	20 0d       	add	r18, r0
 702:	11 24       	eor	r1, r1
 704:	92 2e       	mov	r9, r18
 706:	11 c0       	rjmp	.+34     	; 0x72a <vfprintf+0xe6>
 708:	ea e0       	ldi	r30, 0x0A	; 10
 70a:	2e 9e       	mul	r2, r30
 70c:	20 0d       	add	r18, r0
 70e:	11 24       	eor	r1, r1
 710:	22 2e       	mov	r2, r18
 712:	f3 2d       	mov	r31, r3
 714:	f0 62       	ori	r31, 0x20	; 32
 716:	3f 2e       	mov	r3, r31
 718:	08 c0       	rjmp	.+16     	; 0x72a <vfprintf+0xe6>
 71a:	8c 36       	cpi	r24, 0x6C	; 108
 71c:	21 f4       	brne	.+8      	; 0x726 <vfprintf+0xe2>
 71e:	83 2d       	mov	r24, r3
 720:	80 68       	ori	r24, 0x80	; 128
 722:	38 2e       	mov	r3, r24
 724:	02 c0       	rjmp	.+4      	; 0x72a <vfprintf+0xe6>
 726:	88 36       	cpi	r24, 0x68	; 104
 728:	41 f4       	brne	.+16     	; 0x73a <vfprintf+0xf6>
 72a:	f7 01       	movw	r30, r14
 72c:	93 fd       	sbrc	r25, 3
 72e:	85 91       	lpm	r24, Z+
 730:	93 ff       	sbrs	r25, 3
 732:	81 91       	ld	r24, Z+
 734:	7f 01       	movw	r14, r30
 736:	81 11       	cpse	r24, r1
 738:	b3 cf       	rjmp	.-154    	; 0x6a0 <vfprintf+0x5c>
 73a:	98 2f       	mov	r25, r24
 73c:	9f 7d       	andi	r25, 0xDF	; 223
 73e:	95 54       	subi	r25, 0x45	; 69
 740:	93 30       	cpi	r25, 0x03	; 3
 742:	28 f4       	brcc	.+10     	; 0x74e <vfprintf+0x10a>
 744:	0c 5f       	subi	r16, 0xFC	; 252
 746:	1f 4f       	sbci	r17, 0xFF	; 255
 748:	9f e3       	ldi	r25, 0x3F	; 63
 74a:	99 83       	std	Y+1, r25	; 0x01
 74c:	0d c0       	rjmp	.+26     	; 0x768 <vfprintf+0x124>
 74e:	83 36       	cpi	r24, 0x63	; 99
 750:	31 f0       	breq	.+12     	; 0x75e <vfprintf+0x11a>
 752:	83 37       	cpi	r24, 0x73	; 115
 754:	71 f0       	breq	.+28     	; 0x772 <vfprintf+0x12e>
 756:	83 35       	cpi	r24, 0x53	; 83
 758:	09 f0       	breq	.+2      	; 0x75c <vfprintf+0x118>
 75a:	59 c0       	rjmp	.+178    	; 0x80e <vfprintf+0x1ca>
 75c:	21 c0       	rjmp	.+66     	; 0x7a0 <vfprintf+0x15c>
 75e:	f8 01       	movw	r30, r16
 760:	80 81       	ld	r24, Z
 762:	89 83       	std	Y+1, r24	; 0x01
 764:	0e 5f       	subi	r16, 0xFE	; 254
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	88 24       	eor	r8, r8
 76a:	83 94       	inc	r8
 76c:	91 2c       	mov	r9, r1
 76e:	53 01       	movw	r10, r6
 770:	13 c0       	rjmp	.+38     	; 0x798 <vfprintf+0x154>
 772:	28 01       	movw	r4, r16
 774:	f2 e0       	ldi	r31, 0x02	; 2
 776:	4f 0e       	add	r4, r31
 778:	51 1c       	adc	r5, r1
 77a:	f8 01       	movw	r30, r16
 77c:	a0 80       	ld	r10, Z
 77e:	b1 80       	ldd	r11, Z+1	; 0x01
 780:	36 fe       	sbrs	r3, 6
 782:	03 c0       	rjmp	.+6      	; 0x78a <vfprintf+0x146>
 784:	69 2d       	mov	r22, r9
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	02 c0       	rjmp	.+4      	; 0x78e <vfprintf+0x14a>
 78a:	6f ef       	ldi	r22, 0xFF	; 255
 78c:	7f ef       	ldi	r23, 0xFF	; 255
 78e:	c5 01       	movw	r24, r10
 790:	0e 94 0e 05 	call	0xa1c	; 0xa1c <strnlen>
 794:	4c 01       	movw	r8, r24
 796:	82 01       	movw	r16, r4
 798:	f3 2d       	mov	r31, r3
 79a:	ff 77       	andi	r31, 0x7F	; 127
 79c:	3f 2e       	mov	r3, r31
 79e:	16 c0       	rjmp	.+44     	; 0x7cc <vfprintf+0x188>
 7a0:	28 01       	movw	r4, r16
 7a2:	22 e0       	ldi	r18, 0x02	; 2
 7a4:	42 0e       	add	r4, r18
 7a6:	51 1c       	adc	r5, r1
 7a8:	f8 01       	movw	r30, r16
 7aa:	a0 80       	ld	r10, Z
 7ac:	b1 80       	ldd	r11, Z+1	; 0x01
 7ae:	36 fe       	sbrs	r3, 6
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <vfprintf+0x174>
 7b2:	69 2d       	mov	r22, r9
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <vfprintf+0x178>
 7b8:	6f ef       	ldi	r22, 0xFF	; 255
 7ba:	7f ef       	ldi	r23, 0xFF	; 255
 7bc:	c5 01       	movw	r24, r10
 7be:	0e 94 03 05 	call	0xa06	; 0xa06 <strnlen_P>
 7c2:	4c 01       	movw	r8, r24
 7c4:	f3 2d       	mov	r31, r3
 7c6:	f0 68       	ori	r31, 0x80	; 128
 7c8:	3f 2e       	mov	r3, r31
 7ca:	82 01       	movw	r16, r4
 7cc:	33 fc       	sbrc	r3, 3
 7ce:	1b c0       	rjmp	.+54     	; 0x806 <vfprintf+0x1c2>
 7d0:	82 2d       	mov	r24, r2
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	88 16       	cp	r8, r24
 7d6:	99 06       	cpc	r9, r25
 7d8:	b0 f4       	brcc	.+44     	; 0x806 <vfprintf+0x1c2>
 7da:	b6 01       	movw	r22, r12
 7dc:	80 e2       	ldi	r24, 0x20	; 32
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 7e4:	2a 94       	dec	r2
 7e6:	f4 cf       	rjmp	.-24     	; 0x7d0 <vfprintf+0x18c>
 7e8:	f5 01       	movw	r30, r10
 7ea:	37 fc       	sbrc	r3, 7
 7ec:	85 91       	lpm	r24, Z+
 7ee:	37 fe       	sbrs	r3, 7
 7f0:	81 91       	ld	r24, Z+
 7f2:	5f 01       	movw	r10, r30
 7f4:	b6 01       	movw	r22, r12
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 7fc:	21 10       	cpse	r2, r1
 7fe:	2a 94       	dec	r2
 800:	21 e0       	ldi	r18, 0x01	; 1
 802:	82 1a       	sub	r8, r18
 804:	91 08       	sbc	r9, r1
 806:	81 14       	cp	r8, r1
 808:	91 04       	cpc	r9, r1
 80a:	71 f7       	brne	.-36     	; 0x7e8 <vfprintf+0x1a4>
 80c:	e8 c0       	rjmp	.+464    	; 0x9de <__stack+0xdf>
 80e:	84 36       	cpi	r24, 0x64	; 100
 810:	11 f0       	breq	.+4      	; 0x816 <vfprintf+0x1d2>
 812:	89 36       	cpi	r24, 0x69	; 105
 814:	41 f5       	brne	.+80     	; 0x866 <vfprintf+0x222>
 816:	f8 01       	movw	r30, r16
 818:	37 fe       	sbrs	r3, 7
 81a:	07 c0       	rjmp	.+14     	; 0x82a <vfprintf+0x1e6>
 81c:	60 81       	ld	r22, Z
 81e:	71 81       	ldd	r23, Z+1	; 0x01
 820:	82 81       	ldd	r24, Z+2	; 0x02
 822:	93 81       	ldd	r25, Z+3	; 0x03
 824:	0c 5f       	subi	r16, 0xFC	; 252
 826:	1f 4f       	sbci	r17, 0xFF	; 255
 828:	08 c0       	rjmp	.+16     	; 0x83a <vfprintf+0x1f6>
 82a:	60 81       	ld	r22, Z
 82c:	71 81       	ldd	r23, Z+1	; 0x01
 82e:	07 2e       	mov	r0, r23
 830:	00 0c       	add	r0, r0
 832:	88 0b       	sbc	r24, r24
 834:	99 0b       	sbc	r25, r25
 836:	0e 5f       	subi	r16, 0xFE	; 254
 838:	1f 4f       	sbci	r17, 0xFF	; 255
 83a:	f3 2d       	mov	r31, r3
 83c:	ff 76       	andi	r31, 0x6F	; 111
 83e:	3f 2e       	mov	r3, r31
 840:	97 ff       	sbrs	r25, 7
 842:	09 c0       	rjmp	.+18     	; 0x856 <vfprintf+0x212>
 844:	90 95       	com	r25
 846:	80 95       	com	r24
 848:	70 95       	com	r23
 84a:	61 95       	neg	r22
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	f0 68       	ori	r31, 0x80	; 128
 854:	3f 2e       	mov	r3, r31
 856:	2a e0       	ldi	r18, 0x0A	; 10
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	a3 01       	movw	r20, r6
 85c:	0e 94 65 05 	call	0xaca	; 0xaca <__ultoa_invert>
 860:	88 2e       	mov	r8, r24
 862:	86 18       	sub	r8, r6
 864:	45 c0       	rjmp	.+138    	; 0x8f0 <vfprintf+0x2ac>
 866:	85 37       	cpi	r24, 0x75	; 117
 868:	31 f4       	brne	.+12     	; 0x876 <vfprintf+0x232>
 86a:	23 2d       	mov	r18, r3
 86c:	2f 7e       	andi	r18, 0xEF	; 239
 86e:	b2 2e       	mov	r11, r18
 870:	2a e0       	ldi	r18, 0x0A	; 10
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	25 c0       	rjmp	.+74     	; 0x8c0 <vfprintf+0x27c>
 876:	93 2d       	mov	r25, r3
 878:	99 7f       	andi	r25, 0xF9	; 249
 87a:	b9 2e       	mov	r11, r25
 87c:	8f 36       	cpi	r24, 0x6F	; 111
 87e:	c1 f0       	breq	.+48     	; 0x8b0 <vfprintf+0x26c>
 880:	18 f4       	brcc	.+6      	; 0x888 <vfprintf+0x244>
 882:	88 35       	cpi	r24, 0x58	; 88
 884:	79 f0       	breq	.+30     	; 0x8a4 <vfprintf+0x260>
 886:	b5 c0       	rjmp	.+362    	; 0x9f2 <__stack+0xf3>
 888:	80 37       	cpi	r24, 0x70	; 112
 88a:	19 f0       	breq	.+6      	; 0x892 <vfprintf+0x24e>
 88c:	88 37       	cpi	r24, 0x78	; 120
 88e:	21 f0       	breq	.+8      	; 0x898 <vfprintf+0x254>
 890:	b0 c0       	rjmp	.+352    	; 0x9f2 <__stack+0xf3>
 892:	e9 2f       	mov	r30, r25
 894:	e0 61       	ori	r30, 0x10	; 16
 896:	be 2e       	mov	r11, r30
 898:	b4 fe       	sbrs	r11, 4
 89a:	0d c0       	rjmp	.+26     	; 0x8b6 <vfprintf+0x272>
 89c:	fb 2d       	mov	r31, r11
 89e:	f4 60       	ori	r31, 0x04	; 4
 8a0:	bf 2e       	mov	r11, r31
 8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <vfprintf+0x272>
 8a4:	34 fe       	sbrs	r3, 4
 8a6:	0a c0       	rjmp	.+20     	; 0x8bc <vfprintf+0x278>
 8a8:	29 2f       	mov	r18, r25
 8aa:	26 60       	ori	r18, 0x06	; 6
 8ac:	b2 2e       	mov	r11, r18
 8ae:	06 c0       	rjmp	.+12     	; 0x8bc <vfprintf+0x278>
 8b0:	28 e0       	ldi	r18, 0x08	; 8
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <vfprintf+0x27c>
 8b6:	20 e1       	ldi	r18, 0x10	; 16
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <vfprintf+0x27c>
 8bc:	20 e1       	ldi	r18, 0x10	; 16
 8be:	32 e0       	ldi	r19, 0x02	; 2
 8c0:	f8 01       	movw	r30, r16
 8c2:	b7 fe       	sbrs	r11, 7
 8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <vfprintf+0x290>
 8c6:	60 81       	ld	r22, Z
 8c8:	71 81       	ldd	r23, Z+1	; 0x01
 8ca:	82 81       	ldd	r24, Z+2	; 0x02
 8cc:	93 81       	ldd	r25, Z+3	; 0x03
 8ce:	0c 5f       	subi	r16, 0xFC	; 252
 8d0:	1f 4f       	sbci	r17, 0xFF	; 255
 8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <vfprintf+0x29c>
 8d4:	60 81       	ld	r22, Z
 8d6:	71 81       	ldd	r23, Z+1	; 0x01
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	0e 5f       	subi	r16, 0xFE	; 254
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	a3 01       	movw	r20, r6
 8e2:	0e 94 65 05 	call	0xaca	; 0xaca <__ultoa_invert>
 8e6:	88 2e       	mov	r8, r24
 8e8:	86 18       	sub	r8, r6
 8ea:	fb 2d       	mov	r31, r11
 8ec:	ff 77       	andi	r31, 0x7F	; 127
 8ee:	3f 2e       	mov	r3, r31
 8f0:	36 fe       	sbrs	r3, 6
 8f2:	0d c0       	rjmp	.+26     	; 0x90e <__stack+0xf>
 8f4:	23 2d       	mov	r18, r3
 8f6:	2e 7f       	andi	r18, 0xFE	; 254
 8f8:	a2 2e       	mov	r10, r18
 8fa:	89 14       	cp	r8, r9
 8fc:	58 f4       	brcc	.+22     	; 0x914 <__stack+0x15>
 8fe:	34 fe       	sbrs	r3, 4
 900:	0b c0       	rjmp	.+22     	; 0x918 <__stack+0x19>
 902:	32 fc       	sbrc	r3, 2
 904:	09 c0       	rjmp	.+18     	; 0x918 <__stack+0x19>
 906:	83 2d       	mov	r24, r3
 908:	8e 7e       	andi	r24, 0xEE	; 238
 90a:	a8 2e       	mov	r10, r24
 90c:	05 c0       	rjmp	.+10     	; 0x918 <__stack+0x19>
 90e:	b8 2c       	mov	r11, r8
 910:	a3 2c       	mov	r10, r3
 912:	03 c0       	rjmp	.+6      	; 0x91a <__stack+0x1b>
 914:	b8 2c       	mov	r11, r8
 916:	01 c0       	rjmp	.+2      	; 0x91a <__stack+0x1b>
 918:	b9 2c       	mov	r11, r9
 91a:	a4 fe       	sbrs	r10, 4
 91c:	0f c0       	rjmp	.+30     	; 0x93c <__stack+0x3d>
 91e:	fe 01       	movw	r30, r28
 920:	e8 0d       	add	r30, r8
 922:	f1 1d       	adc	r31, r1
 924:	80 81       	ld	r24, Z
 926:	80 33       	cpi	r24, 0x30	; 48
 928:	21 f4       	brne	.+8      	; 0x932 <__stack+0x33>
 92a:	9a 2d       	mov	r25, r10
 92c:	99 7e       	andi	r25, 0xE9	; 233
 92e:	a9 2e       	mov	r10, r25
 930:	09 c0       	rjmp	.+18     	; 0x944 <__stack+0x45>
 932:	a2 fe       	sbrs	r10, 2
 934:	06 c0       	rjmp	.+12     	; 0x942 <__stack+0x43>
 936:	b3 94       	inc	r11
 938:	b3 94       	inc	r11
 93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0x45>
 93c:	8a 2d       	mov	r24, r10
 93e:	86 78       	andi	r24, 0x86	; 134
 940:	09 f0       	breq	.+2      	; 0x944 <__stack+0x45>
 942:	b3 94       	inc	r11
 944:	a3 fc       	sbrc	r10, 3
 946:	11 c0       	rjmp	.+34     	; 0x96a <__stack+0x6b>
 948:	a0 fe       	sbrs	r10, 0
 94a:	06 c0       	rjmp	.+12     	; 0x958 <__stack+0x59>
 94c:	b2 14       	cp	r11, r2
 94e:	88 f4       	brcc	.+34     	; 0x972 <__stack+0x73>
 950:	28 0c       	add	r2, r8
 952:	92 2c       	mov	r9, r2
 954:	9b 18       	sub	r9, r11
 956:	0e c0       	rjmp	.+28     	; 0x974 <__stack+0x75>
 958:	b2 14       	cp	r11, r2
 95a:	60 f4       	brcc	.+24     	; 0x974 <__stack+0x75>
 95c:	b6 01       	movw	r22, r12
 95e:	80 e2       	ldi	r24, 0x20	; 32
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 966:	b3 94       	inc	r11
 968:	f7 cf       	rjmp	.-18     	; 0x958 <__stack+0x59>
 96a:	b2 14       	cp	r11, r2
 96c:	18 f4       	brcc	.+6      	; 0x974 <__stack+0x75>
 96e:	2b 18       	sub	r2, r11
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
 972:	98 2c       	mov	r9, r8
 974:	21 2c       	mov	r2, r1
 976:	a4 fe       	sbrs	r10, 4
 978:	10 c0       	rjmp	.+32     	; 0x99a <__stack+0x9b>
 97a:	b6 01       	movw	r22, r12
 97c:	80 e3       	ldi	r24, 0x30	; 48
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 984:	a2 fe       	sbrs	r10, 2
 986:	17 c0       	rjmp	.+46     	; 0x9b6 <__stack+0xb7>
 988:	a1 fc       	sbrc	r10, 1
 98a:	03 c0       	rjmp	.+6      	; 0x992 <__stack+0x93>
 98c:	88 e7       	ldi	r24, 0x78	; 120
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	02 c0       	rjmp	.+4      	; 0x996 <__stack+0x97>
 992:	88 e5       	ldi	r24, 0x58	; 88
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	b6 01       	movw	r22, r12
 998:	0c c0       	rjmp	.+24     	; 0x9b2 <__stack+0xb3>
 99a:	8a 2d       	mov	r24, r10
 99c:	86 78       	andi	r24, 0x86	; 134
 99e:	59 f0       	breq	.+22     	; 0x9b6 <__stack+0xb7>
 9a0:	a1 fe       	sbrs	r10, 1
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <__stack+0xa9>
 9a4:	8b e2       	ldi	r24, 0x2B	; 43
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__stack+0xab>
 9a8:	80 e2       	ldi	r24, 0x20	; 32
 9aa:	a7 fc       	sbrc	r10, 7
 9ac:	8d e2       	ldi	r24, 0x2D	; 45
 9ae:	b6 01       	movw	r22, r12
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9b6:	89 14       	cp	r8, r9
 9b8:	38 f4       	brcc	.+14     	; 0x9c8 <__stack+0xc9>
 9ba:	b6 01       	movw	r22, r12
 9bc:	80 e3       	ldi	r24, 0x30	; 48
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9c4:	9a 94       	dec	r9
 9c6:	f7 cf       	rjmp	.-18     	; 0x9b6 <__stack+0xb7>
 9c8:	8a 94       	dec	r8
 9ca:	f3 01       	movw	r30, r6
 9cc:	e8 0d       	add	r30, r8
 9ce:	f1 1d       	adc	r31, r1
 9d0:	80 81       	ld	r24, Z
 9d2:	b6 01       	movw	r22, r12
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9da:	81 10       	cpse	r8, r1
 9dc:	f5 cf       	rjmp	.-22     	; 0x9c8 <__stack+0xc9>
 9de:	22 20       	and	r2, r2
 9e0:	09 f4       	brne	.+2      	; 0x9e4 <__stack+0xe5>
 9e2:	42 ce       	rjmp	.-892    	; 0x668 <vfprintf+0x24>
 9e4:	b6 01       	movw	r22, r12
 9e6:	80 e2       	ldi	r24, 0x20	; 32
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9ee:	2a 94       	dec	r2
 9f0:	f6 cf       	rjmp	.-20     	; 0x9de <__stack+0xdf>
 9f2:	f6 01       	movw	r30, r12
 9f4:	86 81       	ldd	r24, Z+6	; 0x06
 9f6:	97 81       	ldd	r25, Z+7	; 0x07
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
 9fa:	8f ef       	ldi	r24, 0xFF	; 255
 9fc:	9f ef       	ldi	r25, 0xFF	; 255
 9fe:	2b 96       	adiw	r28, 0x0b	; 11
 a00:	e2 e1       	ldi	r30, 0x12	; 18
 a02:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__epilogue_restores__>

00000a06 <strnlen_P>:
 a06:	fc 01       	movw	r30, r24
 a08:	05 90       	lpm	r0, Z+
 a0a:	61 50       	subi	r22, 0x01	; 1
 a0c:	70 40       	sbci	r23, 0x00	; 0
 a0e:	01 10       	cpse	r0, r1
 a10:	d8 f7       	brcc	.-10     	; 0xa08 <strnlen_P+0x2>
 a12:	80 95       	com	r24
 a14:	90 95       	com	r25
 a16:	8e 0f       	add	r24, r30
 a18:	9f 1f       	adc	r25, r31
 a1a:	08 95       	ret

00000a1c <strnlen>:
 a1c:	fc 01       	movw	r30, r24
 a1e:	61 50       	subi	r22, 0x01	; 1
 a20:	70 40       	sbci	r23, 0x00	; 0
 a22:	01 90       	ld	r0, Z+
 a24:	01 10       	cpse	r0, r1
 a26:	d8 f7       	brcc	.-10     	; 0xa1e <strnlen+0x2>
 a28:	80 95       	com	r24
 a2a:	90 95       	com	r25
 a2c:	8e 0f       	add	r24, r30
 a2e:	9f 1f       	adc	r25, r31
 a30:	08 95       	ret

00000a32 <strrev>:
 a32:	dc 01       	movw	r26, r24
 a34:	fc 01       	movw	r30, r24
 a36:	67 2f       	mov	r22, r23
 a38:	71 91       	ld	r23, Z+
 a3a:	77 23       	and	r23, r23
 a3c:	e1 f7       	brne	.-8      	; 0xa36 <strrev+0x4>
 a3e:	32 97       	sbiw	r30, 0x02	; 2
 a40:	04 c0       	rjmp	.+8      	; 0xa4a <strrev+0x18>
 a42:	7c 91       	ld	r23, X
 a44:	6d 93       	st	X+, r22
 a46:	70 83       	st	Z, r23
 a48:	62 91       	ld	r22, -Z
 a4a:	ae 17       	cp	r26, r30
 a4c:	bf 07       	cpc	r27, r31
 a4e:	c8 f3       	brcs	.-14     	; 0xa42 <strrev+0x10>
 a50:	08 95       	ret

00000a52 <fputc>:
 a52:	0f 93       	push	r16
 a54:	1f 93       	push	r17
 a56:	cf 93       	push	r28
 a58:	df 93       	push	r29
 a5a:	fb 01       	movw	r30, r22
 a5c:	23 81       	ldd	r18, Z+3	; 0x03
 a5e:	21 fd       	sbrc	r18, 1
 a60:	03 c0       	rjmp	.+6      	; 0xa68 <fputc+0x16>
 a62:	8f ef       	ldi	r24, 0xFF	; 255
 a64:	9f ef       	ldi	r25, 0xFF	; 255
 a66:	2c c0       	rjmp	.+88     	; 0xac0 <fputc+0x6e>
 a68:	22 ff       	sbrs	r18, 2
 a6a:	16 c0       	rjmp	.+44     	; 0xa98 <fputc+0x46>
 a6c:	46 81       	ldd	r20, Z+6	; 0x06
 a6e:	57 81       	ldd	r21, Z+7	; 0x07
 a70:	24 81       	ldd	r18, Z+4	; 0x04
 a72:	35 81       	ldd	r19, Z+5	; 0x05
 a74:	42 17       	cp	r20, r18
 a76:	53 07       	cpc	r21, r19
 a78:	44 f4       	brge	.+16     	; 0xa8a <fputc+0x38>
 a7a:	a0 81       	ld	r26, Z
 a7c:	b1 81       	ldd	r27, Z+1	; 0x01
 a7e:	9d 01       	movw	r18, r26
 a80:	2f 5f       	subi	r18, 0xFF	; 255
 a82:	3f 4f       	sbci	r19, 0xFF	; 255
 a84:	31 83       	std	Z+1, r19	; 0x01
 a86:	20 83       	st	Z, r18
 a88:	8c 93       	st	X, r24
 a8a:	26 81       	ldd	r18, Z+6	; 0x06
 a8c:	37 81       	ldd	r19, Z+7	; 0x07
 a8e:	2f 5f       	subi	r18, 0xFF	; 255
 a90:	3f 4f       	sbci	r19, 0xFF	; 255
 a92:	37 83       	std	Z+7, r19	; 0x07
 a94:	26 83       	std	Z+6, r18	; 0x06
 a96:	14 c0       	rjmp	.+40     	; 0xac0 <fputc+0x6e>
 a98:	8b 01       	movw	r16, r22
 a9a:	ec 01       	movw	r28, r24
 a9c:	fb 01       	movw	r30, r22
 a9e:	00 84       	ldd	r0, Z+8	; 0x08
 aa0:	f1 85       	ldd	r31, Z+9	; 0x09
 aa2:	e0 2d       	mov	r30, r0
 aa4:	09 95       	icall
 aa6:	89 2b       	or	r24, r25
 aa8:	e1 f6       	brne	.-72     	; 0xa62 <fputc+0x10>
 aaa:	d8 01       	movw	r26, r16
 aac:	16 96       	adiw	r26, 0x06	; 6
 aae:	8d 91       	ld	r24, X+
 ab0:	9c 91       	ld	r25, X
 ab2:	17 97       	sbiw	r26, 0x07	; 7
 ab4:	01 96       	adiw	r24, 0x01	; 1
 ab6:	17 96       	adiw	r26, 0x07	; 7
 ab8:	9c 93       	st	X, r25
 aba:	8e 93       	st	-X, r24
 abc:	16 97       	sbiw	r26, 0x06	; 6
 abe:	ce 01       	movw	r24, r28
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	1f 91       	pop	r17
 ac6:	0f 91       	pop	r16
 ac8:	08 95       	ret

00000aca <__ultoa_invert>:
 aca:	fa 01       	movw	r30, r20
 acc:	aa 27       	eor	r26, r26
 ace:	28 30       	cpi	r18, 0x08	; 8
 ad0:	51 f1       	breq	.+84     	; 0xb26 <__ultoa_invert+0x5c>
 ad2:	20 31       	cpi	r18, 0x10	; 16
 ad4:	81 f1       	breq	.+96     	; 0xb36 <__ultoa_invert+0x6c>
 ad6:	e8 94       	clt
 ad8:	6f 93       	push	r22
 ada:	6e 7f       	andi	r22, 0xFE	; 254
 adc:	6e 5f       	subi	r22, 0xFE	; 254
 ade:	7f 4f       	sbci	r23, 0xFF	; 255
 ae0:	8f 4f       	sbci	r24, 0xFF	; 255
 ae2:	9f 4f       	sbci	r25, 0xFF	; 255
 ae4:	af 4f       	sbci	r26, 0xFF	; 255
 ae6:	b1 e0       	ldi	r27, 0x01	; 1
 ae8:	3e d0       	rcall	.+124    	; 0xb66 <__ultoa_invert+0x9c>
 aea:	b4 e0       	ldi	r27, 0x04	; 4
 aec:	3c d0       	rcall	.+120    	; 0xb66 <__ultoa_invert+0x9c>
 aee:	67 0f       	add	r22, r23
 af0:	78 1f       	adc	r23, r24
 af2:	89 1f       	adc	r24, r25
 af4:	9a 1f       	adc	r25, r26
 af6:	a1 1d       	adc	r26, r1
 af8:	68 0f       	add	r22, r24
 afa:	79 1f       	adc	r23, r25
 afc:	8a 1f       	adc	r24, r26
 afe:	91 1d       	adc	r25, r1
 b00:	a1 1d       	adc	r26, r1
 b02:	6a 0f       	add	r22, r26
 b04:	71 1d       	adc	r23, r1
 b06:	81 1d       	adc	r24, r1
 b08:	91 1d       	adc	r25, r1
 b0a:	a1 1d       	adc	r26, r1
 b0c:	20 d0       	rcall	.+64     	; 0xb4e <__ultoa_invert+0x84>
 b0e:	09 f4       	brne	.+2      	; 0xb12 <__ultoa_invert+0x48>
 b10:	68 94       	set
 b12:	3f 91       	pop	r19
 b14:	2a e0       	ldi	r18, 0x0A	; 10
 b16:	26 9f       	mul	r18, r22
 b18:	11 24       	eor	r1, r1
 b1a:	30 19       	sub	r19, r0
 b1c:	30 5d       	subi	r19, 0xD0	; 208
 b1e:	31 93       	st	Z+, r19
 b20:	de f6       	brtc	.-74     	; 0xad8 <__ultoa_invert+0xe>
 b22:	cf 01       	movw	r24, r30
 b24:	08 95       	ret
 b26:	46 2f       	mov	r20, r22
 b28:	47 70       	andi	r20, 0x07	; 7
 b2a:	40 5d       	subi	r20, 0xD0	; 208
 b2c:	41 93       	st	Z+, r20
 b2e:	b3 e0       	ldi	r27, 0x03	; 3
 b30:	0f d0       	rcall	.+30     	; 0xb50 <__ultoa_invert+0x86>
 b32:	c9 f7       	brne	.-14     	; 0xb26 <__ultoa_invert+0x5c>
 b34:	f6 cf       	rjmp	.-20     	; 0xb22 <__ultoa_invert+0x58>
 b36:	46 2f       	mov	r20, r22
 b38:	4f 70       	andi	r20, 0x0F	; 15
 b3a:	40 5d       	subi	r20, 0xD0	; 208
 b3c:	4a 33       	cpi	r20, 0x3A	; 58
 b3e:	18 f0       	brcs	.+6      	; 0xb46 <__ultoa_invert+0x7c>
 b40:	49 5d       	subi	r20, 0xD9	; 217
 b42:	31 fd       	sbrc	r19, 1
 b44:	40 52       	subi	r20, 0x20	; 32
 b46:	41 93       	st	Z+, r20
 b48:	02 d0       	rcall	.+4      	; 0xb4e <__ultoa_invert+0x84>
 b4a:	a9 f7       	brne	.-22     	; 0xb36 <__ultoa_invert+0x6c>
 b4c:	ea cf       	rjmp	.-44     	; 0xb22 <__ultoa_invert+0x58>
 b4e:	b4 e0       	ldi	r27, 0x04	; 4
 b50:	a6 95       	lsr	r26
 b52:	97 95       	ror	r25
 b54:	87 95       	ror	r24
 b56:	77 95       	ror	r23
 b58:	67 95       	ror	r22
 b5a:	ba 95       	dec	r27
 b5c:	c9 f7       	brne	.-14     	; 0xb50 <__ultoa_invert+0x86>
 b5e:	00 97       	sbiw	r24, 0x00	; 0
 b60:	61 05       	cpc	r22, r1
 b62:	71 05       	cpc	r23, r1
 b64:	08 95       	ret
 b66:	9b 01       	movw	r18, r22
 b68:	ac 01       	movw	r20, r24
 b6a:	0a 2e       	mov	r0, r26
 b6c:	06 94       	lsr	r0
 b6e:	57 95       	ror	r21
 b70:	47 95       	ror	r20
 b72:	37 95       	ror	r19
 b74:	27 95       	ror	r18
 b76:	ba 95       	dec	r27
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__ultoa_invert+0xa2>
 b7a:	62 0f       	add	r22, r18
 b7c:	73 1f       	adc	r23, r19
 b7e:	84 1f       	adc	r24, r20
 b80:	95 1f       	adc	r25, r21
 b82:	a0 1d       	adc	r26, r0
 b84:	08 95       	ret

00000b86 <__prologue_saves__>:
 b86:	2f 92       	push	r2
 b88:	3f 92       	push	r3
 b8a:	4f 92       	push	r4
 b8c:	5f 92       	push	r5
 b8e:	6f 92       	push	r6
 b90:	7f 92       	push	r7
 b92:	8f 92       	push	r8
 b94:	9f 92       	push	r9
 b96:	af 92       	push	r10
 b98:	bf 92       	push	r11
 b9a:	cf 92       	push	r12
 b9c:	df 92       	push	r13
 b9e:	ef 92       	push	r14
 ba0:	ff 92       	push	r15
 ba2:	0f 93       	push	r16
 ba4:	1f 93       	push	r17
 ba6:	cf 93       	push	r28
 ba8:	df 93       	push	r29
 baa:	cd b7       	in	r28, 0x3d	; 61
 bac:	de b7       	in	r29, 0x3e	; 62
 bae:	ca 1b       	sub	r28, r26
 bb0:	db 0b       	sbc	r29, r27
 bb2:	0f b6       	in	r0, 0x3f	; 63
 bb4:	f8 94       	cli
 bb6:	de bf       	out	0x3e, r29	; 62
 bb8:	0f be       	out	0x3f, r0	; 63
 bba:	cd bf       	out	0x3d, r28	; 61
 bbc:	09 94       	ijmp

00000bbe <__epilogue_restores__>:
 bbe:	2a 88       	ldd	r2, Y+18	; 0x12
 bc0:	39 88       	ldd	r3, Y+17	; 0x11
 bc2:	48 88       	ldd	r4, Y+16	; 0x10
 bc4:	5f 84       	ldd	r5, Y+15	; 0x0f
 bc6:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc8:	7d 84       	ldd	r7, Y+13	; 0x0d
 bca:	8c 84       	ldd	r8, Y+12	; 0x0c
 bcc:	9b 84       	ldd	r9, Y+11	; 0x0b
 bce:	aa 84       	ldd	r10, Y+10	; 0x0a
 bd0:	b9 84       	ldd	r11, Y+9	; 0x09
 bd2:	c8 84       	ldd	r12, Y+8	; 0x08
 bd4:	df 80       	ldd	r13, Y+7	; 0x07
 bd6:	ee 80       	ldd	r14, Y+6	; 0x06
 bd8:	fd 80       	ldd	r15, Y+5	; 0x05
 bda:	0c 81       	ldd	r16, Y+4	; 0x04
 bdc:	1b 81       	ldd	r17, Y+3	; 0x03
 bde:	aa 81       	ldd	r26, Y+2	; 0x02
 be0:	b9 81       	ldd	r27, Y+1	; 0x01
 be2:	ce 0f       	add	r28, r30
 be4:	d1 1d       	adc	r29, r1
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	f8 94       	cli
 bea:	de bf       	out	0x3e, r29	; 62
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	cd bf       	out	0x3d, r28	; 61
 bf0:	ed 01       	movw	r28, r26
 bf2:	08 95       	ret

00000bf4 <_exit>:
 bf4:	f8 94       	cli

00000bf6 <__stop_program>:
 bf6:	ff cf       	rjmp	.-2      	; 0xbf6 <__stop_program>
